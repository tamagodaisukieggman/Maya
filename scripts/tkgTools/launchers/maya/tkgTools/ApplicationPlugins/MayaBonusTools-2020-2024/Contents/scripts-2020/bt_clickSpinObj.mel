// Copyright (C) 1997-2020 Autodesk, Inc., and/or its licensors.
// All rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its licensors,
// which is protected by U.S. and Canadian federal copyright law and by
// international treaties.
//
// The Data is provided for use exclusively by You. You have the right to use,
// modify, and incorporate this Data into other products for purposes authorized 
// by the Autodesk software license agreement, without fee.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. AUTODESK
// DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED WARRANTIES
// INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF NON-INFRINGEMENT,
// MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, OR ARISING FROM A COURSE 
// OF DEALING, USAGE, OR TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS
// LICENSORS BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS
// LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.
//
// Author:		Steven T. L. Roselle
//
// Last Update:        ( 04/01/14 )
//
// Tool for click dragging in order to rotate selected objects in the scene.
// Rotation will happen based on the existing horizontal plane of each object.
// If multiple objects are selected they will be spun around their average center point
// CTRL will rotate each objec indvidually.
// Shift will rotate around last selected object



global proc bt_buildSpinContextDrag()
{
	//Rotate selected objects with cursor
	//

	float  $dragPosition[] = `draggerContext -query   -dragPoint buildSpinContext`;
	float  $startPosition[] = `draggerContext -query   -anchorPoint buildSpinContext`;
	float  $dragDirection[];
	string $modifier   = `draggerContext -query   -modifier buildSpinContext`;
	string $message;
	string $unit;
	string $tmp;	
    float $xcenter;
    float $ycenter;
    float $zcenter;
    float $spinFactor;
	float $boundingBox[];	
	
	string $Objects[] = `ls -sl -type transform`;
	string $Obj;
	
	//Make sure only transforms are effected
	select -r $Objects;
	
	$dragDirection[0] = $dragPosition[0] - $startPosition[0];

	$size = `size $Objects`;
	$lastObj = $Objects[$size-1];
	
	$absX = `getAttr ($lastObj+".tx")`;
	$absY = `getAttr ($lastObj+".ty")`;
	$absZ = `getAttr ($lastObj+".tz")`;
	
	
	int $useUpAxisY = (`upAxis -q -axis` == "y");
		
	//convert value from cm to current units because draggerContext always returns cm
	$unit = `currentUnit -q -linear`;
	if ($unit != "cm") 
		{
		$tmp = $dragPosition[0];
		$dragPosition[0] = `convertUnit -fromUnit "cm" -toUnit $unit $tmp`;
		$tmp = $dragPosition[1];
		$dragPosition[1] = `convertUnit -fromUnit "cm" -toUnit $unit $tmp`;
		$tmp = $dragPosition[2];
		$dragPosition[2] = `convertUnit -fromUnit "cm" -toUnit $unit $tmp`;
		}

	if ( $modifier == "ctrl")
		{
		//Rotate around last object
		$boundingBox = `exactWorldBoundingBox $lastObj`;
		$spinFactor = (($boundingBox[0] - $boundingBox[3]) + ($boundingBox[1] - $boundingBox[4]));
    	$xcenter = (($boundingBox[0] + $boundingBox[3]) / 2);
    	$ycenter = (($boundingBox[1] + $boundingBox[4]) / 2);
    	$zcenter = (($boundingBox[2] + $boundingBox[5]) / 2);
    	
    	if ($useUpAxisY)
            rotate -r -ws -pivot $xcenter $ycenter $zcenter  -x 0 -y ($dragDirection[0]/$spinFactor) -z 0;
        else //Z
            rotate -r -ws -pivot $xcenter $ycenter $zcenter  -x 0 -y 0 -z ($dragDirection[0]/$spinFactor);
        
		}
	else if ($modifier == "shift")
		{
		for ($Obj in $Objects)
		    {
    		//Rotate around center of bounding box for each object independantly
    	    $boundingBox = `exactWorldBoundingBox $Obj`;
    		$spinFactor = (($boundingBox[0] - $boundingBox[3]) + ($boundingBox[1] - $boundingBox[4]));
        	$xcenter = (($boundingBox[0] + $boundingBox[3]) / 2);
        	$ycenter = (($boundingBox[1] + $boundingBox[4]) / 2);
        	$zcenter = (($boundingBox[2] + $boundingBox[5]) / 2);
        	 
        	if ($useUpAxisY)
            	rotate -r -ws -pivot $xcenter $ycenter $zcenter  -x 0 -y ($dragDirection[0]/$spinFactor) -z 0 $Obj;
            else //Z
                rotate -r -ws -pivot $xcenter $ycenter $zcenter  -x 0 -y 0 -z ($dragDirection[0]/$spinFactor) $Obj;

        	}
		}
	else
		{
		//Rotate around center of bounding box for all selected objects
	    $boundingBox = `exactWorldBoundingBox`;
		$spinFactor = (($boundingBox[0] - $boundingBox[3]) + ($boundingBox[1] - $boundingBox[4]));
    	$xcenter = (($boundingBox[0] + $boundingBox[3]) / 2);
    	$ycenter = (($boundingBox[1] + $boundingBox[4]) / 2);
    	$zcenter = (($boundingBox[2] + $boundingBox[5]) / 2);

       	if ($useUpAxisY)
            rotate -r -ws -pivot $xcenter $ycenter $zcenter -x 0 -y ($dragDirection[0]/$spinFactor) -z 0;	
	    else //Z
            rotate -r -ws -pivot $xcenter $ycenter $zcenter -x 0 -y 0 -z ($dragDirection[0]/$spinFactor);	
	    
		}

	refresh -currentView;
}


proc bt_checkClickRotateHotkey()
{
    string $hotkeyExists = `hotkey -q -ctl -name "E"`;

    if (`hotkeySet -current -q` == "Maya_Default")
        if (`hotkeySet -exists "Maya_BonusTools"`)
            hotkeySet -edit -current Maya_BonusTools; 
        else
            hotkeySet -current Maya_BonusTools; 

        
    if ($hotkeyExists == "bt_clickDragRotateNamedCommand")
        print "Shift + Ctrl + E hotkey setup for Click/Drag Rotate Tool.\n";
    else if (`hotkey -q -ctl -k "E"`)
        print "Shift + Ctrl + E hotkey is already being used.  If you\'d like use a hotkey for this tool assign one to the named command \"bt_clickDragRotateNamedCommand\".\n";       
    else if ($hotkeyExists != "bt_clickDragNamedCommand")
        {
        print "Automatically setting Shift + Ctrl + W as hotkey for Display Control HUD\n";
        nameCommand
            -annotation "Click Drag Rotate"
            -command "bt_clickSpinObj"
            bt_clickDragRotateNamedCommand;
        hotkey -k "E" -ctl -name "bt_clickDragRotateNamedCommand";
        }
}



global proc bt_clickSpinObj()
{

	//Create and enable the Spin dragger Context for interactively rotating objects
	//

	global string $bt_buildSpinContextName;
	global string $bt_currentObj;
	global string $bt_objects[];
	global string $gSelect;

    //check for hotkey setup
    bt_checkClickRotateHotkey;
    	
	$bt_objects = `ls -sl -type transform`;
	
	if (`size $bt_objects` == 0)
		{
		setToolTo $gSelect;
		warning ("No objects selected to spin");
		return;
		}


	if ( `draggerContext -exists $bt_buildSpinContextName` )
	{
		deleteUI $bt_buildSpinContextName;
	}

    $bt_buildSpinContextName  = `draggerContext  -snp 1
	        -pressCommand "rotate -r 0 0 0"  //only needed for undoing
			-dragCommand  ("undoInfo -swf 0; bt_buildSpinContextDrag(); undoInfo -swf 1")   // turn off undo first & turn on undo after
			-cursor	 "tumble"
			-space screen
			buildSpinContext`;

	// set the current tool to the Spin dragger Context
	setToolTo buildSpinContext;
	
	headsUpMessage -time 6.0 "Click drag in the viewport to spin selected object(s) around an shared center.  CTRL click to spin all around last object's center.  SHIFT click to spin each object independantly.  ";


}




