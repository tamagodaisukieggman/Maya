// ===========================================================================
// Copyright 2021 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
// international treaties.
//
//
//  Procedure Name:
//    bt_polyConvertToRingAndSplitAround
//
//  Description:
//    This procedure selects the ring surrounding the selected components and then splits the ring.
//
//  Input Arguments:
//    None
//
//  Return Value:
//    None

global proc bt_polyConvertToRingAndSplitAround(){

	// convert to verts and get contained edges
	ConvertSelectionToVertices;
	string $originalVerts[] = `getVerts`;
	ConvertSelectionToContainedEdges;
	string $originalEdges[] = `ls -sl`;

	// convert to edges to expand and to edges to grow it
	// get these edges
	ConvertSelectionToVertices;
	ConvertSelectionToEdges;
	string $expandedEdges[] = `ls -sl`;

	// check to see if there are groups of components in the selection
	// eg 2 distinct sets of verts that are separated by edges they do not 
	// contain

	// first remove original edges
	select -d $originalEdges;

	// then convert to contained faces
	// if there are any faces selected we have a problem because
	// polySplitRing will fail
	select -r `polyListComponentConversion -tf -in`;
	string $containedFaces[] = `ls -sl`;
	
	if (`size $containedFaces`){

		// get verts from the contained face
		string $containedFacesVerts[] = `getVerts`;

		// intersect string to find overlap between original verts
		// and contained face verts
		string $vertIntersector = `stringArrayIntersector`;
		string $intersectingVerts[];

		stringArrayIntersector -edit -intersect $originalVerts $vertIntersector;
		stringArrayIntersector -edit -intersect $containedFacesVerts $vertIntersector;

		$intersectingVerts = `stringArrayIntersector -query $vertIntersector`;

		// reselect the original verts
		select -r $originalVerts;

		// deselect the contained face verts
		select -d $containedFacesVerts;

		// reselect the first vert common to both sets
		select -tgl $intersectingVerts[0];

		// convert to edges to expand and to edges to grow it
		// get these edges
		ConvertSelectionToVertices;
		ConvertSelectionToEdges;
		$expandedEdges = `ls -sl`;

	} else {

		// return to the previous edge selection
		select -r $expandedEdges;

	}

	// remove original edges
	select -d $originalEdges;

	// get one of the edges from the ring
	string $edge[] = `ls -sl -head 1`;

	// split the ring if one is selected
	if (`gmatch $edge[0] "*.e*"`){

		string $buffer[];
		int $numTokens = `tokenize $edge[0] "[:]" $buffer`;

		string $cmd = "polySplitRing -re ";
		$cmd += $buffer[1];
		//$cmd += " -ab 0 -wt 0.5";
		$cmd += " -wt 0.5";

		eval ($cmd);

	} else {

		warning "Select an edge to split the ring it is a member of.";

	}

}

