string $currentShelf = `tabLayout -query -selectTab $gShelfTopLevel`;
shelfButton
	-command "//***********************************************//\n//                                               //\n//               RePARENT PRO 2.6.2              //\n//      copyright Dmitrii Kolpakov 2021          //\n//                                               //\n//***********************************************//\n\nprogressWindow -endProgress;\noptionVar -intValue animBlendingOpt 1;\nrefresh -suspend 0; ogs -reset;\ndelete_unused_nodes; delete_unused_nodes; delete_unused_nodes; delete_unused_nodes; delete_unused_nodes;\n\nif (!`pluginInfo -q -l matrixNodes`)\n{\n\tloadPlugin matrixNodes;\n}\n\nif ((`window -ex reParent_panel`)==true)\ndeleteUI reParent_panel;\n\nwindow  -toolbox 1 -t \"reParent Pro v2.6.2\" -wh 140 229 -s 0  -menuBar 1 reParent_panel;\n\nmenu   -l \"Tools\" -to 1 ToolstMenu;\nmenuItem  -l \"Key Offset +1\"  -ann \"Offset animation for selected controls\" -c offset_animation;\nmenuItem -optionBox true -command \"offset_animation_options\";\nmenuItem  -l \"select Hierarchy\"  -ann \"Select hierachy for controls\" -c reParent_select_hierarchy;\n\nmenu  -l \"Help\" -to 0 helpMenu;\nmenuItem -l \"User Manual (ENG)\"  -c reParent_manual_ENG;\nmenuItem -l \"User Manual (RUS)\"  -c reParent_manual_RUS;\nmenuItem -d 1 separetonMenu;\nmenuItem -l \"Intro\"  -c reParent_intro;\nmenuItem -l \"Tutorials\"  -c reParent_tutorial;\n\nrowColumnLayout;\nrowLayout -nc 2 -cw 140 30;\nrowColumnLayout  -nc 2 -cw 5 30;\ncheckBox -onc checkbox_pin_on - ofc checkbox_pin_off -ann \"Pin selected controls (delete all animation and constrain to locator)\" -label \" Pin \" -v 0 -h 18  PinCheckBox;\ncheckBox -onc checkbox_aim_on - ofc checkbox_aim_off -ann \"Make aim effect for selected controls\" -label \" Aim \" -v 0 -h 18  AimCheckBox;\nrowColumnLayout;\n\nsetParent..;\nsetParent..;\nsetParent..;\n\nrowColumnLayout -nc 2 -columnWidth 140 70 -columnWidth 2 70;\n\ncheckBox -onc checkbox_global_on - ofc checkbox_global_off -ann \"Make global effect for selected controls\" -label \" Global \" -v 0 -h 18  MakeGlobalCheckBox;\ncheckBox -onc checkbox_spline_on - ofc checkbox_spline_off -ann \"Make global effect for selected controls\" -label \" Spline\" -v 0 -h 18  SplineCheckBox;\nsetParent..;\n\nseparator  -h 2 -style \"none\";\n\nrowColumnLayout -nc 2 -columnWidth 140 70 -columnWidth 2 50;\ncheckBox -onc checkbox_IK_on -ofc checkbox_IK_off -ann \"rePArent three FK controls to IK mode\" -label \" IK mode \" -v 0 -h 18  IKCheckBox;\ncheckBox -onc checkbox_IK_local_on -ofc checkbox_IK_local_off  -ann \"rePArent three FK controls to IK mode with parent to the first control\" -label \" Local \" -v 0 -h 18  IKCheckLocalBox;\nsetParent..;\n\nrowLayout -nc 1 -cw 30 30 ;\nrowColumnLayout -nc 1 -columnWidth 1 130 ;\ncheckBox -onc checkbox_manual_on -ofc checkbox_manual_off -ann \"Move reParent locator to set required pivot and press Go\" -label \" Manual pivot \" -v 0 -h 18  ManualCheckBox;\nseparator  -h 2 -style \"none\";\n\ncheckBox -onc checkbox_reConstrain_on -ofc checkbox_reConstrain_off -ann \"Select controls for reParent then last control for reConstrain\" -label \" reConstrain \" -v 0 -h 18  reConstrainCheckBox;\nseparator  -h 3 -style \"none\";\n\ncheckBox -onc checkbox_collision_on -ofc checkbox_collision_off -ann \"Select collision mesh first and then controls for reParent\" -label \" Collision \" -v 0 -h 18  CollisionCheckBox;\nseparator  -h 3 -style \"none\";\n\nframeLayout -cc reParent_panel_small -ec reParent_panel_big -collapsable 1 -collapse 1 -l \"Advanced\";\ncheckBox -ann \"Each reParent locator will be baked on new animation layer\" -label \" Bake on anim layer \" -v 0 -h 18  onLayerReParentMode;\ncheckBox -ann \"Keep unbaked keys\" -label \" Keep unbaked keys \" -v 1 -h 18  KeepKeys;\ncheckBox -ann \"Save control key\" -label \" Save control keys \" -v 0 -h 18  SaveKeys;\ncheckBox -ann \" Transfer unique control attributes on reParent locator and connect it \" -label \" Transfer attributes \" -v 0 -h 18  TransferAttr;\ncheckBox -ann \"Delete all redundant keys on rePaent locators\" -label \" Delete redundant \" -v 0 -h 18  DelRed;\nsetParent..;\n\nseparator    -h 1 -style \"none\";\nbutton -l \"reParent\" -c \"reParent_starter\" -bgc .8 .8 .8 -w 140 -h 40 reParentButton;\nbutton  -l \"BAKE AND DELETE\" -ann \"Bake All animation and delete rePaent locators\" -c \"BakeAndDelete_reParentInit\" -bgc .22 .22 .22 -w 140 -h 35 DeleteButton;\n\nrowColumnLayout -rs 1 140  -nc 2 -columnWidth 1 70 -columnWidth 2 50;\nbutton -l \"Go\" -c \"go_mode_starter\" -bgc .8 .8 .8 -w 40 -h 40 ;\n\nbutton -l \"Cancel\" -c \"go_mode_cancel\" -w 60 -h 40 -bgc .22 .22 .22;\nsetParent..;\nwindow -edit -widthHeight 140 250 reParent_panel;\n\nshowWindow reParent_panel;\n\nglobal string $session_selected_controls[];\nglobal string $session_selected_locators[];\n\n///////////////////////////////////////\n//              reParent             //\n///////////////////////////////////////\nglobal proc reParent_starter()\n{\n\tint $reConstrainButton = `checkBox -q -v reConstrainCheckBox`;\n\tint $IKButton = `checkBox -q -v IKCheckBox`;\n\tint $PinButton = `checkBox -q -v PinCheckBox`;\n    int $ManualButton = `checkBox -q -v ManualCheckBox`;\n    int $AimButton = `checkBox -q -v AimCheckBox`;\n\tint $MakeGlobalButton = `checkBox -q -v MakeGlobalCheckBox`;\n\tint $CollisionlButton = `checkBox -q -v CollisionCheckBox`;\n\tint $SplineButton = `checkBox -q -v SplineCheckBox`;\n\n    string $SelectedControls[] = `ls -sl`;\n    if (!size($SelectedControls))\n    {confirmDialog -b \"Ok\" -t \"Oooops..\" -m \"Select something to make reParent\";}\n\n    else\n    {\n    \tif ($reConstrainButton+$IKButton+$AimButton>1) {confirmDialog -b \"Ok\" -t \"Oooops..\" -m \"Select one of mode\";}\n    \telse\n\t    {\n\t        int $IKButton = `checkBox -q -v IKCheckBox`;\n        \tif ($IKButton == 1)\n        \t{\n        \t    string $SelectedControls[] = `ls -sl`;\n        \t    if (size($SelectedControls)!=3)\n                {\n                    confirmDialog -b \"Ok\" -t \"Oooops..\" -m \"IK mode works only for three controls\";\n                }\n                else {IK_mode_init;}\n            }\n            if ($reConstrainButton == 0&&$IKButton == 0&&$AimButton == 0&&$IKButton == 0 &&$MakeGlobalButton==0&&$ManualButton==0&&$CollisionlButton == 0&&$SplineButton == 0) {reParent_init;}\n            if ($reConstrainButton == 0&&$IKButton == 0&&$AimButton == 0&&$IKButton == 0 &&$MakeGlobalButton==1&&$ManualButton==0&&$CollisionlButton == 0&&$SplineButton == 0) {reParent_init;}\n            if ($reConstrainButton == 0&&$IKButton == 0&&$AimButton == 0&&$IKButton == 0 &&$MakeGlobalButton==1&&$ManualButton==1&&$CollisionlButton == 0&&$SplineButton == 0) {reParent_init;}\n            if ($reConstrainButton == 0&&$IKButton == 0&&$ManualButton == 1&&$AimButton == 0&&$MakeGlobalButton==0&&$ManualButton==1&&$SplineButton == 0) {manual_mode_init;}\n            if ($reConstrainButton == 1&&$IKButton == 0&&$AimButton == 0&&$SplineButton == 0) {reConstrain_starter;}\n            if ($reConstrainButton == 0&&$IKButton == 0&&$ManualButton == 0&&$AimButton == 1&&$SplineButton == 0) {aim_mode_init;}\n            if ($CollisionlButton == 1&&$SplineButton == 0) {reParent_collision_init;}\n\n            if ($SplineButton == 1) // spline mode\n            {\n        \t    if (size($SelectedControls)<3)\n                {\n                    confirmDialog -b \"Ok\" -t \"Oooops..\" -m  \"For the spline mode to work correctly, you must select at least 3 elements\";\n                }\n                else\n                {\n                    spline_mode_init;\n                }\n            }\n        }\n    }\n\n    delete_unused_nodes;\n    cached_playback_on;\n}\n\nglobal proc reParent_init()\n{\n    cached_playback_off;\n\n    string $base_names[] = `ls -sl`;\n    string $work_names[] = define_work_names($base_names);\n\n\tint $MakeGlobalButton = `checkBox -q -v MakeGlobalCheckBox`;\n    int $ManualButton = `checkBox -q -v ManualCheckBox`;\n\tint $SaveKeys = `checkBox -query -v SaveKeys`;\n\n    if($MakeGlobalButton==1&&$ManualButton==1)\n    {reParent_panel_go_to_cancel;}\n\n    create_sets;\n\n    for ($r=0; $r<size($base_names); ++$r )\n    {\n        spaceLocator -n ($work_names[$r]+\"_reParent_locator\");\n        setAttr ($work_names[$r]+\"_reParent_locator.rotateOrder\") `getAttr ($base_names[$r]+\".rotateOrder\")`;\n\n        reParent_locator_size ($base_names[$r], ($work_names[$r]+\"_reParent_locator\"));\n        reParent_locator_shape ($work_names[$r]+\"_reParent_locator\") locator green;\n\n        addAttr -ln \"reParent_controlName\" -dt \"string\" ($work_names[$r]+\"_reParent_locator\");\n        setAttr -type \"string\" ($work_names[$r]+\"_reParent_locator.reParent_controlName\") $base_names[$r];\n\n        addAttr -ln \"reParent_Type\" -dt \"string\" ($work_names[$r]+\"_reParent_locator\");\n        setAttr -type \"string\"($work_names[$r]+\"_reParent_locator.reParent_Type\") \"Manual\";\n\n        addAttr -ln \"reParent_ControlKeys\" -dt \"string\" ($work_names[$r]+\"_reParent_locator\");\n\n        define_control_keys $base_names[$r] ($work_names[$r]+\"_reParent_locator\");\n        transfer_attributes $work_names[$r] ($work_names[$r]+\"_reParent_locator\") \"base\";\n\n        sets -edit -forceElement Last_Session_reParentLocator_set ($work_names[$r]+\"_reParent_locator\");\n        sets -edit -forceElement All_Session_reParentLocator_set ($work_names[$r]+\"_reParent_locator\");\n\n        alignObject ($base_names[$r])($work_names[$r]+\"_reParent_locator\");\n    }\n\n    select -r Last_Session_reParentLocator_set;\n    if($ManualButton==0){reParent;}\n}\n\n\nglobal proc global_mode_cancel()\n{\n    refresh -suspend 0; ogs -reset;\n\n    reParent_panel_go_to_base;\n    if(`objExists Last_Session_reParentLocator_set`)\n    {select -r Last_Session_reParentLocator_set; delete;}\n\n    if(`objExists Last_Session_reParentLocator_set`)\n    {delete Last_Session_reParentLocator_set;}\n\n    if(`objExists Last_Session_reParentControls_set`)\n    {delete Last_Session_reParentControls_set;}\n\n}\n\nglobal proc global_mode_go()\n{reParent;}\n\nglobal proc reParent()\n{\n    cached_playback_off;\n\n    float $startTime = `timerX`;\n    int $currentR =`playbackOptions -q  -min`;\n    int $currentL =`playbackOptions -q -max`;\n\n    int $PinButton = `checkBox -q -v PinCheckBox`;\n\tint $DelRedMode = `checkBox -query -v DelRed`;\n\tint $onLayerReParentMode = `checkBox -query -v onLayerReParentMode`;\n\tint $MakeGlobalButton = `checkBox -q -v MakeGlobalCheckBox`;\n\tint $SaveKeys = `checkBox -query -v SaveKeys`;\n\n    select -r Last_Session_reParentControls_set;\n    string $base_names[] = `ls -sl`;\n    string $work_names[] = define_work_names($base_names);\n\n    for ($r=0; $r<size($base_names); ++$r )\n    {\n        mxConstraint \"parentConstrain_mo\" 1 $base_names[$r] ($work_names[$r]+\"_reParent_locator\");\n    }\n\n    select -r Last_Session_reParentLocator_set;\n    BakeKeysOnLocator;\n\n    for ($r=0; $r<size($base_names); ++$r )\n    {\n        filterCurve ($work_names[$r]+\"_reParent_locator\");\n        float $curTime = `currentTime -q`;\n\n        if($SaveKeys==1)\n        {\n            currentTime -edit `findKeyframe -timeSlider -which next`;\n        }\n\n    \tif (`getAttr -keyable ($base_names[$r]+\".tx\")`==1&&`getAttr -lock ($base_names[$r]+\".tx\")`==0&&$MakeGlobalButton==0)\n    \t{\n           mxConstraint \"pointConstrain_mo\" 1 ($work_names[$r]+\"_reParent_locator\") $base_names[$r];\n    \t}\n\n    \tif (`getAttr -keyable ($base_names[$r]+\".rx\")`==1&&`getAttr -lock ($base_names[$r]+\".rx\")`==0&&\n            `getAttr -keyable ($base_names[$r]+\".ry\")`==1&&`getAttr -lock ($base_names[$r]+\".ry\")`==0&&\n            `getAttr -keyable ($base_names[$r]+\".rz\")`==1&&`getAttr -lock ($base_names[$r]+\".rz\")`==0)\n    \t{\n    \t    mxConstraint \"orientConstrain_mo\" 1 ($work_names[$r]+\"_reParent_locator\") $base_names[$r];\n        }\n\n    \tif ($MakeGlobalButton==1)\n    \t{\n    \t    select $base_names[$r] ($work_names[$r]+\"_reParent_locator\");\n           \tpointConstraint -n ($work_names[$r]+\"_pointConstraint\") -mo -weight 1;\n           \tsetAttr -lock true ($work_names[$r]+\"_reParent_locator.tx\");\n           \tsetAttr -lock true ($work_names[$r]+\"_reParent_locator.ty\");\n           \tsetAttr -lock true ($work_names[$r]+\"_reParent_locator.tz\");\n        }\n\n        if($SaveKeys==1)\n        {\n            currentTime $curTime;\n        }\n    }\n\n    if ($DelRedMode == 1)\n    {\n        select -r Last_Session_reParentLocator_set;\n    //    reParentDeleteRedundant;\n    }\n\n    // euler all anim curves\n    select -r Last_Session_reParentLocator_set;\n    filterCurve;\n    reParent_panel_go_to_base;\n    $totalTime = `timerX -startTime $startTime`;\n    print (\"Total reParent Time: \"+$totalTime+\" seconds\"+\"\\n\");\n\n    delete_unused_nodes;\n    cached_playback_on;\n}\n\n///////////////////////////////////////\n//            Manual MODE            //\n///////////////////////////////////////\nglobal proc manual_mode_init()\n{\n    cached_playback_off;\n    reParent_panel_go_to_cancel;\n\n    int $PinButton = `checkBox -q -v PinCheckBox`;\n\tint $SaveKeys = `checkBox -query -v SaveKeys`;\n\n    string $base_names[] = `ls -sl`;\n    string $work_names[] = define_work_names($base_names);\n\n    create_sets;\n\n    for ($r=0; $r<size($base_names); ++$r )\n    {\n        spaceLocator -n ($work_names[$r]+\"_reParent_locator\");\n        setAttr ($work_names[$r]+\"_reParent_locator.rotateOrder\") `getAttr ($base_names[$r]+\".rotateOrder\")`;\n\n        reParent_locator_size ($base_names[$r], ($work_names[$r]+\"_reParent_locator\"));\n        reParent_locator_shape ($work_names[$r]+\"_reParent_locator\") locator green;\n\n        addAttr -ln \"reParent_controlName\" -dt \"string\" ($work_names[$r]+\"_reParent_locator\");\n        setAttr -type \"string\" ($work_names[$r]+\"_reParent_locator.reParent_controlName\") $base_names[$r];\n\n        addAttr -ln \"reParent_Type\" -dt \"string\" ($work_names[$r]+\"_reParent_locator\");\n        setAttr -type \"string\"($work_names[$r]+\"_reParent_locator.reParent_Type\") \"Manual\";\n\n        addAttr -ln \"reParent_ControlKeys\" -dt \"string\" ($work_names[$r]+\"_reParent_locator\");\n        define_control_keys $base_names[$r] ($work_names[$r]+\"_reParent_locator\");\n        transfer_attributes $work_names[$r] ($work_names[$r]+\"_reParent_locator\") \"base\";\n\n        sets -edit -forceElement Last_Session_reParentLocator_set ($work_names[$r]+\"_reParent_locator\");\n        sets -edit -forceElement All_Session_reParentLocator_set ($work_names[$r]+\"_reParent_locator\");\n\n        alignObject $base_names[$r] ($work_names[$r]+\"_reParent_locator\");\n    }\n    select -r Last_Session_reParentLocator_set;\n}\n\nglobal proc manual_mode_cancel()\n{\n    refresh -suspend 0; ogs -reset;\n\n    reParent_panel_go_to_base;\n\n    if(`objExists Last_Session_reParentLocator_set`)\n    {select -r Last_Session_reParentLocator_set; delete;}\n\n    if(`objExists Last_Session_reParentLocator_set`)\n    {delete Last_Session_reParentLocator_set;}\n\n    if(`objExists Last_Session_reParentControls_set`)\n    {delete Last_Session_reParentControls_set;}\n}\n\nglobal proc manual_mode_go()\n{\n    int $PinButton = `checkBox -q -v PinCheckBox`;\n    int $DelRedMode = `checkBox -query -v DelRed`;\n    int $onLayerReParentMode = `checkBox -query -v onLayerReParentMode`;\n    int $SaveKeys = `checkBox -query -v SaveKeys`;\n    int $currentR =`playbackOptions -q  -min`;\n    int $currentL =`playbackOptions -q -max`;\n\n    //timer start\n    float $startTime = `timerX`;\n    string $base_names[] = `sets -q Last_Session_reParentControls_set`;\n    string $work_names[] = define_work_names($base_names);\n\n    for ($r=0; $r<size($base_names); ++$r )\n    {\n        mxConstraint \"parentConstrain_mo\" 1 $base_names[$r] ($work_names[$r]+\"_reParent_locator\");\n    }\n\n    select -r Last_Session_reParentLocator_set;\n    BakeKeysOnLocator;\n\n    for ($r=0; $r<size($base_names); ++$r )\n    {\n    \tif (`getAttr -keyable ($base_names[$r]+\".tx\")`==1&&`getAttr -lock ($base_names[$r]+\".tx\")`==0&&`getAttr -keyable ($base_names[$r]+\".rx\")`==1&&`getAttr -lock ($base_names[$r]+\".rx\")`==0)\n    \t{\n    \t   mxConstraint \"parentConstrain_mo\" 1 ($work_names[$r]+\"_reParent_locator\") $base_names[$r];\n    \t}\n    \telse\n    \t{\n        \tif (`getAttr -keyable ($base_names[$r]+\".tx\")`==1&&`getAttr -lock ($base_names[$r]+\".tx\")`==0)\n        \t{\n        \t   mxConstraint \"pointConstrain_mo\" 1 ($work_names[$r]+\"_reParent_locator\") $base_names[$r];\n        \t}\n        \tif (`getAttr -keyable ($base_names[$r]+\".rx\")`==1&&`getAttr -lock ($base_names[$r]+\".rx\")`==0)\n        \t{\n        \t   mxConstraint \"orientConstrain_mo\" 1 ($work_names[$r]+\"_reParent_locator\") $base_names[$r];\n            }\n        }\n        //cutKey -cl -t \":\" -f \":\" -at \"tx\" -at \"ty\" -at \"tz\" -at \"rx\" -at \"ry\" -at \"rz\" $base_names[$r];\n    }\n\n    if ($DelRedMode == 1)\n    {\n        select -r Last_Session_reParentLocator_set;\n        reParentDeleteRedundant;\n    }\n\n    // euler all anim curves\n    select -r Last_Session_reParentLocator_set;\n    filterCurve;\n\n    //timer stop\n    float $totalTime = `timerX -startTime $startTime`;\n    print (\"Total reParent Time: \"+$totalTime+\" seconds\"+\"\\n\");\n    reParent_panel_go_to_base;\n\n    delete_unused_nodes;\n    cached_playback_on;\n}\n\n///////////////////////////////////////\n//            SPLINE MODE            //\n///////////////////////////////////////\nglobal proc spline_mode_init()\n{\n    global string $session_selected_controls[];\n    global string $session_reParent_controls[];\n\n    int $ManualButton = `checkBox -q -v ManualCheckBox`;\n\tint $SplineButton = `checkBox -q -v SplineCheckBox`;\n\n    string $base_names[] = `ls -sl`;\n    string $work_names[] = define_work_names($base_names);\n    string $name = $work_names[size($base_names)-1];\n    string $parent[] = `listRelatives -p $base_names[0]`;\n    int $controls_amount = size($base_names);\n    $session_selected_controls = $base_names;\n    $session_reParent_controls = $work_names;\n\n    string $controls_chain = stringArrayToString($base_names, \" \");\n    create_sets;\n\n    group -em -n ($name+\"_reParent_spline_system_grp\");\n    group -n ($name+\"_reParent_spline_grp\") ($name+\"_reParent_spline_system_grp\");\n    setAttr ($name+\"_reParent_spline_system_grp.inheritsTransform\") 0;\n\n    // create locators for Joints\n    for ($i=0; $i<$controls_amount; ++$i)\n    {\n        spaceLocator -n (\"TEMP_spline_locator_\"+($i+1));\n        select -r $base_names[$i] (\"TEMP_spline_locator_\"+($i+1));\n        parentConstraint -weight 1;\n    }\n    select -cl;\n\n    // create Joints\n    for ($i=0; $i<$controls_amount; ++$i )\n    {\n        float $position[] = `xform -q -ws -t (\"TEMP_spline_locator_\"+($i+1))`;\n        joint -rad 1 -n ($name+\"_reParent_spline_joint_\"+($i+1)) -p $position[0] $position[1] $position[2];\n        setAttr ($name+\"_reParent_spline_joint_\"+($i+1)+\".drawStyle\") 2;\n\n            if ($i>0)\n            {\n                joint -e -oj yzx -sao yup ($name+\"_reParent_spline_joint_\"+$i);\n                setAttr ($name+\"_reParent_spline_joint_\"+($i+1)+\".drawStyle\") 2;\n            }\n    }\n    parent ($name+\"_reParent_spline_joint_1\") ($name+\"_reParent_spline_system_grp\");\n\n    if ($ManualButton==1)\n    {\n        // create Joints for constrain\n        for ($i=0; $i<$controls_amount; ++$i )\n        {\n            float $position[] = `xform -q -ws -t (\"TEMP_spline_locator_\"+($i+1))`;\n            joint -rad 1 -n ($name+\"_reParent_spline_joint_for_constrain_\"+($i+1)) -p $position[0] $position[1] $position[2];\n            setAttr ($name+\"_reParent_spline_joint_for_constrain_\"+($i+1)+\".displayLocalAxis\") 1;\n\n                if ($i>0)\n                {\n                    joint -e -oj yzx -sao yup ($name+\"_reParent_spline_joint_for_constrain_\"+$i);\n                    setAttr ($name+\"_reParent_spline_joint_for_constrain_\"+($i+1)+\".displayLocalAxis\") 1;\n                }\n        }\n        parent ($name+\"_reParent_spline_joint_for_constrain_1\") ($name+\"_reParent_spline_grp\");\n\n        select -hi ($name+\"_reParent_spline_joint_for_constrain_1\");\n        string $jfc[]  = `ls -sl`;\n        right_joint_orient $jfc; right_joint_orient $jfc;\n    }\n\n    float $chain_length = 0;\n    for ($i=1; $i<$controls_amount; ++$i )\n    {\n        $chain_length = $chain_length + `getAttr  ($name+\"_reParent_spline_joint_\"+($i+1)+\".translateY\")`;\n    }\n\n    float $average_length = $chain_length/$controls_amount;\n\n    for ($i=0; $i<$controls_amount; ++$i )\n    {\n        setAttr ($name+\"_reParent_spline_joint_\"+($i+1)+\".jointOrientX\") 0;\n        setAttr ($name+\"_reParent_spline_joint_\"+($i+1)+\".jointOrientY\") 0;\n        setAttr ($name+\"_reParent_spline_joint_\"+($i+1)+\".jointOrientZ\") 0;\n\n    }\n\n    xform  -t 0 0 0 ($name+\"_reParent_spline_joint_1\");\n    xform -ro 0 0 0 ($name+\"_reParent_spline_joint_1\");\n\n    delete (\"TEMP_spline_locator*\");\n\n    //create lead joint and controls\n    for ($i=0; $i<3; ++$i )\n    {\n        select -cl;\n        string $joint = `joint -p 0 0 0 -n ($name+\"_reParent_spline_lead_joint_\"+($i+1))`;\n        setAttr ($name+\"_reParent_spline_lead_joint_\"+($i+1)+\".displayLocalAxis\") 1;\n        setAttr ($name+\"_reParent_spline_lead_joint_\"+($i+1)+\".rotateOrder\") 1;\n        select -cl;\n\n        setAttr ($name+\"_reParent_spline_lead_joint_\"+($i+1)+\".translateY\") ($chain_length/2*$i);\n        setAttr ($name+\"_reParent_spline_lead_joint_\"+($i+1)+\".radius\") 3;\n\n        string $loc[] = `spaceLocator -n ($name+\"_reParent_spline_control_\"+($i+1))`;\n\n        setAttr ($name+\"_reParent_spline_control_\"+($i+1)+\"Shape.localScaleX\") $average_length;\n        setAttr ($name+\"_reParent_spline_control_\"+($i+1)+\"Shape.localScaleY\") $average_length;\n        setAttr ($name+\"_reParent_spline_control_\"+($i+1)+\"Shape.localScaleZ\") $average_length;\n\n        addAttr -ln \"reParent_Type\" -dt \"string\" $loc[0];\n        setAttr -type \"string\" ($loc[0]+\".reParent_Type\") \"Spline\";\n\n        addAttr -ln \"reParent_controls_chain\"  -dt \"string\" $loc[0];\n        setAttr -type \"string\" ($loc[0]+\".reParent_controls_chain\") $controls_chain;\n\n        addAttr -ln \"reParent_ControlKeys\"  -dt \"string\" $loc[0];\n        define_control_keys ($base_names[$i], $loc[0]);\n\n        reParent_locator_size ($loc[0], $loc[0]);\n\n        if ($i==1)\n        {\n            reParent_locator_shape ($loc[0], \"circle\", \"yellow\");\n        }\n        else\n        {\n            reParent_locator_shape ($loc[0], \"cube\", \"red\");\n        }\n\n        group -n ($loc[0]+\"_grp\") $loc[0];\n        parent ($loc[0]+\"_grp\") ($name+\"_reParent_spline_grp\");\n\n        setAttr ($loc[0]+\"_grp.ty\") ($chain_length/2*$i);\n        setAttr ($loc[0]+\".rotateOrder\") 4;\n\n        pointConstraint -mo -w 1 $loc[0] $joint ;\n        parent $joint ($name+\"_reParent_spline_system_grp\");\n\n        string $dm = `shadingNode -n ($joint+\"_dm\") -asUtility decomposeMatrix`;\n        connectAttr -force ($loc[0]+\".worldMatrix[0]\") ($dm+\".inputMatrix\");\n        connectAttr -force ($joint+\".rotateOrder\") ($dm+\".inputRotateOrder\");\n        connectAttr -f ($dm+\".outputRotate\") ($joint+\".rotate\");\n\n        sets -edit -forceElement Last_Session_reParentLocator_set $loc[0];\n        sets -edit -forceElement All_Session_reParentLocator_set $loc[0];\n    }\n\n    addAttr -ln \"Guides\" -at long  -min 0 -max 1 -dv 1 ($name+\"_reParent_spline_control_3\");\n    setAttr -e -channelBox 1 ($name+\"_reParent_spline_control_3.Guides\");\n\n    addAttr -ln \"Curve_controls\" -at long  -min 0 -max 1 -dv 0 ($name+\"_reParent_spline_control_3\");\n    setAttr -e -channelBox 1 ($name+\"_reParent_spline_control_3.Curve_controls\");\n\n    addAttr -ln \"Offset_controls\" -at long  -min 0 -max 1 -dv 1 ($name+\"_reParent_spline_control_3\");\n    setAttr -e -channelBox 1 ($name+\"_reParent_spline_control_3.Offset_controls\");\n\n    addAttr -ln \"Stretchy\" -at double -min 0 -max 1 -dv 1 ($name+\"_reParent_spline_control_3\");\n    setAttr -e -keyable true ($name+\"_reParent_spline_control_3.Stretchy\");\n\n    addAttr -ln \"Volume\" -at double -min 0 -max 1 -dv 0 ($name+\"_reParent_spline_control_3\");\n    setAttr -e -keyable true ($name+\"_reParent_spline_control_3.Volume\");\n\n    addAttr -ln \"Volume_Curvature\" -at double -min 0 -max 1 -dv 1 ($name+\"_reParent_spline_control_3\");\n    setAttr -e -keyable true ($name+\"_reParent_spline_control_3.Volume_Curvature\");\n\n    string $pac[] = `parentConstraint -mo ($name+\"_reParent_spline_control_1\") ($name+\"_reParent_spline_control_3\") ($name+\"_reParent_spline_control_2_grp\")`;\n    setAttr ($pac[0]+\".interpType\") 2;\n\n    //create ik spine curve\n    curve -n ($name+\"_reParent_spline_ikHandle_curve\") -d 3 -p 0 0 0 -p 0 ($chain_length/3) 0 -p 0 ($chain_length/1.5) 0 -p 0 $chain_length 0 -k 0 -k 0 -k 0 -k 1 -k 1 -k 1 ;\n    rebuildCurve -ch 0 -rpo 1 -rt 0 -end 1 -kr 0 -kcp 0 -kt 0 -s 2 -d 3 -tol 0.01 ($name+\"_reParent_spline_ikHandle_curve\");\n    string $curve_shape[] = `listRelatives -s ($name+\"_reParent_spline_ikHandle_curve\")`;\n    rename $curve_shape[0] ($name+\"_reParent_spline_ikHandle_curveShape\");\n\n    for ($i=0; $i<5; ++$i )\n    {\n        string $loc[] = `spaceLocator -n ($name+\"_reParent_spline_curve_point_\"+($i+1))`;\n        setAttr ($loc[0]+\"Shape.localScaleX\") ($average_length*0.5);\n        setAttr ($loc[0]+\"Shape.localScaleY\") ($average_length*0.5);\n        setAttr ($loc[0]+\"Shape.localScaleZ\") ($average_length*0.5);\n\n        if ($i==0||$i==2||$i==4)\n        {\n            setAttr -l 1 ($loc[0]+\"Shape.visibility\") 0;\n        }\n        else\n        {\n            connectAttr -f ($name+\"_reParent_spline_control_3.Curve_controls\") ($loc[0]+\".v\");\n            reParent_locator_shape ($loc[0], \"sphere\", \"red\");\n        }\n        group -n ($name+\"_reParent_spline_curve_point_\"+($i+1)+\"_grp\") $loc[0];\n        xform -t 0 ($chain_length/4*$i) 0 ($name+\"_reParent_spline_curve_point_\"+($i+1)+\"_grp\");\n        parent ($name+\"_reParent_spline_curve_point_\"+($i+1)+\"_grp\") ($name+\"_reParent_spline_system_grp\");\n\n        connectAttr -f ($name+\"_reParent_spline_curve_point_\"+($i+1)+\"Shape.worldPosition[0]\") ($name+\"_reParent_spline_ikHandle_curve.controlPoints[\"+$i+\"]\");\n    }\n\n    ikHandle -sol ikSplineSolver -n ($name+\"_reParent_spline_ikHandle\") -curve ($name+\"_reParent_spline_ikHandle_curve\") -pcv 0 -ccv 0 -sj ($name+\"_reParent_spline_joint_1\") -ee ($name+\"_reParent_spline_joint_\"+$controls_amount) ;\n    parent ($name+\"_reParent_spline_ikHandle_curve\") ($name+\"_reParent_spline_ikHandle\") ($name+\"_reParent_spline_system_grp\");\n\n    //connect curve points\n    string $buffer[];\n    string $size_string = $controls_amount/2.0;\n    int $numTokens = `tokenize $size_string \".\" $buffer`;\n\n    for ($i=0;$i<3;$i++)\n    {\n        if ($i!=0)\n        {\n            //up\n            $pac = `parentConstraint -w 1 -mo ($name+\"_reParent_spline_control_2\") ($name+\"_reParent_spline_control_3\") ($name+\"_reParent_spline_curve_point_\"+(3+$i)+\"_grp\")`;\n            setAttr ($pac[0]+\".\"+$name+\"_reParent_spline_control_2\"+\"W0\") (1-(0.5*$i));\n            setAttr ($pac[0]+\".\"+$name+\"_reParent_spline_control_3\"+\"W1\") (0.5*$i);\n\n            //down\n            $pac = `parentConstraint -w 1 -mo ($name+\"_reParent_spline_control_2\") ($name+\"_reParent_spline_control_1\") ($name+\"_reParent_spline_curve_point_\"+(3-$i)+\"_grp\")`;\n            setAttr ($pac[0]+\".\"+$name+\"_reParent_spline_control_2\"+\"W0\") (1-(0.5*$i));\n            setAttr ($pac[0]+\".\"+$name+\"_reParent_spline_control_1\"+\"W1\") (0.5*$i);\n        }\n        else\n        {\n            $pac = `parentConstraint -w 1 -mo ($name+\"_reParent_spline_control_2\") ($name+\"_reParent_spline_curve_point_3_grp\")`;\n        }\n    }\n\n    parentConstraint -w 1 -mo ($name+\"_reParent_spline_control_1\") ($name+\"_reParent_spline_curve_point_1_grp\");\n    parentConstraint -w 1 -mo ($name+\"_reParent_spline_control_3\") ($name+\"_reParent_spline_curve_point_5_grp\");\n\n    //create show cube\n    float $cube_size = `getAttr ($name+\"_reParent_spline_control_1Shape.localScaleX\")`; select -cl;\n\n    joint -p 0 0 0 -n ($name+\"_reParent_spline_lead_guides_joint_1\");\n    parent  ($name+\"_reParent_spline_lead_guides_joint_1\") ($name+\"_reParent_spline_lead_joint_1\"); select -cl;\n\n    joint -p 0 0 0 -n ($name+\"_reParent_spline_lead_guides_joint_2\");\n    parent  ($name+\"_reParent_spline_lead_guides_joint_2\") ($name+\"_reParent_spline_lead_joint_2\");\n    xform -t 0 0 0 ($name+\"_reParent_spline_lead_guides_joint_2\"); select -cl;\n\n    joint -p 0 0 0 -n ($name+\"_reParent_spline_lead_guides_joint_3\");\n    parent  ($name+\"_reParent_spline_lead_guides_joint_3\") ($name+\"_reParent_spline_lead_joint_3\");\n    xform -t 0 0 0 ($name+\"_reParent_spline_lead_guides_joint_3\"); select -cl;\n\n    curve -n ($name+\"_reParent_spline_guide_1\") -d 3 -p $cube_size $cube_size $cube_size -p $cube_size (($chain_length+$cube_size)/3) $cube_size -p $cube_size ((2*$chain_length-$cube_size)/3) $cube_size -p $cube_size ($chain_length-$cube_size) $cube_size -k 0 -k 0 -k 0 -k 1 -k 1 -k 1 ;\n    curve -n ($name+\"_reParent_spline_guide_2\") -d 3 -p (-1*$cube_size) $cube_size (1*$cube_size) -p (-1*$cube_size) (($chain_length+$cube_size)/3) (1*$cube_size) -p (-1*$cube_size) ((2*$chain_length-$cube_size)/3) (1*$cube_size) -p (-1*$cube_size) ($chain_length-$cube_size) (1*$cube_size) -k 0 -k 0 -k 0 -k 1 -k 1 -k 1 ;\n    curve -n ($name+\"_reParent_spline_guide_3\") -d 3 -p (-1*$cube_size) $cube_size (-1*$cube_size) -p (-1*$cube_size) (($chain_length+$cube_size)/3) (-1*$cube_size) -p (-1*$cube_size) ((2*$chain_length-$cube_size)/3) (-1*$cube_size) -p (-1*$cube_size) ($chain_length-$cube_size) (-1*$cube_size) -k 0 -k 0 -k 0 -k 1 -k 1 -k 1 ;\n    curve -n ($name+\"_reParent_spline_guide_4\") -d 3 -p (1*$cube_size) $cube_size (-1*$cube_size) -p (1*$cube_size) (($chain_length+$cube_size)/3) (-1*$cube_size) -p (1*$cube_size) ((2*$chain_length-$cube_size)/3) (-1*$cube_size) -p (1*$cube_size) ($chain_length-$cube_size) (-1*$cube_size) -k 0 -k 0 -k 0 -k 1 -k 1 -k 1 ;\n\n    for ($i=1;$i<5;$i++)\n    {\n        rename `listRelatives ($name+\"_reParent_spline_guide_\"+$i)` ($name+\"_reParent_spline_guide_\"+$i+\"Shape\");\n        skinCluster -n ($name+\"_reParent_spline_guide_\"+$i+\"_skinCluster\") -mi 2 -tsb ($name+\"_reParent_spline_lead_guides_joint_1\") ($name+\"_reParent_spline_lead_guides_joint_2\") ($name+\"_reParent_spline_lead_guides_joint_3\")  ($name+\"_reParent_spline_guide_\"+$i);\n        skinPercent -tv ($name+\"_reParent_spline_lead_guides_joint_1\") 1     ($name+\"_reParent_spline_guide_\"+$i+\"_skinCluster\") ($name+\"_reParent_spline_guide_\"+$i+\".cv[0]\");\n        skinPercent -tv ($name+\"_reParent_spline_lead_guides_joint_3\") 1     ($name+\"_reParent_spline_guide_\"+$i+\"_skinCluster\") ($name+\"_reParent_spline_guide_\"+$i+\".cv[3]\");\n        skinPercent -tv ($name+\"_reParent_spline_lead_guides_joint_1\") 0.333 ($name+\"_reParent_spline_guide_\"+$i+\"_skinCluster\") ($name+\"_reParent_spline_guide_\"+$i+\".cv[1]\");\n        skinPercent -tv ($name+\"_reParent_spline_lead_guides_joint_3\") 0.333 ($name+\"_reParent_spline_guide_\"+$i+\"_skinCluster\") ($name+\"_reParent_spline_guide_\"+$i+\".cv[2]\");\n        parent ($name+\"_reParent_spline_guide_\"+$i) ($name+\"_reParent_spline_system_grp\");\n\n        setAttr ($name+\"_reParent_spline_guide_\"+$i+\"Shape.overrideEnabled\") 1;\n        setAttr ($name+\"_reParent_spline_guide_\"+$i+\"Shape.overrideDisplayType\") 1;\n        displaySmoothness -divisionsU 3 -divisionsV 3 -pointsWire 16 -pointsShaded 4 -polygonObject 3 ($name+\"_reParent_spline_guide_\"+$i);\n        connectAttr -f ($name+\"_reParent_spline_control_3.Guides\") ($name+\"_reParent_spline_guide_\"+$i+\".v\");\n    }\n\n    setAttr ($name+\"_reParent_spline_guide_1Shape.overrideDisplayType\") 2;\n    setAttr ($name+\"_reParent_spline_guide_2Shape.overrideDisplayType\") 2;\n\n    connectAttr -f ($name+\"_reParent_spline_control_1.control_size\") ($name+\"_reParent_spline_lead_guides_joint_1.scaleX\");\n    connectAttr -f ($name+\"_reParent_spline_control_1.control_size\") ($name+\"_reParent_spline_lead_guides_joint_1.scaleY\");\n    connectAttr -f ($name+\"_reParent_spline_control_1.control_size\") ($name+\"_reParent_spline_lead_guides_joint_1.scaleZ\");\n\n    connectAttr -f ($name+\"_reParent_spline_control_3.control_size\") ($name+\"_reParent_spline_lead_guides_joint_3.scaleX\");\n    connectAttr -f ($name+\"_reParent_spline_control_3.control_size\") ($name+\"_reParent_spline_lead_guides_joint_3.scaleY\");\n    connectAttr -f ($name+\"_reParent_spline_control_3.control_size\") ($name+\"_reParent_spline_lead_guides_joint_3.scaleZ\");\n\n    shadingNode -n ($name+\"_reParent_spline_lead_guides_joint_2_pma\") -asUtility plusMinusAverage;\n    setAttr ($name+\"_reParent_spline_lead_guides_joint_2_pma.operation\") 3;\n    connectAttr -f ($name+\"_reParent_spline_lead_guides_joint_1.scale\") ($name+\"_reParent_spline_lead_guides_joint_2_pma.input3D[0]\");\n    connectAttr -f ($name+\"_reParent_spline_lead_guides_joint_3.scale\") ($name+\"_reParent_spline_lead_guides_joint_2_pma.input3D[1]\");\n    connectAttr -f ($name+\"_reParent_spline_lead_guides_joint_2_pma.output3D\") ($name+\"_reParent_spline_lead_guides_joint_2.scale\");\n\n    //create offset controls\n    for ($i=1;$i<$controls_amount-1;$i++)\n    {\n        float $elemenet_size[] =` xform -q -t -ws ($name+\"_reParent_spline_joint_\"+($i+1))`;\n        float $elemenet_length = $elemenet_size[1]/$chain_length;\n\n        string $loc[] = `spaceLocator -n ($name+\"_reParent_offset_\"+$i)`;\n        setAttr ($loc[0]+\".rotateOrder\") 4;\n        setAttr ($name+\"_reParent_offset_\"+$i+\"Shape.localScaleX\") ($average_length/3);\n        setAttr ($name+\"_reParent_offset_\"+$i+\"Shape.localScaleY\") ($average_length/3);\n        setAttr ($name+\"_reParent_offset_\"+$i+\"Shape.localScaleZ\") ($average_length/3);\n\n        connectAttr -f ($name+\"_reParent_spline_control_3.Offset_controls\") ($loc[0]+\".v\");\n\n        addAttr -ln \"reParent_Type\" -dt \"string\" $loc[0];\n        setAttr -type \"string\" ($loc[0]+\".reParent_Type\") \"Spline\";\n\n        addAttr -ln \"reParent_controls_chain\"  -dt \"string\"  $loc[0];\n        setAttr -type \"string\" ($loc[0]+\".reParent_controls_chain\") $controls_chain;\n\n        addAttr -ln \"reParent_ControlKeys\"  -dt \"string\" $loc[0];\n        define_control_keys ($base_names[$i], $loc[0]);\n\n        reParent_locator_size ($loc[0], $loc[0]);\n        reParent_locator_shape $loc[0] cube green;\n\n        group -n ($name+\"_reParent_offset_\"+$i+\"_grp\") $loc[0] ;\n        parent ($name+\"_reParent_offset_\"+$i+\"_grp\") ($name+\"_reParent_spline_joint_\"+($i+1));\n        xform -t 0 0 0 ($name+\"_reParent_offset_\"+$i+\"_grp\");\n\n        sets -edit -forceElement Last_Session_reParentLocator_set $loc;\n        sets -edit -forceElement All_Session_reParentLocator_set $loc;\n    }\n\n    //roll and twist\n    for ($i=1;$i<$controls_amount-1;$i++)\n    {\n        shadingNode -n ($name+\"_reParent_spline_control_twist_pma_\"+$i) -asUtility plusMinusAverage;\n        connectAttr -f ($name+\"_reParent_spline_control_twist_pma_\"+$i+\".output1D\") ($name+\"_reParent_offset_\"+$i+\"_grp.rotateY\");\n\n        shadingNode -n ($name+\"_reParent_spline_control_twist_up_md_\"+$i) -asUtility multiplyDivide;\n        setAttr ($name+\"_reParent_spline_control_twist_up_md_\"+$i+\".input2X\") (1-(1.0/($controls_amount-1)*$i));\n\n        connectAttr -f ($name+\"_reParent_spline_lead_joint_1.rotateY\") ($name+\"_reParent_spline_control_twist_up_md_\"+$i+\".input1X\");\n        connectAttr -f ($name+\"_reParent_spline_control_twist_up_md_\"+$i+\".outputX\") ($name+\"_reParent_spline_control_twist_pma_\"+$i+\".input1D[0]\");\n\n        shadingNode -n ($name+\"_reParent_spline_control_twist_down_md_\"+$i) -asUtility multiplyDivide;\n        setAttr ($name+\"_reParent_spline_control_twist_down_md_\"+$i+\".input2X\") ((1.0/($controls_amount-1)*$i));\n\n        connectAttr -f ($name+\"_reParent_spline_lead_joint_3.rotateY\") ($name+\"_reParent_spline_control_twist_down_md_\"+$i+\".input1X\");\n        connectAttr -f ($name+\"_reParent_spline_control_twist_down_md_\"+$i+\".outputX\") ($name+\"_reParent_spline_control_twist_pma_\"+$i+\".input1D[1]\");\n    }\n\n    $size_string = $controls_amount/2.0;\n    $numTokens = `tokenize $size_string \".\" $buffer`;\n\n    if  ($numTokens==1)\n    {\n        for ($i=($controls_amount/2);$i<$controls_amount-1;$i++)\n        {\n            shadingNode -n ($name+\"_reParent_spline_control_twist_middle_md_\"+$i) -asUtility multiplyDivide;\n            connectAttr -f ($name+\"_reParent_spline_control_2.rotateY\") ($name+\"_reParent_spline_control_twist_middle_md_\"+$i+\".input1X\");\n            connectAttr -f ($name+\"_reParent_spline_control_twist_middle_md_\"+$i+\".outputX\") ($name+\"_reParent_spline_control_twist_pma_\"+$i+\".input1D[2]\");\n            connectAttr -f ($name+\"_reParent_spline_control_twist_middle_md_\"+$i+\".outputX\") ($name+\"_reParent_spline_control_twist_pma_\"+($i-(($i-($controls_amount/2)+1)*2-1))+\".input1D[2]\");\n            setAttr ($name+\"_reParent_spline_control_twist_middle_md_\"+$i+\".input2X\") (1-(1.0/($controls_amount/2))*($i-($controls_amount/2)+1));\n        }\n    }\n    else\n    {\n        for ($i=(($controls_amount/2)+1);$i<$controls_amount-1;$i++)\n        {\n\n            shadingNode -n ($name+\"_reParent_spline_control_twist_middle_md_\"+$i) -asUtility multiplyDivide;\n            connectAttr -f ($name+\"_reParent_spline_control_2.rotateY\") ($name+\"_reParent_spline_control_twist_middle_md_\"+$i+\".input1X\");\n            connectAttr -f ($name+\"_reParent_spline_control_twist_middle_md_\"+$i+\".outputX\") ($name+\"_reParent_spline_control_twist_pma_\"+$i+\".input1D[2]\");\n            connectAttr -f ($name+\"_reParent_spline_control_twist_middle_md_\"+$i+\".outputX\") ($name+\"_reParent_spline_control_twist_pma_\"+($i-(($i-($controls_amount/2)+1)*2-2))+\".input1D[2]\");\n            setAttr ($name+\"_reParent_spline_control_twist_middle_md_\"+$i+\".input2X\") (1-(1.0/($controls_amount/2))*($i-($controls_amount/2)));\n        }\n\n        connectAttr -f ($name+\"_reParent_spline_control_2.rotateY\") ($name+\"_reParent_spline_control_twist_pma_\"+(($controls_amount-1)/2.0)+\".input1D[2]\");\n    }\n\n    //stretchable\n    shadingNode -n ($name+\"_reParent_spline_control_stretch_ci\") -asUtility curveInfo;\n    connectAttr -f ($name+\"_reParent_spline_ikHandle_curveShape.worldSpace[0]\") ($name+\"_reParent_spline_control_stretch_ci.inputCurve\");\n\n    shadingNode -n ($name+\"_reParent_spline_control_stretch_md\") -asUtility multiplyDivide;\n    setAttr ($name+\"_reParent_spline_control_stretch_md.operation\") 2;\n    connectAttr -f ($name+\"_reParent_spline_control_stretch_ci.arcLength\") ($name+\"_reParent_spline_control_stretch_md.input1X\");\n    setAttr ($name+\"_reParent_spline_control_stretch_md.input2X\") `getAttr ($name+\"_reParent_spline_control_stretch_ci.arcLength\")`;\n\n    if ($controls_amount==3)\n    {\n        for ($i=1; $i<$controls_amount; ++$i )\n        {\n            shadingNode -n ($name+\"_reParent_spline_control_stretch_mult_\"+$i) -asUtility multiplyDivide;\n            setAttr ($name+\"_reParent_spline_control_stretch_mult_\"+$i+\".input1X\") ($chain_length/($controls_amount-1.0));\n            connectAttr -f ($name+\"_reParent_spline_control_stretch_md.outputX\") ($name+\"_reParent_spline_control_stretch_mult_\"+$i+\".input2X\");\n\n            shadingNode -n ($name+\"_reParent_spline_control_stretch_rv_\"+$i) -asUtility remapValue;\n            setAttr ($name+\"_reParent_spline_control_stretch_rv_\"+$i+\".outputMin\") ($chain_length/($controls_amount-1.0));\n            connectAttr -f ($name+\"_reParent_spline_control_stretch_mult_\"+$i+\".outputX\") ($name+\"_reParent_spline_control_stretch_rv_\"+$i+\".outputMax\");\n            connectAttr -f ($name+\"_reParent_spline_control_3.Stretchy\") ($name+\"_reParent_spline_control_stretch_rv_\"+$i+\".inputValue\");\n\n            connectAttr -f ($name+\"_reParent_spline_control_stretch_rv_\"+$i+\".outValue\") ($name+\"_reParent_spline_joint_\"+$i+\".translateY\");\n        }\n    }\n    else\n    {\n        for ($i=1; $i<$controls_amount+1; ++$i )\n        {\n            shadingNode -n ($name+\"_reParent_spline_control_stretch_mult_\"+$i) -asUtility multiplyDivide;\n            setAttr ($name+\"_reParent_spline_control_stretch_mult_\"+$i+\".input1X\") ($chain_length/($controls_amount-1.0));\n            connectAttr -f ($name+\"_reParent_spline_control_stretch_md.outputX\") ($name+\"_reParent_spline_control_stretch_mult_\"+$i+\".input2X\");\n\n            shadingNode -n ($name+\"_reParent_spline_control_stretch_rv_\"+$i) -asUtility remapValue;\n            setAttr ($name+\"_reParent_spline_control_stretch_rv_\"+$i+\".outputMin\") ($chain_length/($controls_amount-1.0));\n            connectAttr -f ($name+\"_reParent_spline_control_stretch_mult_\"+$i+\".outputX\") ($name+\"_reParent_spline_control_stretch_rv_\"+$i+\".outputMax\");\n            connectAttr -f ($name+\"_reParent_spline_control_3.Stretchy\") ($name+\"_reParent_spline_control_stretch_rv_\"+$i+\".inputValue\");\n\n            connectAttr -f ($name+\"_reParent_spline_control_stretch_rv_\"+$i+\".outValue\") ($name+\"_reParent_spline_joint_\"+$i+\".translateY\");\n        }\n    }\n\n\n    //volume\n    shadingNode -n ($name+\"_reParent_spline_control_volume_mult\") -asUtility multiplyDivide;\n    setAttr ($name+\"_reParent_spline_control_volume_mult.input1X\") 1;\n    setAttr ($name+\"_reParent_spline_control_volume_mult.input1Y\") 1;\n    setAttr ($name+\"_reParent_spline_control_volume_mult.operation\") 2;\n    connectAttr -f ($name+\"_reParent_spline_control_stretch_md.outputX\") ($name+\"_reParent_spline_control_volume_mult.input2X\");\n\n    shadingNode -n ($name+\"_reParent_spline_control_volume_blend\") -asUtility blendTwoAttr;\n    connectAttr -f ($name+\"_reParent_spline_control_3.Volume\") ($name+\"_reParent_spline_control_volume_blend.attributesBlender\");\n    connectAttr -f ($name+\"_reParent_spline_control_volume_mult.outputX\") ($name+\"_reParent_spline_control_volume_blend.input[1]\");\n    connectAttr -f ($name+\"_reParent_spline_control_volume_mult.outputY\") ($name+\"_reParent_spline_control_volume_blend.input[0]\");\n\n    shadingNode -n ($name+\"_reParent_spline_control_volume_stretch_pow_mult\") -asUtility multiplyDivide;\n    connectAttr -f ($name+\"_reParent_spline_control_volume_blend.output\") ($name+\"_reParent_spline_control_volume_stretch_pow_mult.input1X\");\n    setAttr ($name+\"_reParent_spline_control_volume_stretch_pow_mult.operation\") 3;\n    setAttr ($name+\"_reParent_spline_control_volume_stretch_pow_mult.input2X\") 4;\n\n    if  ($numTokens==1)\n    {\n        for ($i=($controls_amount/2);$i<$controls_amount-1;$i++)\n        {\n            shadingNode -n ($name+\"_reParent_spline_control_volume_growth_blend_\"+$i) -asUtility blendTwoAttr;\n            setAttr ($name+\"_reParent_spline_control_volume_growth_blend_\"+$i+\".attributesBlender\") (1-(1.0/($controls_amount/2))*($i-($controls_amount/2)+1));\n            connectAttr -f ($name+\"_reParent_spline_control_volume_mult.outputY\") ($name+\"_reParent_spline_control_volume_growth_blend_\"+$i+\".input[0]\");\n            connectAttr -f ($name+\"_reParent_spline_control_volume_stretch_pow_mult.outputX\") ($name+\"_reParent_spline_control_volume_growth_blend_\"+$i+\".input[1]\");\n\n            shadingNode -n ($name+\"_reParent_spline_control_volume_curvature_blend_\"+$i) -asUtility blendTwoAttr;\n            connectAttr -f ($name+\"_reParent_spline_control_3.Volume_Curvature\") ($name+\"_reParent_spline_control_volume_curvature_blend_\"+$i+\".attributesBlender\");\n            connectAttr -f ($name+\"_reParent_spline_control_volume_stretch_pow_mult.outputX\") ($name+\"_reParent_spline_control_volume_curvature_blend_\"+$i+\".input[0]\");\n            connectAttr -f ($name+\"_reParent_spline_control_volume_growth_blend_\"+$i+\".output\") ($name+\"_reParent_spline_control_volume_curvature_blend_\"+$i+\".input[1]\");\n\n            shadingNode -n ($name+\"_reParent_spline_control_volume_stretchy_blend_\"+$i) -asUtility blendTwoAttr;\n            connectAttr -f ($name+\"_reParent_spline_control_3.Stretchy\") ($name+\"_reParent_spline_control_volume_stretchy_blend_\"+$i+\".attributesBlender\");\n            connectAttr -f ($name+\"_reParent_spline_control_volume_mult.outputY\") ($name+\"_reParent_spline_control_volume_stretchy_blend_\"+$i+\".input[0]\");\n            connectAttr -f ($name+\"_reParent_spline_control_volume_curvature_blend_\"+$i+\".output\") ($name+\"_reParent_spline_control_volume_stretchy_blend_\"+$i+\".input[1]\");\n\n            connectAttr -f ($name+\"_reParent_spline_control_volume_stretchy_blend_\"+$i+\".output\") ($name+\"_reParent_offset_\"+$i+\"_grp.sx\");\n            connectAttr -f ($name+\"_reParent_spline_control_volume_stretchy_blend_\"+$i+\".output\") ($name+\"_reParent_offset_\"+$i+\"_grp.sz\");\n\n            connectAttr -f ($name+\"_reParent_spline_control_volume_stretchy_blend_\"+$i+\".output\") ($name+\"_reParent_offset_\"+($i-(($i-($controls_amount/2)+1)*2-1))+\"_grp.sx\");\n            connectAttr -f ($name+\"_reParent_spline_control_volume_stretchy_blend_\"+$i+\".output\") ($name+\"_reParent_offset_\"+($i-(($i-($controls_amount/2)+1)*2-1))+\"_grp.sz\");\n        }\n    }\n    else\n    {\n        for ($i=(($controls_amount/2)+1);$i<$controls_amount-1;$i++)\n        {\n            shadingNode -n ($name+\"_reParent_spline_control_volume_growth_blend_\"+$i) -asUtility blendTwoAttr;\n            setAttr ($name+\"_reParent_spline_control_volume_growth_blend_\"+$i+\".attributesBlender\") (1-(1.0/($controls_amount/2))*($i-($controls_amount/2)+1));\n            connectAttr -f ($name+\"_reParent_spline_control_volume_mult.outputY\") ($name+\"_reParent_spline_control_volume_growth_blend_\"+$i+\".input[0]\");\n            connectAttr -f ($name+\"_reParent_spline_control_volume_stretch_pow_mult.outputX\") ($name+\"_reParent_spline_control_volume_growth_blend_\"+$i+\".input[1]\");\n\n            shadingNode -n ($name+\"_reParent_spline_control_volume_curvature_blend_\"+$i) -asUtility blendTwoAttr;\n            connectAttr -f ($name+\"_reParent_spline_control_3.Volume_Curvature\") ($name+\"_reParent_spline_control_volume_curvature_blend_\"+$i+\".attributesBlender\");\n            connectAttr -f ($name+\"_reParent_spline_control_volume_stretch_pow_mult.outputX\") ($name+\"_reParent_spline_control_volume_curvature_blend_\"+$i+\".input[0]\");\n            connectAttr -f ($name+\"_reParent_spline_control_volume_growth_blend_\"+$i+\".output\") ($name+\"_reParent_spline_control_volume_curvature_blend_\"+$i+\".input[1]\");\n\n            shadingNode -n ($name+\"_reParent_spline_control_volume_stretchy_blend_\"+$i) -asUtility blendTwoAttr;\n            connectAttr -f ($name+\"_reParent_spline_control_3.Stretchy\") ($name+\"_reParent_spline_control_volume_stretchy_blend_\"+$i+\".attributesBlender\");\n            connectAttr -f ($name+\"_reParent_spline_control_volume_mult.outputY\") ($name+\"_reParent_spline_control_volume_stretchy_blend_\"+$i+\".input[0]\");\n            connectAttr -f ($name+\"_reParent_spline_control_volume_curvature_blend_\"+$i+\".output\") ($name+\"_reParent_spline_control_volume_stretchy_blend_\"+$i+\".input[1]\");\n\n            connectAttr -f ($name+\"_reParent_spline_control_volume_curvature_blend_\"+$i+\".output\") ($name+\"_reParent_offset_\"+$i+\"_grp.sx\");\n            connectAttr -f ($name+\"_reParent_spline_control_volume_curvature_blend_\"+$i+\".output\") ($name+\"_reParent_offset_\"+$i+\"_grp.sz\");\n\n            connectAttr -f ($name+\"_reParent_spline_control_volume_curvature_blend_\"+$i+\".output\") ($name+\"_reParent_offset_\"+($i-(($i-($controls_amount/2)+1)*2-2))+\"_grp.sx\");\n            connectAttr -f ($name+\"_reParent_spline_control_volume_curvature_blend_\"+$i+\".output\") ($name+\"_reParent_offset_\"+($i-(($i-($controls_amount/2)+1)*2-2))+\"_grp.sz\");\n        }\n    }\n\n    //align controls\n    if($ManualButton==1)\n    {\n        alignObject ($name+\"_reParent_spline_joint_for_constrain_1\") ($name+\"_reParent_spline_control_1\");\n        alignObject ($name+\"_reParent_spline_joint_for_constrain_\"+$controls_amount) ($name+\"_reParent_spline_control_3\");\n        delete ($name+\"_reParent_spline_joint_for_constrain_1\");\n    }\n    else\n    {\n        alignObject $base_names[0] ($name+\"_reParent_spline_control_1\");\n        alignObject $base_names[size($base_names)-1] ($name+\"_reParent_spline_control_3\");\n    }\n\n    //hide all\n    string $hidden_list[] = { ($name+\"_reParent_spline_ikHandle\"), ($name+\"_reParent_spline_ikHandle_curve\"), ($name+\"_reParent_spline_lead_joint_1\"), ($name+\"_reParent_spline_lead_joint_2\"), ($name+\"_reParent_spline_lead_joint_3\")};\n    for($sel in $hidden_list)\n    {\n        setAttr -l 1 ($sel+\".visibility\") 0;\n    }\n\n    if($SplineButton==1&&$ManualButton==1)\n    {\n        select -r Last_Session_reParentLocator_set;\n        reParent_panel_go_to_cancel;\n    }\n    else\n    {\n        spline_mode_go;\n    }\n}\n\nglobal proc spline_mode_cancel()\n{\n    global string $session_reParent_controls[];\n\n    refresh -suspend 0; ogs -reset;\n\n    reParent_panel_go_to_base;\n    cached_playback_on;\n\n    if(`objExists Last_Session_reParentLocator_set`)\n    {select -r Last_Session_reParentLocator_set; delete;}\n\n    if(`objExists Last_Session_reParentLocator_set`)\n    {delete Last_Session_reParentLocator_set;}\n\n    if(`objExists Last_Session_reParentControls_set`)\n    {delete Last_Session_reParentControls_set;}\n\n    if(`objExists Last_Session_reParentControls_set`)\n    {delete ($session_reParent_controls[size($session_reParent_controls)]+\"_reParent_spline_grp\");}\n}\n\nglobal proc spline_mode_go()\n{\n    reParent_panel_go_to_base;\n\n    int $ManualButton = `checkBox -q -v ManualCheckBox`;\n\n    global string $session_selected_controls[];\n    global string $session_reParent_controls[];\n\n    string $base_names[] = $session_selected_controls;\n    string $work_names[] = define_work_names($base_names);\n\n    string $name = $work_names[size($base_names)-1];\n    string $parent[] = `listRelatives -p $base_names[0]`;\n    int $controls_amount = size($base_names);\n\n    string $buffer[];\n\n    //constrain spline system to rig\n    mxConstraint \"parentConstrain_mo\" 1 $base_names[0] ($name+\"_reParent_spline_control_1\");\n    mxConstraint \"parentConstrain_mo\" 1 $base_names[size($base_names)-1] ($name+\"_reParent_spline_control_3\");\n\n    string $size_string = $controls_amount/2.0;\n    int $numTokens = `tokenize $size_string \".\" $buffer`;\n\n    if($ManualButton==0)\n    {\n        if  ($numTokens==1)\n        {\n            pointConstraint -w 1 ($base_names[($controls_amount-1)/2]) ($base_names[($controls_amount-1)/2+1]) ($name+\"_reParent_spline_control_2\");\n        }\n        else\n        {\n            mxConstraint \"pointtConstrain_mo\" 1 $base_names[size($base_names)/2] ($name+\"_reParent_spline_control_2\");\n        }\n\n    }\n    else\n    {\n        if  ($numTokens==1)\n        {\n            pointConstraint -w 1 -mo ($base_names[($controls_amount-1)/2]) ($base_names[($controls_amount-1)/2+1]) ($name+\"_reParent_spline_control_2\");\n        }\n        else\n        {\n            mxConstraint \"pointConstrain_mo\" 1 $base_names[size($base_names)/2] ($name+\"_reParent_spline_control_2\");\n        }\n    }\n\n    for ($i=1;$i<size($base_names)-1;$i++)\n    {\n        mxConstraint \"parentConstrain_mo\" 1 $base_names[$i] ($name+\"_reParent_offset_\"+$i) ;\n    }\n\n    select -r Last_Session_reParentLocator_set ;\n    BakeKeysOnLocator;\n\n    //constrain controls to reParent locators\n    string $poc[] = `pointConstraint -w 1 -mo ($name+\"_reParent_spline_joint_\"+$controls_amount) ($name+\"_reParent_spline_control_3\")  $base_names[(size($base_names)-1)]`;\n\n    shadingNode -n ($name+\"_stretchy_fix_posiion_rv\") -asUtility remapValue;\n    setAttr ($name+\"_stretchy_fix_posiion_rv.inputMin\") 0.7;\n    connectAttr -f ($name+\"_reParent_spline_control_3.Stretchy\") ($name+\"_stretchy_fix_posiion_rv.inputValue\");\n    connectAttr -f ($name+\"_stretchy_fix_posiion_rv.outValue\") ($poc[0]+\".\"+$name+\"_reParent_spline_control_3W1\");\n    shadingNode -n ($name+\"_stretchy_fix_posiion_rev\") -asUtility reverse;\n    connectAttr -f ($name+\"_stretchy_fix_posiion_rv.outValue\") ($name+\"_stretchy_fix_posiion_rev.inputX\");\n    connectAttr -f ($name+\"_stretchy_fix_posiion_rev.outputX\") ($poc[0]+\".\"+$name+\"_reParent_spline_joint_\"+(size($base_names))+\"W0\");\n\n    mxConstraint \"orientConstrain_mo\" 1 ($name+\"_reParent_spline_control_3\") $base_names[(size($base_names)-1)];\n    mxConstraint \"scaleConstrain_mo\" 1 ($name+\"_reParent_spline_control_3\") $base_names[(size($base_names)-1)];\n\n    mxConstraint \"parentConstrain_mo\" 1 ($name+\"_reParent_spline_control_1\") $base_names[0];\n    mxConstraint \"scaleConstrain_mo\" 1 ($name+\"_reParent_spline_control_1\") $base_names[0];\n\n    for ($i=1;$i<size($base_names)-1;$i++)\n    {\n        mxConstraint \"parentConstrain_mo\" 1 ($name+\"_reParent_offset_\"+$i) $base_names[$i];\n        mxConstraint \"scaleConstrain_mo\" 1 ($name+\"_reParent_offset_\"+$i) $base_names[$i];\n    }\n\n    delete_unused_nodes;\n    select -r Last_Session_reParentLocator_set;\n}\n\n///////////////////////////////////////\n//              AIM MODE             //\n///////////////////////////////////////\nglobal proc aim_mode_init()\n{\n    global string $session_selected_locators[];\n    clear $session_selected_locators;\n\n    cached_playback_off;\n    reParent_panel_go_to_cancel;\n\n    int $PinButton = `checkBox -q -v PinCheckBox`;\n\tint $SaveKeys = `checkBox -query -v SaveKeys`;\n\n    string $base_names[] = `ls -sl`;\n    string $work_names[] = define_work_names($base_names);\n\n    create_sets;\n\n    for ($r=0; $r<size($base_names); ++$r )\n    {\n        spaceLocator -n ($work_names[$r]+\"_reParent_locator\");\n        setAttr ($work_names[$r]+\"_reParent_locator.rotateOrder\") 4;\n\n        alignObject ($base_names[$r], ($work_names[$r]+\"_reParent_locator\"));\n        reParent_locator_size ($base_names[$r], ($work_names[$r]+\"_reParent_locator\"));\n        reParent_locator_shape ($work_names[$r]+\"_reParent_locator\") locator green;\n\n        addAttr -ln \"reParent_controlName\" -dt \"string\" ($work_names[$r]+\"_reParent_locator\");\n        setAttr -type \"string\" ($work_names[$r]+\"_reParent_locator.reParent_controlName\") $base_names[$r];\n\n        addAttr -ln \"reParent_Type\" -dt \"string\" ($work_names[$r]+\"_reParent_locator\");\n        setAttr -type \"string\"($work_names[$r]+\"_reParent_locator.reParent_Type\") \"Aim\";\n\n        addAttr -ln \"reParent_ControlKeys\" -dt \"string\" ($work_names[$r]+\"_reParent_locator\");\n        define_control_keys $base_names[$r] ($work_names[$r]+\"_reParent_locator\");\n\n        sets -edit -forceElement Aim_Session_reParentLocator_set ($work_names[$r]+\"_reParent_locator\");\n\n        stringArrayInsertAtIndex(10000, $session_selected_locators, ($work_names[$r]+\"_reParent_locator\"));\n    }\n\n    select -r Aim_Session_reParentLocator_set;\n}\n\nglobal proc aim_mode_cancel()\n{\n    refresh -suspend 0; ogs -reset;\n\n    reParent_panel_go_to_base;\n    cached_playback_on;\n\n    if(`objExists Last_Session_reParentLocator_set`)\n    {select -r Last_Session_reParentLocator_set; delete;}\n\n    if(`objExists Last_Session_reParentLocator_set`)\n    {delete Last_Session_reParentLocator_set;}\n\n    if(`objExists Last_Session_reParentControls_set`)\n    {delete Last_Session_reParentControls_set;}\n\n    if(`objExists Aim_Session_reParentLocator_set`)\n    {select -r Aim_Session_reParentLocator_set; delete; }\n\n    if(`objExists Aim_Session_group_name`)\n    {select -r Aim_Session_group_name; delete; }\n\n    if(`objExists Aim_Session_reParentLocator_set`)\n    {delete Aim_Session_reParentLocator_set;}\n}\n\nglobal proc aim_mode_go()\n{\n    global string $session_selected_locators[];\n\n    //timer start\n    float $startTime = `timerX`;\n\n    cached_playback_off;\n\n    int $PinButton = `checkBox -q -v PinCheckBox`;\n\tint $DelRedMode = `checkBox -query -v DelRed`;\n\tint $SaveKeys = `checkBox -query -v SaveKeys`;\n    int $onLayerReParentMode = `checkBox -query -v onLayerReParentMode`;\n\n    int $currentR =`playbackOptions -q  -min`;\n    int $currentL =`playbackOptions -q -max`;\n\n    string $base_names[] = `sets -q Last_Session_reParentControls_set`;\n    string $work_names[] = define_work_names($base_names);\n\n    for ($r=0; $r<size($base_names); ++$r )\n    {\n        group -em -n ($work_names[$r]+\"_reParent_aim_grp\");\n        setAttr ($work_names[$r]+\"_reParent_aim_grp.rotateOrder\") 4;\n        alignObject ($base_names[$r], ($work_names[$r]+\"_reParent_aim_grp\"));\n\n        addAttr -ln \"reParent_ControlKeys\"  -dt \"string\"  ($work_names[$r]+\"_reParent_aim_grp\");\n        setAttr -type \"string\" ($work_names[$r]+\"_reParent_aim_grp.reParent_ControlKeys\") (`getAttr ($work_names[$r]+\"_reParent_locator.reParent_ControlKeys\")`);\n\n        spaceLocator -n ($work_names[$r]+\"_base_reParent_locator\");\n        setAttr ($work_names[$r]+\"_base_reParent_locator.rotateOrder\") 4;\n        setAttr -l 1 ($work_names[$r]+\"_base_reParent_locator.visibility\") 0;\n\n        alignObject ($base_names[$r], ($work_names[$r]+\"_base_reParent_locator\"));\n\n        parent ($work_names[$r]+\"_base_reParent_locator\") ($work_names[$r]+\"_reParent_aim_grp\");\n\n        aimConstraint -n ($work_names[$r]+\"_temp_ac\") -weight 1 -aimVector 0 -1 0 -upVector 1 0 0 -worldUpType \"object\" -worldUpObject ($work_names[$r]+\"_base_reParent_locator\") ($work_names[$r]+\"_base_reParent_locator\") ($work_names[$r]+\"_reParent_locator\");\n        delete ($work_names[$r]+\"_temp_ac\");\n\n        aimConstraint -n ($work_names[$r]+\"_temp_ac\") -weight 1 -aimVector 0 1 0 -upVector 1 0 0 -worldUpType \"object\" -worldUpObject ($work_names[$r]+\"_reParent_locator\") ($work_names[$r]+\"_reParent_locator\") ($work_names[$r]+\"_reParent_aim_grp\");\n        delete ($work_names[$r]+\"_temp_ac\");\n\n        mxConstraint \"parentConstrain_mo\" 1 $base_names[$r] ($work_names[$r]+\"_reParent_locator\");\n        mxConstraint \"parentConstrain_mo\" 1 $base_names[$r] ($work_names[$r]+\"_reParent_aim_grp\");\n\n        setAttr ($work_names[$r]+\"_reParent_aim_grp.it\") 0;\n        setAttr ($work_names[$r]+\"_reParent_aim_grp.hiddenInOutliner\") 1;\n        setAttr ($work_names[$r]+\"_reParent_locator.it\") 0;\n        parent ($work_names[$r]+\"_reParent_aim_grp\") ($work_names[$r]+\"_reParent_locator\");\n\n\n        sets -edit -forceElement Aim_Session_group_name ($work_names[$r]+\"_reParent_aim_grp\");\n    }\n\n    select -r Aim_Session_reParentLocator_set Aim_Session_group_name;\n    BakeKeysOnLocator;\n\n    for ($r=0; $r<size($base_names); ++$r )\n    {\n        pointConstraint -n ($work_names[$r]+\"_base_pointConstraint\") -mo -weight 1 $base_names[$r] ($work_names[$r]+\"_base_reParent_locator\");\n        aimConstraint -n ($work_names[$r]+\"_base_aimConstraint\") -weight 1 -aimVector 0 1 0 -upVector 1 0 0 -worldUpType \"object\" -worldUpObject ($work_names[$r]+\"_reParent_locator\" ) ($work_names[$r]+\"_reParent_locator\") ($work_names[$r]+\"_base_reParent_locator\");\n\n        connectAttr -f ($work_names[$r]+\"_reParent_locator.rotateY\") ($work_names[$r]+\"_reParent_aim_grp.rotateY\");\n\n        if (check_locked_attr ($base_names[$r], {\"rotateX\", \"rotateY\", \"rotateZ\"})==0)\n    \t{\n            mxConstraint \"orientConstrain_mo\" 1 ($work_names[$r]+\"_base_reParent_locator\") $base_names[$r];\n        }\n\n        aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 -1 0 -upVector 0 0 1 -worldUpType \"vector\" -worldUpVector 0 1 0 -skip y $base_names[$r] ($work_names[$r]+\"_reParent_locator\");\n\n        setAttr -lock true -keyable false -channelBox false ($work_names[$r]+\"_reParent_locator.rx\");\n        setAttr -lock true -keyable false -channelBox false ($work_names[$r]+\"_reParent_locator.rz\");\n        setAttr -lock true -keyable false -channelBox false ($work_names[$r]+\"_reParent_locator.sx\");\n        setAttr -lock true -keyable false -channelBox false ($work_names[$r]+\"_reParent_locator.sy\");\n        setAttr -lock true -keyable false -channelBox false ($work_names[$r]+\"_reParent_locator.sz\");\n        setAttr -lock true -keyable false -channelBox false ($work_names[$r]+\"_reParent_locator.v\");\n\n        sets -edit -forceElement Last_Session_reParentLocator_set ($work_names[$r]+\"_reParent_locator\");\n        sets -edit -forceElement All_Session_reParentLocator_set ($work_names[$r]+\"_reParent_locator\");\n        sets -edit -forceElement Aim_Session_group_name ($work_names[$r]+\"_reParent_aim_grp\");\n    }\n\n    select -r $base_names Last_Session_reParentLocator_set;\n    filterCurve;\n    select -r Last_Session_reParentLocator_set;\n    filterCurve;\n\n    select -r $session_selected_locators;\n\n    //timer stop\n    float $totalTime = `timerX -startTime $startTime`;\n    print (\"Total reParent Time: \"+$totalTime+\" seconds\"+\"\\n\");\n\n    reParent_panel_go_to_base;\n\n    delete_unused_nodes;\n    delete Aim_Session_group_name Aim_Session_reParentLocator_set;\n    cached_playback_on;\n}\n\n///////////////////////////////////////\n//            reConstrain            //\n///////////////////////////////////////\nglobal proc reConstrain_starter()\n{\n    string $SelectedControls[] = `ls -sl`;\n    int $amountCheck = `size($SelectedControls)`;\n    if ($amountCheck>1){reConstrain_init;}\n    else {confirmDialog -b \"Ok\" -t \"Oooops..\" -m \" FOR reConstrain MODE YOU NEED TO SELECT 2 AND MORE CONTROLS\";}\n}\n\nglobal proc reConstrain_init()\n{\n    cached_playback_off;\n\n    int $reConstrainButton = `checkBox -q -v reConstrainCheckBox`;\n    int $ManualButton = `checkBox -q -v ManualCheckBox`;\n    int $PinButton = `checkBox -q -v PinCheckBox`;\n\tint $SaveKeys = `checkBox -query -v SaveKeys`;\n\n    string $base_names[] = `ls -sl`;\n    string $work_names[] = define_work_names($base_names);\n    select -d $base_names[0];\n\n    create_sets;\n\n    if(`objExists \"reConstrain_reParentControls_set\"`)\n    {delete reConstrain_reParentControls_set;}\n\n\tsets -name \"reConstrain_reParentControls_set\" $base_names[0];\n\tsets -edit -fe  reParent_sets reConstrain_reParentControls_set ;\n\n    for ($r=1; $r<size($base_names); ++$r )\n    {\n        spaceLocator -n ($work_names[$r]+\"_reParent_locator\");\n        reParent_locator_size ($base_names[$r], ($work_names[$r]+\"_reParent_locator\"));\n        reParent_locator_shape ($work_names[$r]+\"_reParent_locator\") locator green;\n\n        setAttr ($work_names[$r]+\"_reParent_locator.rotateOrder\") `getAttr ($base_names[$r]+\".rotateOrder\")`;\n\n        addAttr -ln \"reParent_controlName\" -dt \"string\" ($work_names[$r]+\"_reParent_locator\");\n        setAttr -type \"string\" ($work_names[$r]+\"_reParent_locator.reParent_controlName\") $base_names[$r];\n\n        addAttr -ln \"reParent_Type\" -dt \"string\" ($work_names[$r]+\"_reParent_locator\");\n        setAttr -type \"string\"($work_names[$r]+\"_reParent_locator.reParent_Type\") \"reConstrain\";\n\n        addAttr -ln \"reParent_ControlKeys\" -dt \"string\" ($work_names[$r]+\"_reParent_locator\");\n\n        define_control_keys $base_names[$r] ($work_names[$r]+\"_reParent_locator\");\n        transfer_attributes $work_names[$r] ($work_names[$r]+\"_reParent_locator\") \"base\";\n\n        sets -edit -forceElement Last_Session_reParentLocator_set ($work_names[$r]+\"_reParent_locator\");\n        sets -edit -forceElement All_Session_reParentLocator_set ($work_names[$r]+\"_reParent_locator\");\n\n        alignObject ($base_names[$r], ($work_names[$r]+\"_reParent_locator\"));\n    }\n\n    if($reConstrainButton==1&&$ManualButton==1)\n    {\n        select -r Last_Session_reParentLocator_set;\n        reParent_panel_go_to_cancel;\n    }\n\n   if($reConstrainButton==1&&$ManualButton==0)\n   {\n       reConstrain_mode_go;\n   }\n}\n\nproc reConstrain_mode_cancel()\n{\n    refresh -suspend 0; ogs -reset;\n\n    reParent_panel_go_to_base;\n    cached_playback_on;\n\n    if(`objExists Last_Session_reParentLocator_set`)\n    {delete `sets -q Last_Session_reParentLocator_set`;}\n\n    if(`objExists reConstrain_reParentControls_set`)\n    {delete reConstrain_reParentControls_set;}\n\n    if(`objExists Last_Session_reParentLocator_set`)\n    {delete Last_Session_reParentLocator_set;}\n\n    if(`objExists Last_Session_reParentControls_set`)\n    {delete Last_Session_reParentControls_set;}\n\n    string $SelectedControls[] = `ls -sl`;\n\n    for ($SelCtrl in $SelectedControls)\n    {\n        string $baseControls =  `getAttr ($SelCtrl+\".reParent_controlName\")`;\n        string $locatorNames[] = define_work_names ({$baseControls});\n        $LocatorName = $locatorNames[0];\n        delete ($LocatorName+\"_reParent_grp\");\n    }\n}\n\nproc reConstrain_mode_go()\n{\n    cached_playback_off;\n\n\tint $SaveKeys = `checkBox -query -v SaveKeys`;\n\tint $DelRedMode = `checkBox -query -v DelRed`;\n    int $currentR =`playbackOptions -q  -min`;\n    int $currentL =`playbackOptions -q -max`;\n    int $onLayerReParentMode = `checkBox -query -v onLayerReParentMode`;\n    int $ManualButton = `checkBox -q -v ManualCheckBox`;\n\tint $MakeGlobalButton = `checkBox -q -v MakeGlobalCheckBox`;\n\n    //timer start\n    float $startTime = `timerX`;\n\n    select -r reConstrain_reParentControls_set Last_Session_reParentControls_set;\n\n    string $base_names[] = `ls -sl`;\n    string $work_names[] = define_work_names($base_names);\n\n    for ($r=1; $r<size($base_names); ++$r )\n    {\n        group -em -name ($work_names[$r]+\"_reParent_locator_grp\");\n        alignObject ($work_names[$r]+\"_reParent_locator\") ($work_names[$r]+\"_reParent_locator_grp\");\n\n        parent ($work_names[$r]+\"_reParent_locator\") ($work_names[$r]+\"_reParent_locator_grp\");\n        if($MakeGlobalButton==1)\n        {\n            parentConstraint -mo -w 1 -skipRotate x -skipRotate y -skipRotate z $base_names[0] ($work_names[$r]+\"_reParent_locator_grp\");\n        }\n        else\n        {\n            mxConstraint \"parentConstrain_mo\" 1 $base_names[0] ($work_names[$r]+\"_reParent_locator_grp\");\n        }\n        mxConstraint \"parentConstrain_mo\" 1 $base_names[$r] ($work_names[$r]+\"_reParent_locator\");\n        scaleConstraint -mo -w 1 $base_names[0] ($work_names[$r]+\"_reParent_locator_grp\");\n    }\n\n    if(`objExists \"reConstrain_reParentControls_set\"`)\n    {delete reConstrain_reParentControls_set;}\n\n    select -r Last_Session_reParentLocator_set;\n    BakeKeysOnLocator;\n\n    for ($r=1; $r<size($base_names); ++$r )\n    {\n\t    if (`getAttr -keyable ($base_names[$r]+\".tx\")`==1&&\n\t        `getAttr -lock ($base_names[$r]+\".tx\")`==0&&\n\t        `getAttr -keyable ($base_names[$r]+\".ty\")`==1&&\n\t        `getAttr -lock ($base_names[$r]+\".ty\")`==0&&\n\t        `getAttr -keyable ($base_names[$r]+\".tz\")`==1&&\n\t        `getAttr -lock ($base_names[$r]+\".tz\")`==0&&\n\t        `getAttr -keyable ($base_names[$r]+\".rx\")`==1&&\n\t        `getAttr -lock ($base_names[$r]+\".rx\")`==0&&\n\t        `getAttr -keyable ($base_names[$r]+\".ry\")`==1&&\n\t        `getAttr -lock ($base_names[$r]+\".ry\")`==0&&\n\t        `getAttr -keyable ($base_names[$r]+\".rz\")`==1&&\n\t        `getAttr -lock ($base_names[$r]+\".rz\")`==0)\n    \t{\n\t        mxConstraint \"parentConstrain_mo\" 1 ($work_names[$r]+\"_reParent_locator\") $base_names[$r];;\n        }\n        else\n        {\n            if (`getAttr -keyable ($base_names[$r]+\".tx\")`==1&&\n    \t        `getAttr -lock ($base_names[$r]+\".tx\")`==0&&\n    \t        `getAttr -keyable ($base_names[$r]+\".ty\")`==1&&\n    \t        `getAttr -lock ($base_names[$r]+\".ty\")`==0&&\n    \t        `getAttr -keyable ($base_names[$r]+\".tz\")`==1&&\n    \t        `getAttr -lock ($base_names[$r]+\".tz\")`==0)\n            {\n        \t    mxConstraint \"pointConstrain_mo\" 1 ($work_names[$r]+\"_reParent_locator\") $base_names[$r];\n    \t    }\n\n            if (`getAttr -keyable ($base_names[$r]+\".rx\")`==1&&\n\t            `getAttr -lock ($base_names[$r]+\".rx\")`==0&&\n    \t        `getAttr -keyable ($base_names[$r]+\".ry\")`==1&&\n\t            `getAttr -lock ($base_names[$r]+\".ry\")`==0&&\n\t            `getAttr -keyable ($base_names[$r]+\".rz\")`==1&&\n\t            `getAttr -lock ($base_names[$r]+\".rz\")`==0)\n            {\n        \t    mxConstraint \"orientConstrain_mo\" 1 ($work_names[$r]+\"_reParent_locator\") $base_names[$r];\n    \t    }\n    \t}\n\t    //cutKey -cl -t \":\" -f \":\" -at \"tx\" -at \"ty\" -at \"tz\" -at \"rx\" -at \"ry\" -at \"rz\" $base_names[$r];\n    }\n\n    if ($DelRedMode == 1)\n    {\n        select -r Last_Session_reParentLocator_set;\n        reParentDeleteRedundant;\n    }\n\n    // euler all anim curves\n    select -r Last_Session_reParentLocator_set;\n    filterCurve;\n\n    //timer stop\n    float $totalTime = `timerX -startTime $startTime`;\n    print (\"Total reParent Time: \"+$totalTime+\" seconds\"+\"\\n\");\n\n    reParent_panel_go_to_base;\n\n    delete_unused_nodes;\n    cached_playback_on;\n}\n\n///////////////////////////////////////\n//              IK mode              //\n///////////////////////////////////////\nproc IK_mode_init()\n{\n    global vector $first_vector, $second_vector, $third_vector;\n    vector $first_length;\n    float $PoleVectorMult;\n    global string $session_selected_controls[];\n\n    string $base_names[] = `ls -sl`;\n    $session_selected_controls = $base_names;\n\n    $first_vector  = `xform -q -ws -t $base_names[0]`;\n    $second_vector = `xform -q -ws -t $base_names[1]`;\n    $third_vector  = `xform -q -ws -t $base_names[2]`;\n\n    $second_float_rot = `xform -q -ws -ro $base_names[1]`;\n\n    if(`objExists \"*locator_for_pole_vector_placement*\"`)\n    {\n        $second_vector = `xform -q -ws -t locator_for_pole_vector_placement`;\n    }\n\n    $first_length = $second_vector - $first_vector;\n    $second_length = $third_vector - $second_vector;\n    $PoleVectorMult = (sqrt( pow(($second_length.x), 2) + pow(($second_length.y), 2) + pow(($second_length.z), 2)))/(sqrt( pow(($first_length.x), 2) + pow(($first_length.y), 2) + pow(($first_length.z), 2)));\n\n    vector $mainVector = (($third_vector - $first_vector)/(1+$PoleVectorMult))+$first_vector;\n    vector $poleVector = ($second_vector - $mainVector);\n    float  $poleVectorLen = sqrt( pow(($poleVector.x), 2) + pow(($poleVector.y), 2) + pow(($poleVector.z), 2) );\n\n    if( $poleVectorLen < 0.0001)\n    {\n        if(`objExists \"*locator_for_pole_vector_placement*\"`){delete \"*locator_for_pole_vector_placement*\";}\n\t\tspaceLocator -n \"*locator_for_pole_vector_placement\";\n\t\txform -t ($second_vector.x) ($second_vector.y) ($second_vector.z);\n\t\txform -ro ($second_float_rot[0]) ($second_float_rot[1]) ($second_float_rot[2]);\n        reParent_panel_go_to_cancel;\n        confirmDialog -b \"Ok\" -t \"Oooops..\" -m \" FK chain is straight, so you need to place pole vector, for correct work \";\n    }\n    else\n    {\n        select -r $base_names;\n        IK_mode_manual_init;\n    }\n}\n\nproc IK_mode_manual_init()\n{\n    int $ManualButton = `checkBox -q -v ManualCheckBox`;\n    int $IKButton = `checkBox -q -v IKCheckBox`;\n\tint $SaveKeys = `checkBox -query -v SaveKeys`;\n\n    cached_playback_off;\n\n    global string $session_selected_controls[];\n\n    string $base_names[] = $session_selected_controls;\n    string $work_names[] = define_work_names($base_names);\n    $session_selected_controls = $base_names;\n\n    create_sets;\n\n    if($ManualButton==1&&$IKButton==1)\n    {\n        if(`objExists ($work_names[2]+\"_reParent_manual_pivot\")`)\n        {\n            IK_mode_go;\n        }\n\n        else\n        {\n            reParent_panel_go_to_cancel;\n\n            spaceLocator -n ($work_names[2]+\"_reParent_manual_pivot\");\n            reParent_locator_size ($base_names[2], ($work_names[2]+\"_reParent_manual_pivot\"));\n\n            setAttr ($work_names[2]+\"_reParent_manual_pivot.rotateOrder\") `getAttr ($base_names[2]+\".rotateOrder\")`;\n\n            addAttr -ln \"reParent_controls_chain\" -dt \"string\" ($work_names[2]+\"_reParent_manual_pivot\");\n            setAttr -type \"string\" ($work_names[2]+\"_reParent_manual_pivot.reParent_controls_chain\") ($base_names[0]+\" \"+$base_names[1]+\" \"+$base_names[2]);\n\n            addAttr -ln \"reParent_Type\" -dt \"string\" ($work_names[2]+\"_reParent_manual_pivot\");\n            setAttr -type \"string\"($work_names[2]+\"_reParent_manual_pivot.reParent_Type\") \"IK_manual\";\n\n            addAttr -ln \"reParent_controlName\" -dt \"string\" ($work_names[2]+\"_reParent_manual_pivot\");\n            setAttr -type \"string\"($work_names[2]+\"_reParent_manual_pivot.reParent_controlName\") ($work_names[2]+\"_reParentIKlocator_base\");\n\n            addAttr -ln \"reParent_ControlKeys\" -dt \"string\" ($work_names[2]+\"_reParent_manual_pivot\");\n\n            define_control_keys $base_names[2] ($work_names[2]+\"_reParent_manual_pivot\");\n            alignObject ($base_names[2])($work_names[2]+\"_reParent_manual_pivot\");\n\n            select -r ($work_names[2]+\"_reParent_manual_pivot\");\n        }\n    }\n    if($ManualButton==0&&$IKButton==1)\n    {\n        IK_mode_go;\n    }\n\n}\n\nglobal proc IK_mode_go_cancel()\n{\n    refresh -suspend 0; ogs -reset;\n\n    if(`objExists \"*locator_for_pole_vector_placement*\"`) {delete \"*locator_for_pole_vector_placement*\";}\n    if(`objExists \"*_reParent_manual_pivot\"`) {delete \"*_reParent_manual_pivot\";}\n\n    reParent_panel_go_to_base;\n    if(`objExists Last_Session_reParentLocator_set`)\n    {delete `sets -q Last_Session_reParentLocator_set`;}\n\n    if(`objExists Last_Session_reParentLocator_set`)\n    {delete Last_Session_reParentLocator_set;}\n\n    if(`objExists Last_Session_reParentControls_set`)\n    {delete Last_Session_reParentControls_set;}\n}\n\nglobal proc IK_mode_go()\n{\n    global string $session_selected_controls[], $parent_object[];\n    global vector $FinalPoleVector;\n    float $WorldTr[];\n\n    int $SaveKeys = `checkBox -query -v SaveKeys`;\n    int $ManualButton = `checkBox -q -v ManualCheckBox`;\n\tint $PinButton = `checkBox -q -v PinCheckBox`;\n\n    cached_playback_off;\n    delete_unused_nodes;\n    reParent_panel_go_to_base;\n    cycleCheck -e off;\n\n    //timer start\n    float $startTime = `timerX`;\n\n    string $base_names[] = $session_selected_controls;\n    string $work_names[] = define_work_names($base_names);\n\n    // create locators for Joints\n    for ($i=0; $i<3; ++$i )\n\t{\n\t\tspaceLocator -n ($work_names[$i]+\"_reParentIKlocator\");\n        setAttr ($work_names[$i]+\"_reParentIKlocator.rotateOrder\") `getAttr ($base_names[$i]+\".rotateOrder\")`;\n\n        addAttr -ln \"reParent_Type\" -dt \"string\" ($work_names[$i]+\"_reParentIKlocator\");\n        setAttr -type \"string\" ($work_names[$i]+\"_reParentIKlocator.reParent_Type\") \"IK\";\n\n        addAttr -ln \"reParent_controls_chain\"  -dt \"string\"  ($work_names[$i]+\"_reParentIKlocator\");\n        setAttr -type \"string\" ($work_names[$i]+\"_reParentIKlocator.reParent_controls_chain\") ($base_names[0]+\" \"+$base_names[1]+\" \"+$base_names[2]);\n\n        addAttr -ln \"reParent_ControlKeys\"  -dt \"string\" ($work_names[$i]+\"_reParentIKlocator\");\n        define_control_keys ($base_names[$i], ($work_names[$i]+\"_reParentIKlocator\"));\n\n        parentConstraint -w 1 -n ($work_names[$i]+\"_reParentIKlocator_pac\") $base_names[$i] ($work_names[$i]+\"_reParentIKlocator\");\n        setAttr ($work_names[$i]+\"_reParentIKlocator.rotateOrder\") `getAttr ($base_names[$i]+\".rotateOrder\")`;\n\t\tselect -cl;\n\t}\n\n    string $reParent_ControlKeys_1 = `getAttr ($work_names[0]+\"_reParentIKlocator.reParent_ControlKeys\")`;\n    string $reParent_ControlKeys_2 = `getAttr ($work_names[1]+\"_reParentIKlocator.reParent_ControlKeys\")`;\n    string $reParent_ControlKeys_3 = `getAttr ($work_names[2]+\"_reParentIKlocator.reParent_ControlKeys\")`;\n    string $reParent_ControlKeys_string = ($reParent_ControlKeys_1+\" \"+$reParent_ControlKeys_2+\" \"+$reParent_ControlKeys_3);\n\n    string $reParent_ControlKeys_array[] = stringToStringArray($reParent_ControlKeys_string, \" \");\n    $reParent_ControlKeys_array = stringArrayRemoveDuplicates($reParent_ControlKeys_array);\n    $reParent_ControlKeys_string = stringArrayToString($reParent_ControlKeys_array, \" \");\n\n    setAttr -type \"string\" ($work_names[2]+\"_reParentIKlocator.reParent_ControlKeys\") $reParent_ControlKeys_string;\n\n\tspaceLocator -n ($work_names[1]+\"_reParentIK_world_locator\"); select -cl;\n\n    // create Joints\n    for ($i=0; $i<3; ++$i )\n    {\n    \t$WorldTr = `xform -q -ws -t ($work_names[$i]+\"_reParentIKlocator\")`;\n    \tjoint -rad 1 -n ($work_names[$i]+\"_reParentIKJoint\") -p $WorldTr[0] $WorldTr[1] $WorldTr[2];\n    \t//setAttr ($work_names[$i]+\"_reParentIKJoint.displayLocalAxis\") 1;\n    \tif ($i>0)\n    \t{\n       \t\tjoint -e  -oj yxz -secondaryAxisOrient zup -zso ($work_names[$i-1]+\"_reParentIKJoint\");\n    \t}\n    }\n\n\tduplicate -n ($work_names[size($base_names)-1]+\"_reParentIKlocator_end\") -rr;\n    move -r -ls -wd 0 2 0 ;\n    float $WorldLastTr[] = `xform -q -ws -t ($work_names[size($base_names)-1]+\"_reParentIKlocator_end\")`;\n    delete ($work_names[size($base_names)-1]+\"_reParentIKlocator_end\");\n    select -r ($work_names[2]+\"_reParentIKJoint\");\n\tjoint -rad 1 -n ($work_names[size($base_names)-1]+\"_reParentIKlocator_end\") -p $WorldLastTr[0] $WorldLastTr[1] $WorldLastTr[2];\n    joint -e  -oj yxz -secondaryAxisOrient zup -zso ($work_names[2]+\"_reParentIKJoint\");\n    delete ($work_names[size($base_names)-1]+\"_reParentIKlocator_end\");\n\n    //constrain joints\n    for ($i=0; $i<=(`size($base_names)`-1); $i++)\n\t{\n        pointConstraint -n \"temp_jo_pc\" -w 1 ($work_names[$i]+\"_reParentIKlocator\") ($work_names[$i]+\"_reParentIKJoint\");\n\t}\n\n    //right joint orient\n    for ($i=0; $i<(`size($base_names)`-1); $i++)\n\t{\n        spaceLocator -n ($work_names[$i+1]+\"_reParent_jo_locator\");\n        parent ($work_names[$i+1]+\"_reParent_jo_locator\") ($work_names[$i+1]+\"_reParentIKJoint\");\n        xform -t 0 -5 0 ($work_names[$i+1]+\"_reParent_jo_locator\");\n        parent -world ($work_names[$i+1]+\"_reParent_jo_locator\");\n\t}\n\n    for ($i=0; $i<(`size($base_names)`-1); $i++)\n\t{\n        aimConstraint -n \"temp_jo_ac\" -offset 0 0 0 -weight 1 -aimVector 0 1 0 -upVector 1 0 0 -worldUpType \"object\" -worldUpObject ($work_names[$i+1]+\"_reParent_jo_locator\") ($work_names[$i+1]+\"_reParentIKlocator\")  ($work_names[$i]+\"_reParentIKJoint\");\n    }\n\n    delete \"*temp_jo_pc*\" \"*temp_jo_ac*\" \"*_reParent_jo_locator*\";\n\n    //freeze jponts\n    for ($i=0; $i<(`size($base_names)`); $i++)\n\t{\n        makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 ($work_names[$i]+\"_reParentIKJoint\");\n    }\n\n    duplicate -rc -n ($work_names[0]+\"_reParentIKJoint_soft\") ($work_names[0]+\"_reParentIKJoint\");\n    rename ($work_names[1]+\"_reParentIKJoint1\") ($work_names[1]+\"_reParentIKJoint_soft\");\n    rename ($work_names[2]+\"_reParentIKJoint1\") ($work_names[2]+\"_reParentIKJoint_soft\");\n\n    connectAttr -f ($work_names[0]+\"_reParentIKJoint.translate\") ($work_names[0]+\"_reParentIKJoint_soft.translate\");\n    connectAttr -f ($work_names[0]+\"_reParentIKJoint.rotate\") ($work_names[0]+\"_reParentIKJoint_soft.rotate\");\n    connectAttr -f ($work_names[1]+\"_reParentIKJoint.rotate\") ($work_names[1]+\"_reParentIKJoint_soft.rotate\");\n    connectAttr -f ($work_names[2]+\"_reParentIKJoint.rotate\") ($work_names[2]+\"_reParentIKJoint_soft.rotate\");\n\n    spaceLocator -n ($work_names[1]+\"_reParentIKPole\");\n\n    //size\n    float $JointLentgts = `getAttr ($work_names[1]+\"_reParentIKJoint.translateY\")`;\n\n    setAttr ($work_names[0]+\"_reParentIKlocator.localScaleX\") ($JointLentgts/7);\n    setAttr ($work_names[0]+\"_reParentIKlocator.localScaleY\") ($JointLentgts/7);\n    setAttr ($work_names[0]+\"_reParentIKlocator.localScaleZ\") ($JointLentgts/7);\n\n    setAttr ($work_names[2]+\"_reParentIKlocator.localScaleX\") ($JointLentgts/5);\n    setAttr ($work_names[2]+\"_reParentIKlocator.localScaleY\") ($JointLentgts/5);\n    setAttr ($work_names[2]+\"_reParentIKlocator.localScaleZ\") ($JointLentgts/5);\n\n    setAttr ($work_names[1]+\"_reParentIKPole.localScaleX\") ($JointLentgts/10);\n    setAttr ($work_names[1]+\"_reParentIKPole.localScaleY\") ($JointLentgts/10);\n    setAttr ($work_names[1]+\"_reParentIKPole.localScaleZ\") ($JointLentgts/10);\n\n    reParent_locator_shape ($work_names[0]+\"_reParentIKlocator\") locator green;\n    reParent_locator_shape ($work_names[2]+\"_reParentIKlocator\") locator green;\n    reParent_locator_shape ($work_names[1]+\"_reParentIKPole\") locator green;\n\n    if(`objExists ($work_names[2]+\"_reParent_manual_pivot\")`)\n    {\n        setAttr ($work_names[2]+\"_reParent_manual_pivot.localScaleX\") ($JointLentgts/5);\n        setAttr ($work_names[2]+\"_reParent_manual_pivot.localScaleY\") ($JointLentgts/5);\n        setAttr ($work_names[2]+\"_reParent_manual_pivot.localScaleZ\") ($JointLentgts/5);\n        reParent_locator_shape ($work_names[2]+\"_reParent_manual_pivot\") locator green;\n        parentConstraint -n ($work_names[2]+\"_reParentIKlocator_mp_pac\") -mo -w 1 $base_names[2] ($work_names[2]+\"_reParent_manual_pivot\");\n    }\n\n    //add attributes for ik controls\n    addAttr -ln \"reParent_controls_chain\"  -dt \"string\"  ($work_names[1]+\"_reParentIKPole\");\n    setAttr -type \"string\" ($work_names[1] +\"_reParentIKPole.reParent_controls_chain\") ($base_names[0]+\" \"+$base_names[1]+\" \"+$base_names[2]);\n\n    addAttr -ln \"reParent_ControlKeys\"  -dt \"string\" ($work_names[1]+\"_reParentIKPole\");\n    setAttr -type \"string\" ($work_names[1]+\"_reParentIKPole.reParent_ControlKeys\") $reParent_ControlKeys_string;\n\n    addAttr -ln \"reParent_Type\" -dt \"string\" ($work_names[1]+\"_reParentIKPole\");\n    setAttr -type \"string\" ($work_names[1]+\"_reParentIKPole.reParent_Type\") \"IK\";\n\n    //pole vector\n    addAttr -ln \"Connection_line_vis\"  -at double -min 0 -max 1 -dv 1 ($work_names[1]+\"_reParentIKPole\");\n    setAttr -e -keyable true ($work_names[1]+\"_reParentIKPole.Connection_line_vis\");\n\n    addAttr -ln \"Follow\"  -at double -min 0 -max 1 -dv 0 ($work_names[1]+\"_reParentIKPole\");\n    setAttr -e -keyable true ($work_names[1]+\"_reParentIKPole.Follow\");\n\n    addAttr -ln \"Pin\"  -at double -min 0 -max 1  -dv 0 ($work_names[1]+\"_reParentIKPole\");\n    setAttr -e-keyable true ($work_names[1]+\"_reParentIKPole.Pin\");\n\n    //ik control\n    addAttr -ln \"Offset_Control\" -at \"enum\" -en \"hide:show\" -dv 1 ($work_names[2]+\"_reParentIKlocator\");\n    setAttr -e -keyable true ($work_names[2]+\"_reParentIKlocator.Offset_Control\");\n\n    addAttr -ln \"Stretchy\"  -at double -min 0 -max 1  -dv 0 ($work_names[2]+\"_reParentIKlocator\");\n    setAttr -e -keyable true ($work_names[2]+\"_reParentIKlocator.Stretchy\");\n\n    addAttr -ln \"Soft_IK\"  -at double -min 0 -max 1 -dv 0 ($work_names[2]+\"_reParentIKlocator\");\n    setAttr -e -keyable true ($work_names[2]+\"_reParentIKlocator.Soft_IK\");\n\n    transfer_attributes $work_names[2] ($work_names[2]+\"_reParentIKlocator\") \"base\";\n\n    //setup pole vector\n    if(`objExists \"locator_for_pole_vector_placement\"`)\n    {\n        $FinalPoleVector = `xform -q -ws -t \"locator_for_pole_vector_placement\"`;\n    }\n    else\n    {\n        float $PoleVectorLengths =  (getAttr ($work_names[1]+\"_reParentIKJoint.translateY\")) + (getAttr ($work_names[2]+\"_reParentIKJoint.translateY\"));\n        float $PoleVectorMult =  (getAttr ($work_names[2]+\"_reParentIKJoint.translateY\")) / (getAttr ($work_names[1]+\"_reParentIKJoint.translateY\"));\n\n        vector $firstRePArentIK_locator_vector = `xform -q -ws -t ($work_names[0]+\"_reParentIKlocator\")`;\n        vector $secondRePArentIK_locator_vector = `xform -q -ws -t ($work_names[1]+\"_reParentIKlocator\")`;\n        vector $thindRePArentIK_locator_vector = `xform -q -ws -t ($work_names[2]+\"_reParentIKlocator\")`;\n\n        vector $mainVector = (($thindRePArentIK_locator_vector - $firstRePArentIK_locator_vector)/(1+$PoleVectorMult))+$firstRePArentIK_locator_vector;\n        vector $poleVector = ($secondRePArentIK_locator_vector - $mainVector);\n\n        float $poleVectorLen = sqrt( pow(($poleVector.x), 2) + pow(($poleVector.y), 2) + pow(($poleVector.z), 2) );\n\n        vector $poleNorm = <<(($poleVector.x)/$poleVectorLen), (($poleVector.y)/$poleVectorLen), (($poleVector.z)/$poleVectorLen)>>;\n        $FinalPoleVector = ($poleNorm*($PoleVectorLengths)+$mainVector);\n    }\n\n    //micro rotate\n    if(`objExists \"locator_for_pole_vector_placement\"`)\n    {\n        duplicate -rr -n ($work_names[1]+\"_reParentIKPole_micro\") ($work_names[1]+\"_reParentIKPole\");\n        parent ($work_names[1]+\"_reParentIKPole_micro\") ($work_names[0]+\"_reParentIKJoint\");\n        string $micro_rotate_ac[] = `aimConstraint -weight 1 -aimVector 1 0 0 -upVector 0 1 0 -mo -worldUpType \"object\" -worldUpObject ($work_names[2]+\"_reParentIKlocator\") ($work_names[1]+\"_reParentIKPole_micro\") ($work_names[1]+\"_reParentIKJoint\")`;\n        move -r -os -wd 0.01 0 0 ;\n        delete $micro_rotate_ac;\n        delete \"locator_for_pole_vector_placement*\";\n    }\n\n    parent ($work_names[1]+\"_reParentIKPole\") ($work_names[1]+\"_reParentIKlocator\");\n    xform -t 0 0 0 ($work_names[1]+\"_reParentIKPole\");\n    xform -ro 0 0 0 ($work_names[1]+\"_reParentIKPole\");\n    duplicate -n ($work_names[1]+\"_reParentIKoffset\") ($work_names[1]+\"_reParentIKPole\");\n    xform -ws -t ($FinalPoleVector.x)($FinalPoleVector.y)($FinalPoleVector.z) ($work_names[1]+\"_reParentIKPole\");\n\n    setAttr -l 0 ($work_names[1]+\"_reParentIKoffset.v\");\n    setAttr -l 1 ($work_names[1]+\"_reParentIKoffset.v\") 0;\n\n    //constrain ik system to base controls\n    parentConstraint -n ($work_names[1]+\"_reParentIKoffset_pac\") -w 1 -mo ($work_names[1]+\"_reParentIKlocator\") ($work_names[1]+\"_reParentIKoffset\");\n\n    spaceLocator -n ($work_names[0]+\"_reParentIKoffset\");\n    parent ($work_names[0]+\"_reParentIKoffset\") ($work_names[0]+\"_reParentIKlocator\");\n    xform -t 0 0 0 ($work_names[0]+\"_reParentIKoffset\");\n    xform -ro 0 0 0 ($work_names[0]+\"_reParentIKoffset\");\n    parent  ($work_names[0]+\"_reParentIKoffset\") ($work_names[0]+\"_reParentIKJoint\");\n\n    parentConstraint -n ($work_names[0]+\"_reParentIKoffset_pac\") -w 1 -mo ($work_names[0]+\"_reParentIKlocator\") ($work_names[0]+\"_reParentIKoffset\");\n\n    parent -w ($work_names[1]+\"_reParentIKPole\");\n    parentConstraint -n ($work_names[1]+\"_reParentIKPole_pac\") -w 1 -mo ($work_names[1]+\"_reParentIKlocator\") ($work_names[1]+\"_reParentIKPole\");\n\n    ikHandle  -n ($work_names[1]+\"_reParent_ikHandle\") -solver \"ikRPsolver\" -sj ($work_names[0]+\"_reParentIKJoint\") -ee ($work_names[2]+\"_reParentIKJoint\") -p 1 -w 1;\n    poleVectorConstraint -n ($work_names[1]+\"_pvc\") ($work_names[1]+\"_reParentIKPole\") ($work_names[1]+\"_reParent_ikHandle\");\n\n    parentConstraint -n ($work_names[0]+\"_reParentIKJoint_pac\") -w 1 -mo ($work_names[0]+\"_reParentIKlocator\") ($work_names[0]+\"_reParentIKJoint\");\n    parentConstraint -n ($work_names[1]+\"_reParent_ikHandle_pac\") -w 1 -mo ($work_names[2]+\"_reParentIKlocator\") ($work_names[1]+\"_reParent_ikHandle\");\n\n    //setup offset control\n        spaceLocator -n ($work_names[1]+\"_reParentIK_offset\");\n        setAttr ($work_names[1]+\"_reParentIK_offset.localScaleX\") ($JointLentgts/4);\n        setAttr ($work_names[1]+\"_reParentIK_offset.localScaleY\") ($JointLentgts/4);\n        setAttr ($work_names[1]+\"_reParentIK_offset.localScaleZ\") ($JointLentgts/4);\n        reParent_locator_shape ($work_names[1]+\"_reParentIK_offset\") locator yellow;\n\n        setAttr ($work_names[1]+\"_reParentIK_offset.control_shape\") 3;\n\n    //add attributes for offset control\n        addAttr -ln \"reParent_Type\" -dt \"string\" ($work_names[1]+\"_reParentIK_offset\");\n        setAttr -type \"string\" ($work_names[1]+\"_reParentIK_offset.reParent_Type\") \"IK\";\n\n        addAttr -ln \"reParent_controls_chain\"  -dt \"string\"  ($work_names[1]+\"_reParentIK_offset\");\n        setAttr -type \"string\" ($work_names[1]+\"_reParentIK_offset.reParent_controls_chain\") ($base_names[0]+\" \"+$base_names[1]+\" \"+$base_names[2]);\n\n        addAttr -ln \"reParent_ControlKeys\"  -dt \"string\" ($work_names[1]+\"_reParentIK_offset\");\n        setAttr -type \"string\" ($work_names[1]+\"_reParentIK_offset.reParent_ControlKeys\") $reParent_ControlKeys_string;\n\n    group -em -n ($work_names[1]+\"_reParentIK_offset_grp\");\n    parent ($work_names[1]+\"_reParentIK_offset\") ($work_names[1]+\"_reParentIK_offset_grp\");\n    parent ($work_names[1]+\"_reParentIK_offset_grp\") ($work_names[1]+\"_reParentIKJoint_soft\");\n\n    xform -t 0 0 0  ($work_names[1]+\"_reParentIK_offset_grp\");\n    xform -ro 0 -90 -180  ($work_names[1]+\"_reParentIK_offset_grp\");\n\n    parent ($work_names[1]+\"_reParentIKoffset\") ($work_names[1]+\"_reParentIK_offset_grp\");\n\n    //align offset control group\n    string $temp_offset_grp_ac[] =  `aimConstraint -weight 1 -aimVector 0 0 1 -upVector 0 -1 0 -worldUpType \"object\" -worldUpObject ($work_names[2]+\"_reParentIKlocator\") ($work_names[1]+\"_reParentIKPole\") ($work_names[1]+\"_reParentIK_offset_grp\")`;\n    delete $temp_offset_grp_ac;\n\n    //connect rotation offset grp\n    string $offset_uc = `shadingNode -n ($work_names[1]+\"_reParentIK_offset_uc\") -asUtility unitConversion`;\n    setAttr($offset_uc+\".conversionFactor\") 28.648;\n    connectAttr -f ($work_names[1]+\"_reParentIKJoint_soft.rotateZ\") ($offset_uc+\".input\");\n\n    string $offset_pma = `shadingNode -n ($work_names[1]+\"_reParentIK_offset_pma\") -asUtility plusMinusAverage`;\n    setAttr ($offset_pma+\".operation\") 2;\n    setAttr ($offset_pma+\".input1D[0]\") `getAttr($work_names[1]+\"_reParentIK_offset_grp.rotateZ\")`;\n    connectAttr -f ($offset_uc+\".output\") ($offset_pma+\".input1D[1]\");\n\n    connectAttr -f ($offset_pma+\".output1D\") ($work_names[1]+\"_reParentIK_offset_grp.rotateZ\");\n    setAttr ($work_names[1]+\"_reParentIK_offset_grp.rotateY\") -90;\n\n    //create reParentIK group\n    group -em -n ($work_names[0]+\"_reParentIK_grp\");\n    parent\n    ($work_names[0]+\"_reParentIKlocator\")\n    ($work_names[1]+\"_reParentIKlocator\")\n    ($work_names[2]+\"_reParentIKlocator\")\n    ($work_names[0]+\"_reParentIKJoint\")\n    ($work_names[0]+\"_reParentIKJoint_soft\")\n    ($work_names[1]+\"_reParent_ikHandle\")\n    ($work_names[1]+\"_reParentIKPole\")\n    ($work_names[1]+\"_reParentIK_world_locator\")\n    ($work_names[0]+\"_reParentIK_grp\");\n\n    if(`objExists ($work_names[2]+\"_reParent_manual_pivot\")`)\n    {\n        parent ($work_names[2]+\"_reParent_manual_pivot\") ($work_names[0]+\"_reParentIK_grp\");\n    }\n\n    //add controls to sets\n    sets -edit -forceElement All_Session_reParentLocator_set  ($work_names[0]+\"_reParentIKlocator\");\n    sets -edit -forceElement Last_Session_reParentLocator_set ($work_names[0]+\"_reParentIKlocator\");\n\n    sets -edit -forceElement All_Session_reParentLocator_set  ($work_names[1]+\"_reParentIK_offset\");\n    sets -edit -forceElement Last_Session_reParentLocator_set ($work_names[1]+\"_reParentIK_offset\");\n\n    sets -edit -forceElement All_Session_reParentLocator_set  ($work_names[2]+\"_reParentIKlocator\");\n    sets -edit -forceElement Last_Session_reParentLocator_set ($work_names[2]+\"_reParentIKlocator\");\n\n    sets -edit -forceElement All_Session_reParentLocator_set  ($work_names[1]+\"_reParentIKPole\");\n    sets -edit -forceElement Last_Session_reParentLocator_set ($work_names[1]+\"_reParentIKPole\");\n\n    if(`objExists ($work_names[2]+\"_reParent_manual_pivot\")`)\n    {\n        sets -edit -forceElement All_Session_reParentLocator_set  ($work_names[2]+\"_reParent_manual_pivot\");\n        sets -edit -forceElement Last_Session_reParentLocator_set ($work_names[2]+\"_reParent_manual_pivot\");\n    }\n\n    //world - local mode\n    int $MakeGlobalButton = `checkBox -q -v MakeGlobalCheckBox`;\n    int $local_mode = `checkBox -q -v IKCheckLocalBox`;\n    $parent_object = `listRelatives -f -p $base_names[0]`;\n\n    //global\n    if ($local_mode==0&&$parent_object[0]!=\"\")\n    {\n        group -n ($work_names[0]+\"_reParentIK_parent_grp\") ($work_names[0]+\"_reParentIKlocator\");\n        parentConstraint -n ($work_names[0]+\"_reParentIK_parent_grp_pac\") -w 1 -mo $parent_object[0] ($work_names[0]+\"_reParentIK_parent_grp\");\n    }\n\n    //local + object up exist\n    if ($local_mode==1&&$parent_object[0]!=\"\")\n    {\n        if($MakeGlobalButton == 1)\n        {\n            float $pos[] = `xform -q -t -ws $base_names[0]`;\n            move -rpr $pos[0] $pos[1] $pos[2] ($work_names[0]+\"_reParentIK_grp.scalePivot\") ($work_names[0]+\"_reParentIK_grp.rotatePivot\");\n            parentConstraint -n ($work_names[0]+\"_reParentIK_parent_grp_pac\") -skipRotate x -skipRotate y -skipRotate z -w 1 -mo $parent_object[0] ($work_names[0]+\"_reParentIK_grp\");;\n        }\n        else\n        {\n            parentConstraint -n ($work_names[0]+\"_reParentIK_parent_grp_pac\") -w 1 -mo $parent_object[0] ($work_names[0]+\"_reParentIK_grp\");;\n        }\n    }\n\n    //local + object up not exist\n    if ($local_mode==1&&$parent_object[0]==\"\")\n    {\n        group -n ($work_names[0]+\"_reParentIK_parent_grp\") ($work_names[2]+\"_reParentIKlocator\") ($work_names[1]+\"_reParentIK_world_locator\");\n        parentConstraint -n ($work_names[0]+\"_reParentIK_parent_grp_pac\") -w 1 -mo ($work_names[0]+\"_reParentIKlocator\") ($work_names[0]+\"_reParentIK_parent_grp\");\n    }\n\n    //bake animation on locator\n    int $currentR =`playbackOptions -q -min`;\n    int $currentL =`playbackOptions -q -max`;\n    int $onLayerReParentMode = `checkBox -query -v onLayerReParentMode`;\n\n    select -r\n    ($work_names[0]+\"_reParentIKoffset\")\n    ($work_names[0]+\"_reParentIKlocator\")\n    ($work_names[1]+\"_reParentIKPole\")\n    ($work_names[1]+\"_reParentIKoffset\")\n    ($work_names[2]+\"_reParentIKlocator\");\n    if(`objExists ($work_names[2]+\"_reParent_manual_pivot\")`)\n    {select -add ($work_names[2]+\"_reParent_manual_pivot\");}\n\n    if ($PinButton == 0)\n    {\n        refresh -suspend 1;\n        bakeResults\n        -t ($currentL+\":\"+$currentR)\n        -simulation 1\n        -sampleBy 1\n        -disableImplicitControl 1\n        -preserveOutsideKeys 1\n        -sparseAnimCurveBake 0\n        -removeBakedAttributeFromLayer 0\n        -removeBakedAnimFromLayer 0\n        -bakeOnOverrideLayer $onLayerReParentMode\n        -minimizeRotation 1\n        -controlPoints 0\n        -shape 0\n        -at \"tx\"\n        -at \"ty\"\n        -at \"tz\"\n        -at \"rx\"\n        -at \"ry\"\n        -at \"rz\";\n        refresh -suspend 0; ogs -reset;\n    }\n    //delete work constrains\n    delete ($work_names[0]+\"_reParentIKoffset_pac\") ($work_names[0]+\"_reParentIKlocator_pac\") ($work_names[1]+\"_reParentIKPole_pac\") ($work_names[1]+\"_reParentIKoffset_pac\") ($work_names[2]+\"_reParentIKlocator_pac\");\n    if(`objExists ($work_names[2]+\"_reParent_manual_pivot\")`){ delete ($work_names[2]+\"_reParentIKlocator_mp_pac*\");}\n\n    filterCurve;\n\n    //cutKey -cl -t \":\" -f \":\" -at \"tx\" -at \"ty\" -at \"tz\" -at \"rx\" -at \"ry\" -at \"rz\" $base_names[0];\n    //cutKey -cl -t \":\" -f \":\" -at \"tx\" -at \"ty\" -at \"tz\" -at \"rx\" -at \"ry\" -at \"rz\" $base_names[1];\n    //cutKey -cl -t \":\" -f \":\" -at \"tx\" -at \"ty\" -at \"tz\" -at \"rx\" -at \"ry\" -at \"rz\" $base_names[2];\n    cutKey -cl -t \":\" -f \":\" -at \"rx\" -at \"ry\" -at \"rz\" ($work_names[1]+\"_reParentIKPole\");\n\n    select -r ($work_names[2]+\"_reParentIKlocator\");\n    filterCurve;\n\n    //visibility\n    setAttr ($work_names[0]+\"_reParentIKJoint.drawStyle\") 2;\n    setAttr ($work_names[1]+\"_reParentIKJoint.drawStyle\") 2;\n    setAttr ($work_names[2]+\"_reParentIKJoint.drawStyle\") 2;\n    setAttr ($work_names[0]+\"_reParentIKJoint.v\") 0;\n\n    setAttr ($work_names[0]+\"_reParentIKJoint_soft.drawStyle\") 2;\n    setAttr ($work_names[1]+\"_reParentIKJoint_soft.drawStyle\") 2;\n    setAttr ($work_names[2]+\"_reParentIKJoint_soft.drawStyle\") 2;\n\n    setAttr -l true ($work_names[1]+\"_reParentIKlocator.visibility\") 0;\n    setAttr -l true ($work_names[0]+\"_reParentIKoffset.visibility\") 0;\n    setAttr -l true ($work_names[1]+\"_reParent_ikHandle.visibility\") 0;\n    setAttr -l true ($work_names[1]+\"_reParentIK_world_locator.visibility\") 0;\n\n    if ($parent_object[0]==\"\")\n    {\n        select -r ($work_names[0]+\"_reParentIKlocator\");\n        setAttr ($work_names[0]+\"_reParentIKlocator.control_shape\") 2;\n    }\n    else\n    {\n        setAttr -l 0 ($work_names[0]+\"_reParentIKlocator.visibility\");\n        setAttr -l 1 ($work_names[0]+\"_reParentIKlocator.visibility\") 0;\n    }\n\n    //create aim locators\n    for ($i=0; $i<(`size($base_names)`); $i++)\n\t{\n    \tspaceLocator -n ($work_names[$i]+\"_reParentIKlocator_for_aim\");\n    \tparent ($work_names[$i]+\"_reParentIKlocator_for_aim\") ($work_names[$i]+\"_reParentIKJoint_soft\");\n        xform -t 0 0 0 ($work_names[$i]+\"_reParentIKlocator_for_aim\");\n        xform -ro 0 0 0 ($work_names[$i]+\"_reParentIKlocator_for_aim\");\n        setAttr -l true ($work_names[$i]+\"_reParentIKlocator_for_aimShape.visibility\") 0;\n    }\n\n    parent ($work_names[1]+\"_reParentIKlocator_for_aim\") ($work_names[1]+\"_reParentIK_offset\");\n    xform -t 2 0 0 ($work_names[1]+\"_reParentIKlocator_for_aim\");\n    xform -ro 0 0 0 ($work_names[1]+\"_reParentIKlocator_for_aim\");\n\n    //copy offset animation on offset control\n    if ($PinButton == 0)\n    {\n        cutKey -t \":\" -f \":\" -at \"tx\" -at \"ty\" -at \"tz\" ($work_names[1]+\"_reParentIKoffset\");\n        pasteKey -at \"tx\" -at \"ty\" -at \"tz\" ($work_names[1]+\"_reParentIK_offset\");\n        cutKey -t \":\" -f \":\" -at \"rx\" -at \"ry\" -at \"rz\" ($work_names[1]+\"_reParentIKoffset\");\n    }\n\n    xform -t 0 0 0 ($work_names[1]+\"_reParentIKoffset\");\n    xform -ro 0 0 0 ($work_names[1]+\"_reParentIKoffset\");\n    parentConstraint -w 1 -mo ($work_names[1]+\"_reParentIK_offset\") ($work_names[1]+\"_reParentIKoffset\");\n\n    //connect pin\n    pointConstraint -n ($work_names[1]+\"_reParentIK_offset_grp_poc\") ($work_names[1]+\"_reParentIKPole\") ($work_names[1]+\"_reParentIK_offset_grp\");\n    pointConstraint -n ($work_names[1]+\"_reParentIK_offset_grp_poc\") ($work_names[1]+\"_reParentIKJoint_soft\") ($work_names[1]+\"_reParentIK_offset_grp\");\n    connectAttr -f ($work_names[1]+\"_reParentIKPole.Pin\") (($work_names[1]+\"_reParentIK_offset_grp_poc.\")+($work_names[1]+\"_reParentIKPoleW0\"));\n    string $pole_pin_rev = `shadingNode -n ($work_names[1]+\"_reParentIKPole_pin_rev\") -asUtility reverse`;\n    connectAttr -f ($work_names[1]+\"_reParentIKPole.Pin\") ($pole_pin_rev+\".inputX\");\n    connectAttr -f ($pole_pin_rev+\".outputX\") (($work_names[1]+\"_reParentIK_offset_grp_poc.\")+($work_names[1]+\"_reParentIKJoint_softW1\"));\n    setAttr -l 0 ($work_names[1]+\"_reParentIK_offset.v\");\n    connectAttr -f ($work_names[2]+\"_reParentIKlocator.Offset_Control\") ($work_names[1]+\"_reParentIK_offset.v\");\n    setAttr -l 1 ($work_names[1]+\"_reParentIK_offset.v\");\n\n    setAttr -lock true -keyable false -channelBox false ($work_names[1]+\"_reParentIK_offset.rx\");\n    setAttr -lock true -keyable false -channelBox false ($work_names[1]+\"_reParentIK_offset.ry\");\n    setAttr -lock true -keyable false -channelBox false ($work_names[1]+\"_reParentIK_offset.rz\");\n    setAttr -lock true -keyable false -channelBox false ($work_names[1]+\"_reParentIK_offset.sx\");\n    setAttr -lock true -keyable false -channelBox false ($work_names[1]+\"_reParentIK_offset.sy\");\n    setAttr -lock true -keyable false -channelBox false ($work_names[1]+\"_reParentIK_offset.sz\");\n    setAttr -lock true -keyable false -channelBox false ($work_names[1]+\"_reParentIK_offset.v\");\n\n    //connect follow\n    group -em -n ($work_names[1]+\"_reParentIK_follow_grp\");\n    parent ($work_names[1]+\"_reParentIK_follow_grp\") ($work_names[0]+\"_reParentIK_grp\");\n    parent ($work_names[1]+\"_reParentIKPole\") ($work_names[1]+\"_reParentIK_follow_grp\");\n\n    parentConstraint -n ($work_names[1]+\"_reParentIK_offset_grp_pac\") ($work_names[1]+\"_reParentIK_world_locator\") ($work_names[1]+\"_reParentIK_follow_grp\");\n    parentConstraint -mo ($work_names[2]+\"_reParentIKlocator\") ($work_names[1]+\"_reParentIK_follow_grp\");\n    connectAttr -f ($work_names[1]+\"_reParentIKPole.Follow\") (($work_names[1]+\"_reParentIK_offset_grp_pac.\")+($work_names[2]+\"_reParentIKlocatorW1\"));\n    string $pole_follow_rev = `shadingNode -n ($work_names[1]+\"_reParentIKPole_follow_rev\") -asUtility reverse`;\n    connectAttr -f ($work_names[1]+\"_reParentIKPole.Follow\") ($pole_follow_rev+\".inputX\");\n    connectAttr -f ($pole_follow_rev+\".outputX\") (($work_names[1]+\"_reParentIK_offset_grp_pac.\")+($work_names[1]+\"_reParentIK_world_locatorW0\"));\n\n    //find joints lenght and create distance node\n    string $stretchy_distance = `shadingNode -n ($work_names[2]+\"_reParentIK_stretchy_distance\") -asUtility distanceBetween`;\n    connectAttr -f ($base_names[0]+\".worldMatrix[0]\") ($stretchy_distance+\".inMatrix1\");\n    connectAttr -f ($base_names[1]+\".worldMatrix[0]\") ($stretchy_distance+\".inMatrix2\");\n    float $joint_leghth_1 = `getAttr ($stretchy_distance+\".distance\")`;\n    connectAttr -f ($base_names[2]+\".worldMatrix[0]\") ($stretchy_distance+\".inMatrix1\");\n    float $joint_leghth_2 = `getAttr ($stretchy_distance+\".distance\")`;\n    float $joint_leghth_sum = $joint_leghth_1 + $joint_leghth_2;\n\n    connectAttr -f ($work_names[0]+\"_reParentIKlocator.worldMatrix[0]\") ($stretchy_distance+\".inMatrix1\");\n    connectAttr -f ($work_names[2]+\"_reParentIKlocator.worldMatrix[0]\") ($stretchy_distance+\".inMatrix2\");\n\n    //connect soft_ik\n    string $soft_IK_pma = `shadingNode -n ($work_names[2]+\"_reParentIK_soft_IK_pma\") -asUtility  plusMinusAverage`;\n    setAttr ($soft_IK_pma+\".operation\") 2;\n    setAttr ($soft_IK_pma+\".input1D[0]\") $joint_leghth_sum;\n    connectAttr -f ($work_names[2]+\"_reParentIKlocator.Soft_IK\") ($soft_IK_pma+\".input1D[1]\");\n\n    string $first_soft_IK_condition = `shadingNode -n ($work_names[2]+\"_reParentIK_soft_IK_first_condition\") -asUtility condition`;\n    setAttr ($first_soft_IK_condition+\".operation\") 2;\n    connectAttr -f ($stretchy_distance+\".distance\") ($first_soft_IK_condition+\".firstTerm\");\n    connectAttr -f ($soft_IK_pma+\".output1D\") ($first_soft_IK_condition+\".secondTerm\");\n    connectAttr -f ($stretchy_distance+\".distance\") ($first_soft_IK_condition+\".colorIfFalseR\");\n\n    string $second_soft_IK_condition = `shadingNode -n ($work_names[2]+\"_reParentIK_soft_IK_second_condition\") -asUtility condition`;\n    setAttr ($second_soft_IK_condition+\".operation\") 2;\n    setAttr ($second_soft_IK_condition+\".colorIfFalseR\") $joint_leghth_sum;\n    connectAttr -f ($work_names[2]+\"_reParentIKlocator.Soft_IK\") ($second_soft_IK_condition+\".firstTerm\");\n\n    string $soft_IK_pma_second = `shadingNode -n ($work_names[2]+\"_reParentIK_soft_IK_second_pma\") -asUtility plusMinusAverage`;\n    setAttr ($soft_IK_pma_second+\".operation\") 2;\n    connectAttr -f ($soft_IK_pma+\".output1D\") ($soft_IK_pma_second+\".input1D[1]\");\n    connectAttr -f ($stretchy_distance+\".distance\") ($soft_IK_pma_second+\".input1D[0]\");\n\n    string $soft_first_mult = `shadingNode -n ($work_names[2]+\"_reParentIK_soft_first_mult\") -asUtility multiplyDivide`;\n    setAttr ($soft_first_mult+\".operation\") 2;\n    connectAttr -f ($soft_IK_pma_second+\".output1D\") ($soft_first_mult+\".input1X\");\n\n    string $soft_non_zero = `shadingNode -n ($work_names[2]+\"_reParentIK_soft_non_zero\") -asUtility remapValue`;\n    connectAttr -f ($work_names[2]+\"_reParentIKlocator.Soft_IK\")  ($soft_non_zero+\".inputValue\");\n    connectAttr -f ($soft_non_zero+\".outValue\") ($soft_first_mult+\".input2X\");\n\n    string $soft_second_mult = `shadingNode -n ($work_names[2]+\"_reParentIK_soft_second_mult\") -asUtility multiplyDivide`;\n    setAttr ($soft_second_mult+\".input1X\") -1;\n    connectAttr -f ($soft_first_mult+\".outputX\") ($soft_second_mult+\".input2X\");\n\n    string $soft_third_mult = `shadingNode -n ($work_names[2]+\"_reParentIK_soft_third_mult\") -asUtility multiplyDivide`;\n    setAttr ($soft_third_mult+\".operation\") 3;\n    setAttr ($soft_third_mult+\".input1X\") `exp(1)`;\n    connectAttr -f ($soft_second_mult+\".outputX\") ($soft_third_mult+\".input2X\");\n\n    string $soft_fourth_mult = `shadingNode -n ($work_names[2]+\"_reParentIK_soft_fourth_mult\") -asUtility multiplyDivide`;\n    connectAttr -f ($work_names[2]+\"_reParentIKlocator.Soft_IK\") ($soft_fourth_mult+\".input1X\");\n    connectAttr -f ($soft_third_mult+\".outputX\") ($soft_fourth_mult+\".input2X\");\n\n    string $soft_IK_third_pma = `shadingNode -n ($work_names[2]+\"_reParentIK_soft_IK_third_pma\") -asUtility  plusMinusAverage`;\n    setAttr ($soft_IK_third_pma+\".operation\") 2;\n    setAttr ($soft_IK_third_pma+\".input1D[0]\") $joint_leghth_sum;\n    connectAttr -f ($soft_fourth_mult+\".outputX\") ($soft_IK_third_pma+\".input1D[1]\");\n    connectAttr -f ($soft_IK_third_pma+\".output1D\") ($second_soft_IK_condition+\".colorIfTrueR\");\n    connectAttr -f ($second_soft_IK_condition+\".outColorR\") ($first_soft_IK_condition+\".colorIfTrueR\");\n\n    string $soft_joints_scale_mult = `shadingNode -n ($work_names[2]+\"_reParentIK_soft_joints_scale_mult\") -asUtility multiplyDivide`;\n    setAttr ($soft_joints_scale_mult+\".operation\") 2;\n    connectAttr -f ($first_soft_IK_condition+\".outColorR\") ($soft_joints_scale_mult+\".input2X\");\n    connectAttr -f ($stretchy_distance+\".distance\") ($soft_joints_scale_mult+\".input1X\");\n\n    connectAttr -f ($soft_joints_scale_mult+\".outputX\") ($work_names[0]+\"_reParentIKJoint.scaleY\");\n    connectAttr -f ($soft_joints_scale_mult+\".outputX\") ($work_names[1]+\"_reParentIKJoint.scaleY\");\n\n    //connect stretchy\n    string $stretchy_blend = `shadingNode -n ($work_names[2]+\"_reParentIK_stretchy_blend\") -asUtility blendColors`;\n    setAttr ($stretchy_blend+\".color2\") -type double3 1 1 1 ;\n    connectAttr -f ($work_names[2]+\"_reParentIKlocator.Stretchy\") ($stretchy_blend+\".blender\");\n    connectAttr -f ($soft_joints_scale_mult+\".outputX\") ($stretchy_blend+\".color1R\");\n    connectAttr -f ($stretchy_blend+\".outputR\") ($work_names[0]+\"_reParentIKJoint_soft.scaleY\");\n    connectAttr -f ($stretchy_blend+\".outputR\") ($work_names[1]+\"_reParentIKJoint_soft.scaleY\");\n\n    string $offset_grp_dMatrix = `shadingNode -n ($work_names[1]+\"_reParentIK_offset_grp_dMatrix\") -asUtility decomposeMatrix`;\n    connectAttr -f ($work_names[1]+\"_reParentIK_offset_grp.parentInverseMatrix[0]\") ($offset_grp_dMatrix+\".inputMatrix\");\n    connectAttr -f ($offset_grp_dMatrix+\".outputScale\") ($work_names[1]+\"_reParentIK_offset_grp.scale\");\n\n    //constrain control to ik system\n    //constrain first control\n    aimConstraint -n ($work_names[0]+\"_reParentIKlocator_for_aim_aic\") -mo -weight 1 -aimVector 0 1 0 -upVector 0 0 1 -worldUpType \"object\" -worldUpObject ($work_names[1]+\"_reParentIKlocator_for_aim\") ($work_names[1]+\"_reParentIK_offset\") ($work_names[0]+\"_reParentIKlocator_for_aim\");\n    mxConstraint \"pointConstrain_mo\" 1 ($work_names[0]+\"_reParentIKoffset\") $base_names[0];\n    mxConstraint \"orientConstrain_mo\" 1 ($work_names[0]+\"_reParentIKlocator_for_aim\") $base_names[0];\n\n    //constrain second control\n    aimConstraint -n ($work_names[2]+\"_reParentIKlocator_for_aim_aic\") -mo -weight 1 -aimVector 0 -1 0 -upVector 0 0 1 -worldUpType \"object\" -worldUpObject ($work_names[1]+\"_reParentIKlocator_for_aim\") ($work_names[1]+\"_reParentIK_offset\") ($work_names[2]+\"_reParentIKlocator_for_aim\");\n    mxConstraint \"pointConstrain_mo\" 1 ($work_names[1]+\"_reParentIKoffset\") $base_names[1];\n    mxConstraint \"orientConstrain_mo\" 1 ($work_names[2]+\"_reParentIKlocator_for_aim\") $base_names[1];\n\n    //constrain third control\n    mxConstraint \"pointConstrain_mo\" 1 ($work_names[2]+\"_reParentIKJoint_soft\") $base_names[2];\n    mxConstraint \"orientConstrain_mo\" 1 ($work_names[2]+\"_reParentIKlocator\")   $base_names[2];\n\n    //     IK mode Design   ///\n    setAttr ($work_names[2]+\"_reParentIKlocatorShape.overrideColor\") 17;\n    setAttr ($work_names[2]+\"_reParentIKlocatorSphereShape.overrideColor\") 17;\n    setAttr ($work_names[2]+\"_reParentIKlocatorCubeShape.overrideColor\") 17;\n    setAttr ($work_names[2]+\"_reParentIKlocator.control_shape\") 2;\n\n    setAttr ($work_names[1]+\"_reParentIKPoleShape.overrideColor\") 13;\n    setAttr ($work_names[1]+\"_reParentIKPoleSphereShape.overrideColor\") 13;\n    setAttr ($work_names[1]+\"_reParentIKPoleCubeShape.overrideColor\") 13;\n\n    setAttr ($work_names[1]+\"_reParentIK_offset.control_shape\") 3;\n\n    //lock and hide\n    setAttr -lock 1 -keyable 0 ($work_names[1]+\"_reParentIKPole.rx\");\n    setAttr -lock 1 -keyable 0 ($work_names[1]+\"_reParentIKPole.ry\");\n    setAttr -lock 1 -keyable 0 ($work_names[1]+\"_reParentIKPole.rz\");\n    setAttr -lock 1 -keyable 0 ($work_names[1]+\"_reParentIKPole.sx\");\n    setAttr -lock 1 -keyable 0 ($work_names[1]+\"_reParentIKPole.sy\");\n    setAttr -lock 1 -keyable 0 ($work_names[1]+\"_reParentIKPole.sz\");\n    setAttr -lock 1 -keyable 0 ($work_names[1]+\"_reParentIKPole.v\");\n\n    setAttr -lock 1 -keyable 0 ($work_names[2]+\"_reParentIKlocator.sx\");\n    setAttr -lock 1 -keyable 0 ($work_names[2]+\"_reParentIKlocator.sy\");\n    setAttr -lock 1 -keyable 0 ($work_names[2]+\"_reParentIKlocator.sz\");\n    setAttr -lock 1 -keyable 0 ($work_names[2]+\"_reParentIKlocator.v\");\n\n    //create connection line\n    curve -n ($work_names[1]+\"_reParentIKPole_line\") -d 1 -p 0 0 0 -p 0 0 0 -k 0 -k 1 ;\n    string $shapeName[] = `listRelatives ($work_names[1]+\"_reParentIKPole_line\")`;\n    rename  $shapeName[0] ($work_names[1]+\"_reParentIKPole_lineShape\");\n    setAttr ($work_names[1]+\"_reParentIKPole_line.overrideEnabled\") 1;\n    setAttr ($work_names[1]+\"_reParentIKPole_line.overrideColor\") 3;\n    select -r ($work_names[1]+\"_reParentIKPole_line.cv[0]\");\n    cluster -n ($work_names[1]+\"_reParentIKPole_line_end\") -envelope 1;\n    select -r ($work_names[1]+\"_reParentIKPole_line.cv[1]\");\n    cluster -n ($work_names[1]+\"_reParentIKPole_line_start\") -envelope 1;\n    setAttr($work_names[1]+\"_reParentIKPole_line.overrideDisplayType\") 1;\n\n    parent ($work_names[1]+\"_reParentIKPole_line_endHandle\") ($work_names[1]+\"_reParentIKPole\") ;\n    xform -t 0 0 0 ($work_names[1]+\"_reParentIKPole_line_endHandle\");\n\n    parent ($work_names[1]+\"_reParentIKPole_line_startHandle\") ($work_names[1]+\"_reParentIK_offset\") ;\n    xform -t 0 0 0 ($work_names[1]+\"_reParentIKPole_line_startHandle\");\n\n    setAttr -l true ($work_names[1]+\"_reParentIKPole_line_endHandle.visibility\") 0;\n    setAttr -l true ($work_names[1]+\"_reParentIKPole_line_startHandle.visibility\") 0;\n\n    parent ($work_names[1]+\"_reParentIKPole_line\") ($work_names[0]+\"_reParentIK_grp\");\n    connectAttr -f ($work_names[1]+\"_reParentIKPole.Connection_line_vis\") ($work_names[1]+\"_reParentIKPole_lineShape.visibility\");\n    setAttr ($work_names[1]+\"_reParentIKPole.control_shape\") 3;\n\n    setAttr ($work_names[1]+\"_reParentIKPole_line.inheritsTransform\") 0;\n\n    //end of IK mode\n    setAttr ($soft_non_zero+\".outputMin\") 0.0001;\n\n    if ($ManualButton==1)\n    {\n        transfer_attributes ($work_names[2]+\"_reParentIKlocator\") ($work_names[2]+\"_reParent_manual_pivot\") \"forced\";\n\n        rename ($work_names[2]+\"_reParentIKlocator\") ($work_names[2]+\"_reParentIKlocator_base\");\n        rename ($work_names[2]+\"_reParent_manual_pivot\") ($work_names[2]+\"_reParentIKlocator\");\n\n        mxConstraint \"parentConstrain_mo\" 1 ($work_names[2]+\"_reParentIKlocator\") ($work_names[2]+\"_reParentIKlocator_base\");\n\n        setAttr -l false ($work_names[2]+\"_reParentIKlocator_base.visibility\");\n        setAttr -l true ($work_names[2]+\"_reParentIKlocator_base.visibility\") 0;\n\n        setAttr ($work_names[2]+\"_reParentIKlocator.control_shape\") 2;\n        setAttr ($work_names[2]+\"_reParentIKlocator.control_shape\") 2;\n\n        setAttr -l true -keyable false -channelBox false ($work_names[2]+\"_reParentIKlocator.visibility\") 1;\n        setAttr ($work_names[2]+\"_reParentIKlocatorShape.overrideColor\") 17;\n        setAttr ($work_names[2]+\"_reParentIKlocatorSphereShape.overrideColor\") 17;\n        setAttr ($work_names[2]+\"_reParentIKlocatorCubeShape.overrideColor\") 17;\n    }\n\n    if($SaveKeys==1)\n    {\n        RestoreControlKeysOnLocator ({($work_names[2]+\"_reParentIKlocator\")});\n        RestoreControlKeysOnLocator ({($work_names[1]+\"_reParentIK_offset\")});\n        RestoreControlKeysOnLocator ({($work_names[1]+\"_reParentIKPole\")});\n\n    }\n\n    select -r ($work_names[2]+\"_reParentIKlocator\");\n\n    //timer stop\n    float $totalTime = `timerX -startTime $startTime`;\n    print (\"Total reParent Time: \"+$totalTime+\" seconds\"+\"\\n\");\n\n    cycleCheck -e on;\n    cached_playback_on;\n}\n\nproc create_sets()\n{\n\tint $reConstrainButton = `checkBox -q -v reConstrainCheckBox`;\n\tint $IKButton = `checkBox -q -v IKCheckBox`;\n\tint $PinButton = `checkBox -q -v PinCheckBox`;\n    int $ManualButton = `checkBox -q -v ManualCheckBox`;\n    int $AimButton = `checkBox -q -v AimCheckBox`;\n\n    string $SelectedControls[] = `ls -sl`;\n\n    if(!`objExists \"reParent_sets\"`)\n    {\n        sets -em -name \"reParent_sets\";\n    }\n\n    if(`objExists \"All_Sessions_reParentControls_set\"`)\n    {\n        sets -edit -forceElement All_Sessions_reParentControls_set $SelectedControls;\n        sets -edit -fe  reParent_sets All_Sessions_reParentControls_set ;\n    }\n    else\n    {\n    \tsets -name \"All_Sessions_reParentControls_set\";\n    \tsets -edit -fe  reParent_sets All_Sessions_reParentControls_set ;\n    }\n\n\n    if(`objExists \"Last_Session_reParentControls_set\"`)\n    {\n       \tdelete Last_Session_reParentControls_set;\n       \tsets -name \"Last_Session_reParentControls_set\";\n        sets -edit -forceElement Last_Session_reParentControls_set $SelectedControls;\n        sets -edit -fe  reParent_sets Last_Session_reParentControls_set ;\n    }\n    else\n    {\n    \tsets -name \"Last_Session_reParentControls_set\";\n    \tsets -edit -fe reParent_sets Last_Session_reParentControls_set ;\n    }\n\n    select -cl;\n\n    if(`objExists \"Last_Session_reParentLocator_set\"`)\n    {\n    \tdelete Last_Session_reParentLocator_set;\n    \tsets -name \"Last_Session_reParentLocator_set\";\n    \tsets -edit -fe  reParent_sets Last_Session_reParentLocator_set ;\n    }\n    else\n    {\n        sets -name \"Last_Session_reParentLocator_set\";\n        sets -edit -fe reParent_sets Last_Session_reParentLocator_set ;\n    }\n\n    if(!`objExists \"All_Session_reParentLocator_set\"`)\n    {\n        sets -em -name \"All_Session_reParentLocator_set\";\n        sets -edit -fe  reParent_sets All_Session_reParentLocator_set ;\n    }\n\n    if ($AimButton==1)\n    {\n        if(!`objExists \"Aim_Session_reParentLocator_set\"`)\n        {\n            sets -em -name \"Aim_Session_reParentLocator_set\";\n            sets -edit -fe  reParent_sets Aim_Session_reParentLocator_set ;\n        }\n\n        if(!`objExists \"Aim_Session_group_name\"`)\n        {\n            sets -em -name \"Aim_Session_group_name\";\n            sets -edit -fe  reParent_sets Aim_Session_group_name ;\n        }\n\n    }\n}\n\nproc reParent_select_hierarchy()\n{\n    string $allSceneNurbes[];\n    string $currentShapeType;\n    string $CtrlByHierarchy[];\n\n    // find type of selection\n    string $currentCtrls[] = `ls -sl`;\n    select -r $currentCtrls[0];\n    pickWalk -d down;\n    string $currentShape[] = `ls -sl`;\n    $currentShapeType = `objectType $currentShape[0]`;\n\n    select -r $currentCtrls; select -hi;\n    $currentCtrls = `ls -sl`;\n\n    if( `objExists \"*Root_M\"`||`objExists \"*:Root_M\"`||`objExists \"*DeformationSystem\"`||`objExists \"*:DeformationSystem\"`||`objExists \"*MotionSystem\"`||`objExists \"*:MotionSystem\"`||`objExists \"*FitSkeleton\"`||`objExists \"*:FitSkeleton\"`)\n    {$currentShapeType = \"nurbsCurve\";}\n\n    $allSceneNurbes = `listTransforms (\"-type \"+$currentShapeType)`;\n\n    string $Stuff[] = stringArrayRemove($allSceneNurbes, $currentCtrls);\n    $CtrlByHierarchy = stringArrayRemove($Stuff, $currentCtrls);\n    select -r $CtrlByHierarchy;\n}\n\nproc BakeAndDelete_reParentInit()\n{\n    if(!`objExists \"reParent_sets\"`)\n    {\n        confirmDialog -b \"Ok\" -t \"Oooops..\" -m \"    There is nothing to remove    \";\n    }\n    else\n    {\n        if(`objExists \"DeleteSelection_set\"`) {delete DeleteSelection_set;}\n        if(`objExists \"DeleteLocatorsSelection_set\"`) {delete DeleteLocatorsSelection_set;}\n        if(`objExists \"DeleteGroupSelection_set\"`) {delete DeleteGroupSelection_set;}\n\n        sets -em -name \"DeleteSelection_set\";\n        sets -em -name \"DeleteLocatorsSelection_set\";\n        sets -em -name \"DeleteGroupSelection_set\";\n        sets -edit -fe  reParent_sets DeleteSelection_set;\n        sets -edit -fe  reParent_sets DeleteLocatorsSelection_set;\n        sets -edit -fe  reParent_sets DeleteGroupSelection_set;\n\n        string $SelectedControls[] = `ls -sl`;\n\n        if (`size($SelectedControls)` == 0)\n        {   // empty selection - BAKE ALL\n\n            string $SelectedControls[] = `sets -q All_Sessions_reParentControls_set`;\n            sets -edit -forceElement DeleteSelection_set $SelectedControls;\n\n            string $SelectedLocators[] = `sets -q All_Session_reParentLocator_set`;\n            sets -edit -forceElement DeleteLocatorsSelection_set $SelectedLocators;\n\n            BakeAndDelete_reParent;\n\n            if(`objExists \"All_Session_reParentLocator_set\"`) {select -r All_Session_reParentLocator_set; delete;}\n            if(`objExists \"reParent_sets\"`) {delete reParent_sets;}\n            if(`objExists \"All_Sessions_reParentControls_set\"`) {delete All_Sessions_reParentControls_set;}\n            if(`objExists \"Last_Session_reParentControls_set\"`) {delete Last_Session_reParentControls_set;}\n            if(`objExists \"Aim_Session_reParentLocator_set\"`) {delete Aim_Session_reParentLocator_set;}\n\n            if(`objExists \"DeleteLocatorsSelection_set\"`) {delete DeleteLocatorsSelection_set;}\n            if(`objExists \"DeleteSelection_set\"`) {delete DeleteSelection_set;}\n\n            if(`objExists \"*_reParent_locator_grp\"`)   {delete \"*_reParent_locator_grp\";}\n            if(`objExists \"*:*_reParent_locator_grp\"`)   {delete \"*:*ReParent_locator_grp\";}\n            if(`objExists \"*_reParentIK_grp\"`)   {delete \"*_reParentIK_grp\";}\n            if(`objExists \"*:*_reParentIK_grp\"`) {delete \"*:*_reParentIK_grp\";}\n            if(`objExists \"*_reParent_grp\"`)     {delete \"*_reParent_grp\";}\n            if(`objExists \"*:*_reParent_grp\"`)   {delete \"*:*_reParent_grp\";}\n            if(`objExists \"*_reParent_aim_grp\"`)     {delete \"*_reParent_aim_grp\";}\n            if(`objExists \"*:*_reParent_aim_grp\"`)   {delete \"*:*_reParent_aim_grp\";}\n            if(`objExists \"*_reParent_spline_grp\"`)     {delete \"*_reParent_spline_grp\";}\n            if(`objExists \"*:*_reParent_spline_grp\"`)   {delete \"*:*_reParent_spline_grp\";}\n        }\n\n        else\n        {   // many objects\n            string $SelectedControls[] = `ls -sl`;\n\n            // reParent locator ---> Base Controls\n\n            for ($SelCtrl in $SelectedControls)\n            {\n                //locator ---> Delete Set\n                string $LocOrNot = `sets -im All_Session_reParentLocator_set $SelCtrl`;\n\n                if ($LocOrNot==1)\n                {\n                    string $baseControls;\n\n                    if (`getAttr ($SelCtrl+\".reParent_Type\")` == \"IK\"||`getAttr ($SelCtrl+\".reParent_Type\")` == \"IK_manual\"||`getAttr ($SelCtrl+\".reParent_Type\")` == \"Spline\")\n                    {\n                        $baseControls =  `getAttr ($SelCtrl+\".reParent_controls_chain\")`;\n                    }\n                    else\n                    {\n                        $baseControls =  `getAttr ($SelCtrl+\".reParent_controlName\")`;\n                    }\n\n                    string $arrayControls[] = stringToStringArray($baseControls, \" \");\n\n                    for ($EachControl in $arrayControls)\n                    {\n                        string $locatorNames[] = define_work_names ({$EachControl});\n                        $LocatorName = $locatorNames[0];\n\n                        if(`objExists $EachControl`)\n                        {sets -edit -forceElement DeleteSelection_set $EachControl;}\n\n                        if(`objExists ($SelCtrl+\"_grp\")`)\n                        {sets -edit -forceElement DeleteGroupSelection_set ($SelCtrl+\"_grp\");}\n                        if(`objExists ($LocatorName+\"_reParent_aim_grp\")`)\n                        {sets -edit -forceElement DeleteGroupSelection_set ($LocatorName+\"_reParent_aim_grp\");}\n                        if(`objExists ($LocatorName+\"_reParentIK_grp\")`)\n                        {sets -edit -forceElement DeleteGroupSelection_set ($LocatorName+\"_reParentIK_grp\");}\n                        if(`objExists ($LocatorName+\"_reParent_grp\")`)\n                        {sets -edit -forceElement DeleteGroupSelection_set ($LocatorName+\"_reParent_grp\");}\n                        if(`objExists ($LocatorName+\"_reParent_spline_grp\")`)\n                        {sets -edit -forceElement DeleteGroupSelection_set ($LocatorName+\"_reParent_spline_grp\");}\n                    }\n                    sets -edit -forceElement DeleteLocatorsSelection_set $SelCtrl;\n                }\n\n                //Control ---> Delete Set\n                global string $LocatorName;\n                if(!`objExists ($SelCtrl+\"_reParent_locator\")`)\n                {\n                    string $locatorNames[] = define_work_names ({$SelCtrl});\n                    $LocatorName = $locatorNames[0];\n                }\n                else\n                {\n                    $LocatorName = $SelCtrl;\n                }\n\n                string $ContOrNot = `sets -im All_Sessions_reParentControls_set $SelCtrl`;\n                if ($ContOrNot==1)\n                {\n                    sets -edit -forceElement DeleteSelection_set $SelCtrl;\n                    if(`objExists ($LocatorName+\"_reParent_locator_grp\")`)\n                    {sets -edit -forceElement DeleteGroupSelection_set ($LocatorName+\"_reParent_locator_grp\");}\n                    if(`objExists ($LocatorName+\"_reParent_locator\")`)\n                    {sets -edit -forceElement DeleteLocatorsSelection_set ($LocatorName+\"_reParent_locator\");}\n                    if(`objExists ($LocatorName+\"_reParent_aim_grp\")`)\n                    {sets -edit -forceElement DeleteLocatorsSelection_set ($LocatorName+\"_reParent_aim_grp\");}\n                }\n            }\n            BakeAndDelete_reParent;\n        }\n    }\n    delete_unused_nodes;\n}\n\nproc BakeAndDelete_reParent()\n{\n\tint $SaveKeys = `checkBox -query -v SaveKeys`;\n \tint $DelRedMode = `checkBox -query -v DelRed`;\n    int $KeepKeys = `checkBox -query -v KeepKeys`;\n\tint $onLayerReParentMode = `checkBox -query -v onLayerReParentMode`;\n\n    if(`objExists \"DeleteGroupSelection_set\"`) {select -r DeleteGroupSelection_set;}\n    string $SelectedGroups[] = `ls -sl`;\n\n    if(`objExists \"DeleteSelection_set\"`) {select -r DeleteSelection_set;}\n    string $SelectedControls[] = `ls -sl`;\n\n    if(`objExists \"DeleteLocatorsSelection_set\"`) {select -r DeleteLocatorsSelection_set;}\n    string $SelectedLocators[] = `ls -sl`;\n\n    int $currentL =`playbackOptions -q -ast`;\n    int $currentR =`playbackOptions -q -aet`;\n\n    int $currentL_region =`playbackOptions -q -min`;\n    int $currentR_region =`playbackOptions -q -max`;\n\n    int $currentLKeep, $currentRKeep, $currentL_int, $currentR_int;\n\n    if (size($SelectedControls)!=0)\n    {\n\n        refresh -suspend 1;\n        bakeResults\n        -t ($currentL_region+\":\"+$currentR_region)\n        -simulation 1\n        -sampleBy 1\n        -disableImplicitControl 1\n        -preserveOutsideKeys $KeepKeys\n        -sparseAnimCurveBake 0\n        -removeBakedAttributeFromLayer 0\n        -removeBakedAnimFromLayer 0\n        -bakeOnOverrideLayer 0\n        -minimizeRotation 1\n        -controlPoints 0\n        -shape 0\n        -at \"tx\"\n        -at \"ty\"\n        -at \"tz\"\n        -at \"rx\"\n        -at \"ry\"\n        -at \"rz\"\n        $SelectedControls;\n        refresh -suspend 0; ogs -reset;\n\n        if ($DelRedMode == 1&&$SaveKeys==0)\n        {\n            reParentDeleteRedundant;\n        }\n\n        if($SaveKeys==1)\n        {\n            RestoreLocatorKeysOnControl;\n        }\n\n        filterCurve $SelectedControls;\n\n        if(`objExists \"DeleteLocatorsSelection_set\"`) {select -r DeleteLocatorsSelection_set; if(size(`sets -q DeleteLocatorsSelection_set`)!=0) {delete;}}\n        if(`objExists \"DeleteGroupSelection_set\"`) {select -r DeleteGroupSelection_set; if(size(`sets -q DeleteGroupSelection_set`)!=0) {delete;}}\n        if(`objExists \"DeleteLocatorsSelection_set\"`) {delete DeleteLocatorsSelection_set;}\n        if(`objExists \"DeleteSelection_set\"`) {delete DeleteSelection_set;}\n    }\n\n    if (size($SelectedControls)==0&&size($SelectedGroups)==0)\n    {\n        string $BakeOrNot = `confirmDialog -title \"Oooops..\" -message \"                Selected control wasn't reParented \\n Do you want to BAKE AND DELETE ALL reParent locators?\"\n         -button \"  BAKE AND DELETE ALL  \"\n         -button \"No\"\n         -defaultButton \"  BAKE AND DELETE ALL  \"\n         -cancelButton \"No\" -dismissString \"No\"`;\n\n         if( $BakeOrNot == \"  BAKE AND DELETE ALL  \")\n         {\n             select -cl;\n             BakeAndDelete_reParentInit;\n             if(`objExists \"DeleteLocatorsSelection_set\"`) {select -r DeleteLocatorsSelection_set; if(size(`sets -q DeleteGroupSelection_set`)!=0) {delete;}}\n             if(`objExists \"DeleteGroupSelection_set\"`) {select -r DeleteGroupSelection_set; if(size(`sets -q DeleteGroupSelection_set`)!=0) {delete;}}\n             if(`objExists \"DeleteLocatorsSelection_set\"`) {delete DeleteLocatorsSelection_set;}\n             if(`objExists \"DeleteSelection_set\"`) {delete DeleteSelection_set;}\n         }\n         else\n         {\n             if(`objExists \"DeleteLocatorsSelection_set\"`) {delete DeleteLocatorsSelection_set;}\n             if(`objExists \"DeleteGroupSelection_set\"`) {delete DeleteGroupSelection_set;}\n             if(`objExists \"DeleteLocatorsSelection_set\"`) {delete DeleteLocatorsSelection_set;}\n             if(`objExists \"DeleteSelection_set\"`) {delete DeleteSelection_set;}\n         }\n\t}\n\n    if (size($SelectedControls)==0&&size($SelectedGroups)!=0)\n    {\n         if(`objExists \"DeleteLocatorsSelection_set\"`) {select -r DeleteLocatorsSelection_set; if(size(`sets -q DeleteLocatorsSelection_set`)!=0) {delete;}}\n         if(`objExists \"DeleteGroupSelection_set\"`) {select -r DeleteGroupSelection_set; if(size(`sets -q DeleteGroupSelection_set`)!=0) {delete;}}\n         if(`objExists \"DeleteLocatorsSelection_set\"`) {delete DeleteLocatorsSelection_set;}\n         if(`objExists \"DeleteSelection_set\"`) {delete DeleteSelection_set;}\n    }\n\n    //delete\n    for($selControl in $SelectedControls)\n    {\n        if(`objExists $selControl`)\n        {\n            //reParent constrains\n            string $nodes[] = `listRelatives -children -type \"parentConstraint\" -type \"pointConstraint\" -type \"orientConstraint\" -type \"aimConstraint\" $selControl`;\n            for ($node in $nodes)\n            {\n                if (`gmatch $node \"*reParent*\"`==1)\n                {\n                    catchQuiet (`delete $node`);\n                }\n            }\n\n            //reParent attributes\n            string $attrs[] = `listAttr $selControl`;\n            for ($attr in $attrs)\n            {\n                if (`gmatch $attr \"*reParent*\"`==1)\n                {\n                    string $connected[] = `listConnections -d 1 -s 0 ($selControl+\".\"+$attr)`;\n                    if (size($connected)==0)\n                    {\n                        catchQuiet (`deleteAttr -attribute $attr $selControl`);\n                    }\n                }\n            }\n        }\n    }\n\n    delete_unused_nodes;\n}\n\nglobal proc BakeKeysOnLocator()\n{\n    int $currentLKeep, $currentRKeep, $currentL_int, $currentR_int;\n\tint $onLayerReParentMode = `checkBox -query -v onLayerReParentMode`;\n\tint $PinButton = `checkBox -q -v PinCheckBox`;\n\tint $MakeGlobalButton = `checkBox -q -v MakeGlobalCheckBox`;\n    int $ManualButton = `checkBox -q -v ManualCheckBox`;\n\tint $SaveKeys = `checkBox -query -v SaveKeys`;\n\tint $KeepKeys = `checkBox -query -v KeepKeys`;\n\n    int $currentL =`playbackOptions -q -ast`;\n    int $currentR =`playbackOptions -q -aet`;\n    int $currentL_region =`playbackOptions -q -min`;\n    int $currentR_region =`playbackOptions -q -max`;\n\n    string $SelectedLocators[] = `ls -sl`;\n\n    if ($PinButton == 0)\n    {\n        refresh -suspend 1;\n        bakeResults\n        -t ($currentL_region+\":\"+$currentR_region)\n        -simulation 1\n        -sampleBy 1\n        -disableImplicitControl 1\n        -preserveOutsideKeys 1\n        -sparseAnimCurveBake 0\n        -removeBakedAttributeFromLayer 0\n        -removeBakedAnimFromLayer 0\n        -bakeOnOverrideLayer $onLayerReParentMode\n        -minimizeRotation 1\n        -controlPoints 0\n        -shape 0\n        -at \"tx\"\n        -at \"ty\"\n        -at \"tz\"\n        -at \"rx\"\n        -at \"ry\"\n        -at \"rz\"\n        $SelectedLocators;\n        filterCurve $SelectedLocators;\n        refresh -suspend 0; ogs -reset;\n    }\n\n    if($SaveKeys==1)\n    {\n        for ($Sel in $SelectedLocators)\n        {\n            RestoreControlKeysOnLocator ({$Sel});\n\n            //Define Blocking Step Mode\n            string $baseControls =  `getAttr ($Sel+\".reParent_controlName\")`;\n            string $arrayControls[] = stringToStringArray($baseControls, \" \");\n            string $alltangents[] = `keyTangent  -q -outTangentType  $arrayControls[0]`;\n            string $alltangents_removeDuplicates[] = stringArrayRemoveDuplicates($alltangents);\n\n            if (size($alltangents_removeDuplicates)==1&&$alltangents_removeDuplicates[0]==\"step\")\n        \t{\n                select -r $Sel;\n                selectKey -r -k;\n                keyTangent -ott step;\n            }\n        }\n    }\n\n    if(`objExists \"TempParentConst*\"`) {delete \"TempParentConst*\";}\n    if(`objExists \"TempAimConst*\"`) {delete \"TempAimConst*\";}\n\n    for ($sel in $SelectedLocators)\n    {\n        if(`objExists ($sel+\"_com_pointConstraint*\")`) {delete ($sel+\"_com_pointConstraint*\");}\n        if(`objExists ($sel+\"_com_orientConstraint*\")`) {delete ($sel+\"_com_orientConstraint*\");}\n        string $list_all_connections[] = `listRelatives -type \"parentConstraint\" $sel`;\n        if (size($list_all_connections)!=0){delete $list_all_connections;}\n    }\n\n    delete_unused_nodes;\n}\n\nproc reParentDeleteRedundant()\n{\n    $SelectedControls = `ls -sl`;\n    selectKey -r -k;\n    string $selectedCurves[] = `keyframe -selected -q -name`;\n\n    for ($currentAnimCurve in $selectedCurves)\n    {\n    \tfloat $allKeys[] = `keyframe  -q -timeChange $currentAnimCurve`;\n        $valArray = `keyframe -q -valueChange $currentAnimCurve`;\n        $keysSize = `size($allKeys)`;\n\n        for ($s=1; $s<$keysSize-1; ++$s )\n        {if ($valArray[$s] == $valArray[$s-1]&&$valArray[$s] == $valArray[$s+1]) {cutKey -time $allKeys[$s] -clear $currentAnimCurve;}}\n    }\n}\n\nproc string[] define_work_names (string $base_names[])\n{\n\t//define real names\n    string $clean_names[];\n    string $clean_names_namespace[];\n    string $current_namespace[];\n    string $current_path[];\n    string $add_namespace[];\n    string $clean_name;\n\n    for ($sel in $base_names)\n    {\n        clear $current_path $clean_names_namespace $add_namespace;\n\n        tokenize $sel \"|\" $current_path;\n        for ($element in $current_path)\n        {\n            tokenize $element \":\" $current_namespace;\n            stringArrayInsertAtIndex( 10000, $clean_names_namespace, $current_namespace[size($current_namespace)-1] );\n        }\n        tokenize $current_path[0] \":\" $add_namespace;\n        stringArrayRemoveAtIndex((size($add_namespace)-1), $add_namespace);\n        string $first_name = stringArrayToString($add_namespace, \"_\");\n        stringArrayInsertAtIndex( 0, $clean_names_namespace, $first_name );\n        if ($clean_names_namespace[0] == \"\")\n        {\n              stringArrayRemoveAtIndex(0, $clean_names_namespace);\n        }\n        $clean_name = stringArrayToString($clean_names_namespace, \"_\");\n        stringArrayInsertAtIndex( 10000, $clean_names, $clean_name);\n    }\n    return $clean_names;\n}\n\nproc define_control_keys(string $object, string $locator)\n{\n    string $allKeysAllCurvesString[];\n    string $allKeysAllCurvesStringClean[];\n    clear  $allKeysAllCurvesStringClean;\n\n    float $all_keys_float[] = `keyframe -q -timeChange $object`;\n    string $all_keys_string = floatArrayToString($all_keys_float, \" \");\n\n    $array = stringToStringArray($all_keys_string, \" \");\n    $allKeysAllCurvesString = stringArrayRemoveDuplicates($array);\n\n    //sorting\n \tfor ($timeKey in $allKeysAllCurvesString)\n \t{\n \t    setKeyframe -time $timeKey ($locator+\".ghosting\");\n \t}\n\n    float $all_keys_sorted_float[] = `keyframe -q -timeChange ($locator+\".ghosting\")`;\n    string $all_keys_sorted_string = floatArrayToString($all_keys_sorted_float, \" \");\n    string $all_keys_sorted_string_array[] = stringToStringArray($all_keys_sorted_string, \" \");\n\n    //to x.xx\n    for ($timeKey in $all_keys_sorted_string_array)\n    {\n        string $parts[];\n        tokenize $timeKey \".\" $parts;\n        if (`size($parts)`>1)\n        {\n            string $cleanPArt = startString($parts[1], 2);\n            string $cleanNumber = ($parts[0]+\".\"+$cleanPArt);\n            stringArrayInsertAtIndex( 10000, $allKeysAllCurvesStringClean, $cleanNumber );\n        }\n        else{stringArrayInsertAtIndex( 10000, $allKeysAllCurvesStringClean, $timeKey );}\n    }\n\n    $allKeysAllCurvesStringClean = stringArrayRemoveDuplicates($allKeysAllCurvesStringClean);\n    $allKeysAllCurvesStringCleanString = stringArrayToString($allKeysAllCurvesStringClean, \" \");\n\n    setAttr -type \"string\" ($locator+\".reParent_ControlKeys\") $allKeysAllCurvesStringCleanString;\n    cutKey -cl -t \":\" -f \":\" -at \"ghosting\" $locator;\n}\n\nproc RestoreControlKeysOnLocator(string $SelectedControls[])\n{\n    for ($SelCtrl in $SelectedControls)\n    {\n        global string $LocatorName;\n        if(!`objExists ($SelCtrl+\"_reParent_locator\")`)\n        {\n            string $locatorNames[] = define_work_names ({$SelCtrl});\n            $LocatorName = $locatorNames[0];\n        }\n        else\n        {\n            $LocatorName = $SelCtrl;\n        }\n\n        select -r $SelCtrl;\n        selectKey -r -k;\n        string $selectedCurves[] = `keyframe -selected -q -name`;\n\n        string $allKeysAllCurvesStringCleanString =  `getAttr ($LocatorName+\".reParent_ControlKeys\")`;\n        string $allKeysAllCurvesStringClean[] = stringToStringArray($allKeysAllCurvesStringCleanString, \" \");\n\n        for ($timeKey in $allKeysAllCurvesStringClean)\n        {setKeyframe -insert -time $timeKey $selectedCurves;}\n\n        select -r $SelCtrl;\n        selectKey -r -k;\n        $selectedCurves = `keyframe -selected -q -name`;\n\n        for ($unselectCurve in $selectedCurves)\n        {\n             for ($unselectCurveKey in $allKeysAllCurvesStringClean)\n             {\n                  float $timeFloat = $unselectCurveKey;\n                  selectKey -rm -k -t $timeFloat $unselectCurve;\n             }\n        }\n\n        if (size($allKeysAllCurvesStringCleanString)>0)\n            {\n                cutKey -animation keys -clear;\n            }\n    }\n}\n\nproc RestoreLocatorKeysOnControl()\n{\n    string $SelectedControls[]=`sets -q DeleteLocatorsSelection_set`;\n    string $baseControls;\n\n    for ($SelCtrl in $SelectedControls)\n    {\n        if(`getAttr ($SelCtrl+\".reParent_Type\")` == \"IK\")\n        {\n            $baseControls =  `getAttr ($SelCtrl+\".reParent_controls_chain\")`;\n        }\n        else\n        {\n            $baseControls =  `getAttr ($SelCtrl+\".reParent_controlName\")`;\n        }\n\n        string $arrayControls[] = stringToStringArray($baseControls, \" \");\n\n        for ($baseControl in $arrayControls)\n        {\n            select -r $baseControl;\n            selectKey -r -k;\n            string $selectedCurves[] = `keyframe -selected -q -name`;\n\n            string $allKeysAllCurvesStringCleanString =  `getAttr ($SelCtrl+\".reParent_ControlKeys\")`;\n            string $allKeysAllCurvesStringClean[] = stringToStringArray($allKeysAllCurvesStringCleanString, \" \");\n\n            for ($timeKey in $allKeysAllCurvesStringClean)\n            {setKeyframe -insert -time $timeKey $selectedCurves;}\n\n            select -r $baseControl;\n            selectKey -r -k;\n            $selectedCurves = `keyframe -selected -q -name`;\n\n            for ($unselectCurve in $selectedCurves)\n            {\n                 for ($unselectCurveKey in $allKeysAllCurvesStringClean)\n                 {\n                      float $timeFloat = $unselectCurveKey;\n                      selectKey -rm -k -t $timeFloat $unselectCurve;\n                 }\n            }\n\n            if (size($allKeysAllCurvesStringCleanString)>0)\n            {\n                cutKey -animation keys -clear;\n            }\n        }\n    }\n}\n\nproc checkbox_pin_on()\n{\n/*\n    checkBox -e -en 0 AimCheckBox;\n    checkBox -e -en 0 MakeGlobalCheckBox;\n    checkBox -e -en 0 IKCheckBox;\n    checkBox -e -en 0 IKCheckLocalBox;\n    checkBox -e -en 0 ManualCheckBox;\n    checkBox -e -en 0 reConstrainCheckBox;\n    checkBox -e -en 0 onLayerReParentMode;\n    checkBox -e -en 0 KeepKeys;\n    checkBox -e -en 0 SaveKeys;\n    checkBox -e -en 0 CollisionCheckBox;\n*/\n}\n\nproc checkbox_pin_off()\n{\n    /*\n    checkBox -e -en 1 AimCheckBox;\n    checkBox -e -en 1 MakeGlobalCheckBox;\n    checkBox -e -en 1 IKCheckBox;\n    checkBox -e -en 1 IKCheckLocalBox;\n    checkBox -e -en 1 ManualCheckBox;\n    checkBox -e -en 1 reConstrainCheckBox;\n    checkBox -e -en 1 onLayerReParentMode;\n    checkBox -e -en 1 KeepKeys;\n    checkBox -e -en 1 SaveKeys;\n    checkBox -e -en 1 CollisionCheckBox;\n    */\n}\n\nproc checkbox_aim_on()\n{\n\n    checkBox -e -en 0 MakeGlobalCheckBox;\n    checkBox -e -en 0 IKCheckBox;\n    checkBox -e -en 0 IKCheckLocalBox;\n    checkBox -e -en 0 ManualCheckBox;\n    checkBox -e -en 0 reConstrainCheckBox;\n    checkBox -e -en 0 CollisionCheckBox;\n    checkBox -e -en 0 SplineCheckBox;\n}\n\nproc checkbox_aim_off()\n{\n\n    checkBox -e -en 1 MakeGlobalCheckBox;\n    checkBox -e -en 1 IKCheckBox;\n    checkBox -e -en 1 IKCheckLocalBox;\n    checkBox -e -en 1 ManualCheckBox;\n    checkBox -e -en 1 reConstrainCheckBox;\n    checkBox -e -en 1 CollisionCheckBox;\n    checkBox -e -en 1 SplineCheckBox;\n}\n\nproc checkbox_global_on()\n{\n    if (`checkBox -q -v IKCheckLocalBox`==0)\n    {\n\n        checkBox -e -en 0 AimCheckBox;\n        checkBox -e -en 0 IKCheckBox;\n        checkBox -e -en 0 IKCheckLocalBox;\n//        checkBox -e -en 0 reConstrainCheckBox;\n        checkBox -e -en 0 CollisionCheckBox;\n//        checkBox -e -v 0 reConstrainCheckBox;\n        checkBox -e -en 0 SplineCheckBox;\n\n    }\n\n}\n\nproc checkbox_global_off()\n{\n    if (`checkBox -q -v ManualCheckBox`==0)\n    {\n        checkBox -e -en 1 AimCheckBox;\n        checkBox -e -en 1 SplineCheckBox;\n        checkBox -e -en 1 IKCheckBox;\n        checkBox -e -en 1 IKCheckLocalBox;\n        checkBox -e -en 1 CollisionCheckBox;\n    }\n\n    if (`checkBox -q -v ManualCheckBox`==1)\n    {\n        checkbox_manual_on;\n\n    }\n\n    if (`checkBox -q -v IKCheckLocalBox`==1)\n    {\n        checkbox_IK_local_on;\n    }\n\n    if (`checkBox -q -v reConstrainCheckBox`==1)\n    {\n        checkbox_reConstrain_on;\n    }\n}\n\nproc checkbox_IK_on()\n{\n\n    checkBox -e -en 0 AimCheckBox;\n    checkBox -e -en 0 SplineCheckBox;\n    checkBox -e -en 0 MakeGlobalCheckBox;\n    checkBox -e -v 0 MakeGlobalCheckBox;\n\n    checkBox -e -en 1 ManualCheckBox;\n    checkBox -e -en 0 reConstrainCheckBox;\n    checkBox -e -en 0 CollisionCheckBox;\n}\n\nproc checkbox_IK_off()\n{\n    if (`checkBox -q -v ManualCheckBox`==0)\n    {\n\n        checkBox -e -en 1 AimCheckBox;\n        checkBox -e -en 1 SplineCheckBox;\n        checkBox -e -en 1 MakeGlobalCheckBox;\n        checkBox -e -en 1 ManualCheckBox;\n        checkBox -e -en 1 reConstrainCheckBox;\n        checkBox -e -v  0 IKCheckLocalBox;\n        checkBox -e -en 1 CollisionCheckBox;\n    }\n    else\n    {\n        checkbox_manual_on;\n        checkBox -e -v 0 IKCheckLocalBox;\n    }\n}\n\nproc checkbox_IK_local_on()\n{\n    checkBox -e -en 0 AimCheckBox;\n    checkBox -e -en 0 SplineCheckBox;\n    checkBox -e -en 1 MakeGlobalCheckBox;\n    checkBox -e -en 1 -v 1 IKCheckBox;\n    checkBox -e -en 1 ManualCheckBox;\n    checkBox -e -en 0 reConstrainCheckBox;\n    checkBox -e -en 0 CollisionCheckBox;\n}\n\nproc checkbox_IK_local_off()\n{\n    checkBox -e -en 0 MakeGlobalCheckBox;\n    checkBox -e -v 0 MakeGlobalCheckBox;\n}\n\nproc checkbox_manual_on()\n{\n    //work\n    checkBox -e -en 1 IKCheckBox;\n    checkBox -e -en 1 IKCheckLocalBox;\n//    checkBox -e -en 1 MakeGlobalCheckBox;\n    checkBox -e -en 1 reConstrainCheckBox;\n\n    //not work\n    checkBox -e -en 0 AimCheckBox;\n    checkBox -e -en 0 CollisionCheckBox;\n\n    //work with IK\n    if (`checkBox -q -v IKCheckBox`==1)\n    {\n        checkBox -e -en 0 reConstrainCheckBox;\n\n        if (`checkBox -q -v IKCheckLocalBox`==0)\n        {\n            checkBox -e -en 0 MakeGlobalCheckBox;\n            checkBox -e -v 0 MakeGlobalCheckBox;\n        }\n    }\n\n    if (`checkBox -q -v SplineCheckBox`==1)\n    {\n        checkBox -e -en 0 reConstrainCheckBox;\n        checkBox -e -en 0 IKCheckBox;\n        checkBox -e -en 0 IKCheckLocalBox;\n    }\n\n    if (`checkBox -q -v reConstrainCheckBox`==1)\n    {\n        checkBox -e -en 0 IKCheckBox;\n        checkBox -e -en 0 IKCheckLocalBox;\n    }\n\n    if (`checkBox -q -v MakeGlobalCheckBox`==1)\n    {\n        if (`checkBox -q -v IKCheckLocalBox`==1)\n        {\n            checkBox -e -en 0 reConstrainCheckBox;\n        }\n        else\n        {\n            checkBox -e -en 0 IKCheckBox;\n            checkBox -e -en 0 IKCheckLocalBox;\n        }\n    }\n\n    if (`checkBox -q -v IKCheckBox`==1)\n    {\n        checkBox -e -en 0 reConstrainCheckBox;\n        //checkBox -e -en 0 MakeGlobalCheckBox;\n    }\n}\n\nproc checkbox_manual_off()\n{\n    if (`checkBox -q -v reConstrainCheckBox`==1)\n    {\n        checkbox_reConstrain_on;\n        checkBox -e -en 0 IKCheckBox;\n    }\n\n    if (`checkBox -q -v SplineCheckBox`==1)\n    {\n        checkbox_spline_on;\n        checkBox -e -en 0 MakeGlobalCheckBox;\n    }\n\n    if (`checkBox -q -v MakeGlobalCheckBox`==1)\n    {\n        checkbox_global_on;\n        // checkBox -e -v 0 reConstrainCheckBox;\n      //  checkBox -e -en 0 IKCheckBox;\n    }\n\n    if (`checkBox -q -v IKCheckLocalBox`==1)\n    {\n          checkbox_IK_local_on;\n//        checkBox -e -v 0 MakeGlobalCheckBox;\n//        checkBox -e -v 0 reConstrainCheckBox;\n    }\n\n    if (`checkBox -q -v MakeGlobalCheckBox`==0&&`checkBox -q -v reConstrainCheckBox`==0&&`checkBox -q -v IKCheckBox`==0&&`checkBox -q -v SplineCheckBox`==0)\n    {\n        checkBox -e -en 1 AimCheckBox;\n        checkBox -e -en 1 IKCheckBox;\n        checkBox -e -en 1 IKCheckLocalBox;\n        checkBox -e -en 1 CollisionCheckBox;\n        checkBox -e -en 1 reConstrainCheckBox;\n        checkBox -e -en 1 MakeGlobalCheckBox;\n    }\n}\n\nproc checkbox_reConstrain_on()\n{\n    checkBox -e -en 0 AimCheckBox;\n    checkBox -e -en 0 SplineCheckBox;\n    checkBox -e -en 0 IKCheckBox;\n    checkBox -e -en 0 IKCheckLocalBox;\n//    checkBox -e -en 0 MakeGlobalCheckBox;\n    checkBox -e -en 0 CollisionCheckBox;\n//    checkBox -e -v 0 MakeGlobalCheckBox;\n}\n\nproc checkbox_reConstrain_off()\n{\n    if (`checkBox -q -v ManualCheckBox`==0)\n    {\n        checkBox -e -en 1 AimCheckBox;\n        checkBox -e -en 1 SplineCheckBox;\n        checkBox -e -en 1 IKCheckBox;\n        checkBox -e -en 1 IKCheckLocalBox;\n        checkBox -e -en 1 MakeGlobalCheckBox;\n        checkBox -e -en 1 CollisionCheckBox;\n    }\n\n    if (`checkBox -q -v ManualCheckBox`==1)\n    {\n        checkbox_manual_on;\n    }\n\n    if (`checkBox -q -v MakeGlobalCheckBox`==1)\n    {\n        checkbox_global_on;\n    }\n}\n\nproc checkbox_collision_on()\n{\n    checkBox -e -en 0 AimCheckBox;\n    checkBox -e -en 0 IKCheckBox;\n    checkBox -e -en 0 IKCheckLocalBox;\n    checkBox -e -en 0 MakeGlobalCheckBox;\n    checkBox -e -en 0 ManualCheckBox;\n    checkBox -e -en 0 reConstrainCheckBox;\n    checkBox -e -en 0 SplineCheckBox;\n}\n\nproc checkbox_collision_off()\n{\n    checkBox -e -en 1 AimCheckBox;\n    checkBox -e -en 1 IKCheckBox;\n    checkBox -e -en 1 IKCheckLocalBox;\n    checkBox -e -en 1 MakeGlobalCheckBox;\n    checkBox -e -en 1 ManualCheckBox;\n    checkBox -e -en 1 reConstrainCheckBox;\n    checkBox -e -en 1 SplineCheckBox;\n}\n\nproc checkbox_spline_on()\n{\n    checkBox -e -en 0 AimCheckBox;\n    checkBox -e -en 0 IKCheckBox;\n    checkBox -e -en 0 IKCheckLocalBox;\n    checkBox -e -en 0 reConstrainCheckBox;\n    checkBox -e -en 0 CollisionCheckBox;\n    checkBox -e -en 0 MakeGlobalCheckBox;\n}\n\nproc checkbox_spline_off()\n{\n    checkBox -e -en 1 AimCheckBox;\n    checkBox -e -en 1 IKCheckBox;\n    checkBox -e -en 1 IKCheckLocalBox;\n    checkBox -e -en 1 reConstrainCheckBox;\n    checkBox -e -en 1 CollisionCheckBox;\n    checkBox -e -en 1 MakeGlobalCheckBox;\n\n    if (`checkBox -q -v ManualCheckBox`==1)\n    {\n        checkbox_manual_on;\n    }\n\n}\n\n\nproc int check_locked_attr (string $check_control, string $check_attributes[])\n{\n    int $counter = 0;\n\n    for($attr in $check_attributes)\n    {\n        int $count = `getAttr -l ($check_control+\".\"+$attr)`;\n        $counter = $counter + $count;\n    }\n\n    return $counter;\n}\n\nproc alignObject (string $first, string $second)\n{\n    mxConstraint \"pointConstrain\" 0 $first $second;\n    mxConstraint \"orientConstrain\" 0 $first $second;\n}\n\nproc cached_playback_off()\n{\n    $mayaVersion = (int) startString(`about -v`,4);\n    if ($mayaVersion>2018)\n    {\n        global int $baseCachedPlayback;\n        int $getCachedPlayback = `evaluator -q -name \"cache\"`;\n        $baseCachedPlayback  = $getCachedPlayback;\n        evaluator -en 0 -name \"cache\";\n    }\n}\n\nproc cached_playback_on()\n{\n    global int $baseCachedPlayback;\n    $mayaVersion = (int) startString(`about -v`,4);\n    if ($mayaVersion>2018)\n    {\n        evaluator -en $baseCachedPlayback -name \"cache\";\n    }\n}\n\nproc delete_unused_nodes()\n{\n    string $current_path[];\n    string $get_nodes_for_check[];\n    string $list_connections[];\n    string $base_node_name;\n\n    //delete unused reParent orient Constrain nodes\n    $get_nodes_for_check = `ls \"*_com_orientConstraint*\"`;\n    for ($check_node_connections in $get_nodes_for_check)\n    {\n        $list_connections = `listConnections ($check_node_connections+\".constraintRotateX\") ($check_node_connections+\".constraintRotateY\") ($check_node_connections+\".constraintRotateZ\")`;\n        if ($list_connections[0]==\"\")\n        {\n            if(`objExists $check_node_connections`) {delete $check_node_connections;}\n        }\n    }\n\n    //delete unused reParent point Constrain nodes\n    $get_nodes_for_check = `ls \"*_com_pointConstraint*\"`;\n    for ($check_node_connections in $get_nodes_for_check)\n    {\n        $list_connections = `listConnections ($check_node_connections+\".constraintTranslateX\") ($check_node_connections+\".constraintTranslateY\") ($check_node_connections+\".constraintTranslateZ\")`;\n        if ($list_connections[0]==\"\")\n        {\n            if(`objExists $check_node_connections`) {delete $check_node_connections;}\n        }\n    }\n\n    //delete unused reParent parent Constrain nodes\n    $get_nodes_for_check = `ls \"*_com_parentConstraint*\"`;\n    for ($check_node_connections in $get_nodes_for_check)\n    {\n        $list_connections = `listConnections ($check_node_connections+\".constraintTranslateX\")\n                                             ($check_node_connections+\".constraintTranslateY\")\n                                             ($check_node_connections+\".constraintTranslateZ\")\n                                             ($check_node_connections+\".constraintRotateX\")\n                                             ($check_node_connections+\".constraintRotateY\")\n                                             ($check_node_connections+\".constraintRotateZ\")`;\n        if ($list_connections[0]==\"\")\n        {\n            if(`objExists $check_node_connections`) {delete $check_node_connections;}\n        }\n    }\n\n    //delete unused reParent IK nodes\n    $get_nodes_for_check = `ls \"*_reParentIK_stretchy_blend*\"`;\n\n    for ($check_node_connections in $get_nodes_for_check)\n    {\n        $list_connections = `listConnections ($check_node_connections+\".outputR\")`;\n        if ($list_connections[0]==\"\")\n        {\n            if(`objExists $check_node_connections`) {delete $check_node_connections;}\n        }\n    }\n\n    //delete lost nodes\n    $get_nodes_for_check = `ls -type \"decomposeMatrix\" \"*_com_*\" \"*_to_obj_*\" \"*_cfw_*\" `;\n    for ($check_node_connections in $get_nodes_for_check)\n    {if(`objExists $check_node_connections`){$list_connections = `listConnections ($check_node_connections+\".outputTranslate\") ($check_node_connections+\".outputRotate\") ($check_node_connections+\".outputScale\")`;if ($list_connections[0]==\"\"){delete $check_node_connections;}}}\n\n    $get_nodes_for_check = `ls -type \"inverseMatrix\" \"*_com_*\"`;\n    for ($check_node_connections in $get_nodes_for_check)\n    {if(`objExists $check_node_connections`){$list_connections = `listConnections ($check_node_connections+\".outputMatrix\")`;if ($list_connections[0]==\"\"){delete $check_node_connections;}}}\n\n    $get_nodes_for_check = `ls -type \"composeMatrix\" \"*_com_*\" \"*_cfw_*\"`;\n    for ($check_node_connections in $get_nodes_for_check)\n    {if(`objExists $check_node_connections`){$list_connections = `listConnections ($check_node_connections+\".outputMatrix\")`;if ($list_connections[0]==\"\"){delete $check_node_connections;}}}\n\n    $get_nodes_for_check = `ls -type \"multMatrix\" \"*_com_*\" \"*_cfw_*\"`;\n    for ($check_node_connections in $get_nodes_for_check)\n    {if(`objExists $check_node_connections`){$list_connections = `listConnections ($check_node_connections+\".matrixSum\")`;if ($list_connections[0]==\"\"){delete $check_node_connections;}}}\n\n    $get_nodes_for_check = `ls -type \"plusMinusAverage\" \"*_com_*\" \"*reParentIK_soft*\" \"*_reParent_spline_*\" \"*cfw_distance*\"`;\n    for ($check_node_connections in $get_nodes_for_check)\n    {if(`objExists $check_node_connections`){$list_connections = `listConnections ($check_node_connections+\".output1D\") ($check_node_connections+\".output2D\") ($check_node_connections+\".output3D\")`;if ($list_connections[0]==\"\"){delete $check_node_connections;}}}\n\n    $get_nodes_for_check = `ls -type \"multiplyDivide\" \"*reParentIK_soft*\" \"*_reParent_offset_*\" \"*_reParent_spline_*\" \"*_cfw_*\"`;\n    for ($check_node_connections in $get_nodes_for_check)\n    {if(`objExists $check_node_connections`){$list_connections = `listConnections ($check_node_connections+\".outputX\")`;if ($list_connections[0]==\"\"){delete $check_node_connections;}}}\n\n    $get_nodes_for_check = `ls -type \"condition\" \"*reParentIK_soft*\"`;\n    for ($check_node_connections in $get_nodes_for_check)\n    {if(`objExists $check_node_connections`){$list_connections = `listConnections ($check_node_connections+\".outColorR\")`;if ($list_connections[0]==\"\"){delete $check_node_connections;}}}\n\n    $get_nodes_for_check = `ls -type \"remapValue\" \"*reParentIK_soft*\" \"*stretchy_fix_posiion*\" \"*_reParent_spline_*\" \"*_cfw_*\"`;\n    for ($check_node_connections in $get_nodes_for_check)\n    {if(`objExists $check_node_connections`){$list_connections = `listConnections ($check_node_connections+\".outValue\")`;if ($list_connections[0]==\"\"){delete $check_node_connections;}}}\n\n    $get_nodes_for_check = `ls -type \"distanceBetween\" \"*_cfw_*\"`;\n    for ($check_node_connections in $get_nodes_for_check)\n    {if(`objExists $check_node_connections`){$list_connections = `listConnections ($check_node_connections+\".distance\")`;if ($list_connections[0]==\"\"){delete $check_node_connections;}}}\n\n    $get_nodes_for_check = `ls -type \"angleBetween\" \"*_com_*\" \"*_cfw_*\"`;\n    for ($check_node_connections in $get_nodes_for_check)\n    {if(`objExists $check_node_connections`){$list_connections = `listConnections ($check_node_connections+\".euler\")`;if ($list_connections[0]==\"\"){delete $check_node_connections;}}}\n\n    $get_nodes_for_check = `ls -type \"blendTwoAttr\" \"*_reParent_spline_control_*\"`;\n    for ($check_node_connections in $get_nodes_for_check)\n    {if(`objExists $check_node_connections`){$list_connections = `listConnections ($check_node_connections+\".output\")`;if ($list_connections[0]==\"\"){delete $check_node_connections;}}}\n\n    $get_nodes_for_check = `ls -type \"reverse\" \"*_fix_posiion*\"`;\n    for ($check_node_connections in $get_nodes_for_check)\n    {if(`objExists $check_node_connections`){$list_connections = `listConnections ($check_node_connections+\".outputX\")`;if ($list_connections[0]==\"\"){delete $check_node_connections;}}}\n\n}\n\nproc transfer_attributes (string $control, string $locator, string $option)\n{\n    int $tranferAttribute = `checkBox -query -v TransferAttr`;\n    string $transferOrNot;\n\n    if ($tranferAttribute==1||$option==\"forced\")\n    {\n        string $unique_attributes[] = stringArrayRemove({ \"translateX\", \"translateY\", \"translateZ\", \"rotateX\", \"rotateY\", \"rotateZ\", \"scaleX\", \"scaleY\", \"scaleZ\", \"visibility\", \"radius\", \"control_shape\", \"_transfered_\", \"blendParent1\", \"blendParent2\", \"blendParent3\", \"blendParent4\" }, `listAttr -u -c -k $control`);\n\n        if (size($unique_attributes)!=0)\n        {\n            if ($option!=\"forced\")\n            {\n                $transferOrNot = `confirmDialog  -title \"Well..\" -ma \"center\" -message (\"Selected control: \\n\\n\"+$control+\"  -  has unique attributes \\n\\nDo you want to transfer attributes and animation to reParent locator?\\nDon't worry, it's safe for the rig, and animation will be the same after bake\\n\")\n                -button \" Yeah, do it \"\n                -button \"No\"\n                -defaultButton \"No\"\n                -cancelButton \"No\" -dismissString \"No\"`;\n            }\n            else\n            {\n               $transferOrNot = \" Yeah, do it \";\n            }\n\n            if($transferOrNot == \" Yeah, do it \")\n            {\n                if ($option!=\"forced\")\n                {\n                    addAttr -ln \"_transfered_\" -at \"enum\" -en \"attributes\" $locator;\n                    setAttr -e -l 1 -channelBox true ($locator+\"._transfered_\");\n                }\n                for ($attr in $unique_attributes)\n                {\n                    if(`addAttr -q -at ($control+\".\"+$attr)`==\"enum\")\n                    {\n                        addAttr -ln $attr -at (`addAttr -q -at ($control+\".\"+$attr)`) -en (`addAttr -q -en ($control+\".\"+$attr)`) $locator;\n                    }\n                    else\n                    {\n                        addAttr -ln $attr -at (`addAttr -q -at ($control+\".\"+$attr)`) $locator;\n\n                        float $min_value = `addAttr -q -at -min ($control+\".\"+$attr)`;\n                        if($min_value!=\"\")\n                        {\n                            addAttr -e -min $min_value ($locator+\".\"+$attr);\n                        }\n\n                        float $max_value = `addAttr -q -at -max ($control+\".\"+$attr)`;\n                        if($max_value!=\"\")\n                        {\n                            addAttr -e -max $max_value ($locator+\".\"+$attr);\n                        }\n                    }\n\n                    int $displayable = `addAttr -q -keyable ($locator+\".\"+$attr)`;\n\n                    if(`addAttr -q -keyable ($locator+\".\"+$attr)`==\"0\")\n                    {\n                        setAttr -e -keyable 0 -cb 1 ($locator+\".\"+$attr);\n                    }\n                    else\n                    {\n                        setAttr -e -keyable 1 ($locator+\".\"+$attr);\n                    }\n\n                    string $get_attr_connection[] = `listConnections -d off -s on ($control+\".\"+$attr)`;\n                    string $get_animation_curve[] = `ls -typ \"animCurveTL\" -typ \"animCurveTU\" -typ \"animCurveTA\" -typ \"animCurveTT\" $get_attr_connection[0]`;\n\n                    if (size($get_animation_curve)!=0)\n                    {\n                        connectAttr -f ($get_animation_curve[0]+\".output\") ($locator+\".\"+$attr);\n                        connectAttr -f ($locator+\".\"+$attr) ($control+\".\"+$attr);\n                    }\n                    else\n                    {\n                        setAttr ($locator+\".\"+$attr) `getAttr ($control+\".\"+$attr)`;\n                        connectAttr -f ($locator+\".\"+$attr) ($control+\".\"+$attr);\n                    }\n                }\n            }\n        }\n    }\n}\n\n//Locator Size\nglobal proc reParent_locator_size (string $base_name, string $work_name)\n{\n    // Clean Joints\n    if (`objectType $base_name`==\"joint\" && !`objExists ($base_name+\"Shape\")` && !`objExists ($base_name+\"Shape1\")`)\n    {\n            vector $firstPos;\n            vector $secondPos;\n            vector $firstVect;\n            float $firstLen;\n            string $UpHierarchyObject[];\n\n            select -r $base_name;\n            pickWalk -d down;\n            $UpHierarchyObject = `ls -sl`;\n\n            if ($base_name!=$UpHierarchyObject[0])\n                {\n                    $firstPos = `xform -q -t -ws $base_name`;\n                    $secondPos = `xform -q -t -ws $UpHierarchyObject[0]`;\n                    $firstVect = ($secondPos - $firstPos);\n                    $firstLen = sqrt( pow(($firstVect.x), 2) + pow(($firstVect.y), 2) + pow(($firstVect.z), 2) );\n                    setAttr ($work_name+\".localScaleX\") ($firstLen*0.5);\n                    setAttr ($work_name+\".localScaleY\") ($firstLen*0.5);\n                    setAttr ($work_name+\".localScaleZ\") ($firstLen*0.5);\n                }\n            else\n                {\n                    select -r $base_name;\n                    pickWalk -d up ;\n\n                    $UpHierarchyObject = `ls -sl`;\n                    if ($base_name!=$UpHierarchyObject[0])\n                        {\n                            $firstPos = `xform -q -t -ws $base_name`;\n                            $secondPos = `xform -q -t -ws $UpHierarchyObject[0]`;\n                            $firstVect = ($secondPos - $firstPos);\n                            $firstLen = sqrt( pow(($firstVect.x), 2) + pow(($firstVect.y), 2) + pow(($firstVect.z), 2) );\n                            setAttr ($work_name+\".localScaleX\") ($firstLen*0.5);\n                            setAttr ($work_name+\".localScaleY\") ($firstLen*0.5);\n                            setAttr ($work_name+\".localScaleZ\") ($firstLen*0.5);\n                        }\n                }\n    }\n\n    // Joint with Shapes\n    if (`objectType $base_name`==\"joint\" && `objExists ($base_name+\"Shape\")`)\n    {\n        $base_name=($base_name+\"Shape\");\n\n        float $bbox[] = `exactWorldBoundingBox $base_name`;\n\t    float $locatorSizeX = $bbox[3] - $bbox[0];\n        float $locatorSizeY = $bbox[4] - $bbox[1];\n        float $locatorSizeZ = $bbox[5] - $bbox[2];\n        float $locatorSize = (($locatorSizeX+$locatorSizeY+$locatorSizeZ)/3);\n\n        setAttr ($work_name+\".localScaleX\") ($locatorSize/1);\n        setAttr ($work_name+\".localScaleY\") ($locatorSize/1);\n        setAttr ($work_name+\".localScaleZ\") ($locatorSize/1);\n    }\n\n    // transform (curve control)\n    if (`objectType $base_name`==\"transform\")\n    {\n        duplicate -rr -n ($work_name+\"bb\") $base_name;\n        string $children_shape[] = `listRelatives -s -c -f ($work_name+\"bb\")`;\n        string $children_obj[] = `listRelatives -c -f ($work_name+\"bb\")`;\n        string $children_for_delete[] = stringArrayRemoveExact($children_shape, $children_obj);\n        if (size ($children_for_delete)!=0)\n        {\n            delete $children_for_delete;\n        }\n        float $bbox[] = `exactWorldBoundingBox ($work_name+\"bb\")`;\n\t    float $locatorSizeX = $bbox[3] - $bbox[0];\n        float $locatorSizeY = $bbox[4] - $bbox[1];\n        float $locatorSizeZ = $bbox[5] - $bbox[2];\n        float $locatorSize = (($locatorSizeX+$locatorSizeY+$locatorSizeZ)/3);\n        delete ($work_name+\"bb\");\n\n        if (`objExists \"*ctlArmUpGimbalLf\"`||`objExists \"*:*ctlArmUpGimbalLf\"`)\n        {\n            setAttr ($work_name+\".localScaleX\") 0.6;\n            setAttr ($work_name+\".localScaleY\") 0.6;\n            setAttr ($work_name+\".localScaleZ\") 0.6;\n        }\n        else\n        {\n            setAttr ($work_name+\".localScaleX\") ($locatorSize/1.8);\n            setAttr ($work_name+\".localScaleY\") ($locatorSize/1.8);\n            setAttr ($work_name+\".localScaleZ\") ($locatorSize/1.8);\n        }\n    }\n    select -r $work_name;\n}\n\nproc reParent_locator_shape (string $locator, string $shape, string $color)\n{\n    int $index, $form;\n\n    if ($color == \"red\"){$index = 13;}\n    if ($color == \"green\"){$index = 14;}\n    if ($color == \"yellow\"){$index = 17;}\n\n    if ($shape == \"locator\"){$form = 0;}\n    if ($shape == \"circle\"){$form = 1;}\n    if ($shape == \"sphere\"){$form = 3;}\n    if ($shape == \"cube\"){$form = 2;}\n\n    string $locator_shapes[] = `listRelatives $locator`;\n    float $mult = `getAttr ($locator_shapes[0]+\".localScaleX\")`;\n\n    //create and connect attribuse\n    addAttr -ln \"control_shape\"  -at \"enum\" -en \"locator:square:cube:sphere\" $locator;\n    setAttr -e -channelBox true ($locator+\".control_shape\");\n\n    addAttr -ln \"control_size\"  -at double -min 0.01 -dv 1 $locator;\n    setAttr -e-keyable false -channelBox true ($locator+\".control_size\");\n\n    //size nodes\n    shadingNode -n ($locator+\"_size_md\") -asUtility multiplyDivide;\n    setAttr ($locator+\"_size_md.input1X\") (1*$mult);\n    setAttr ($locator+\"_size_md.input1Y\")(-1*$mult);\n    connectAttr -f ($locator+\".control_size\") ($locator+\"_size_md.input2X\");\n    connectAttr -f ($locator+\".control_size\") ($locator+\"_size_md.input2Y\");\n    connectAttr -f ($locator+\".control_size\") ($locator+\"_size_md.input2Z\");\n\n    shadingNode -n ($locator+\"_size_md_positive\") -asUtility multiplyDivide;\n    setAttr ($locator+\"_size_md_positive.input1X\") (0.382683*$mult);\n    setAttr ($locator+\"_size_md_positive.input1Y\") (0.707107*$mult);\n    setAttr ($locator+\"_size_md_positive.input1Z\") (0.92388*$mult);\n    connectAttr -f ($locator+\".control_size\") ($locator+\"_size_md_positive.input2X\");\n    connectAttr -f ($locator+\".control_size\") ($locator+\"_size_md_positive.input2Y\");\n    connectAttr -f ($locator+\".control_size\") ($locator+\"_size_md_positive.input2Z\");\n\n    shadingNode -n ($locator+\"_size_md_negative\") -asUtility multiplyDivide;\n    setAttr ($locator+\"_size_md_negative.input1X\") (-0.382683*$mult);\n    setAttr ($locator+\"_size_md_negative.input1Y\") (-0.707107*$mult);\n    setAttr ($locator+\"_size_md_negative.input1Z\") (-0.92388*$mult);\n    connectAttr -f ($locator+\".control_size\") ($locator+\"_size_md_negative.input2X\");\n    connectAttr -f ($locator+\".control_size\") ($locator+\"_size_md_negative.input2Y\");\n    connectAttr -f ($locator+\".control_size\") ($locator+\"_size_md_negative.input2Z\");\n\n    //locator\n    setAttr ($locator+\"_size_md.input1Z\") `getAttr ($locator+\"Shape.localScaleX\")`;\n    connectAttr -f ($locator+\"_size_md.outputX\") ($locator+\"Shape.localScaleX\");\n    connectAttr -f ($locator+\"_size_md.outputX\") ($locator+\"Shape.localScaleY\");\n    connectAttr -f ($locator+\"_size_md.outputX\") ($locator+\"Shape.localScaleZ\");\n\n    //square\n    curve -n ($locator+\"_temp\") -d 1 -p -1 0 -1 -p -1 0 1 -p 1 0 1 -p 1 0 -1 -p -1 0 -1 -k 0 -k 1 -k 2 -k 3 -k 4 ;\n    rebuild_locator_shape $locator \"Square\" $index 4;\n\n    //cube\n    curve -n ($locator+\"_temp\") -d 1 -p 1 1 -1 -p 1 1 1 -p 1 -1 1 -p 1 -1 -1 -p 1 1 -1 -p -1 1 -1 -p -1 -1 -1 -p -1 -1 1 -p -1 1 1 -p 1 1 1 -p 1 -1 1 -p -1 -1 1 -p -1 -1 -1 -p 1 -1 -1 -p 1 1 -1 -p -1 1 -1 -p -1 1 1 -p 1 1 1 -p 1 1 -1 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18;\n    rebuild_locator_shape $locator \"Cube\"  $index 18 ;\n\n    //sphere\n    curve -n ($locator+\"_temp\") -d 1 -p 0 1 0 -p -0.382683 0.92388 0 -p -0.707107 0.707107 0 -p -0.92388 0.382683 0 -p -1 0 0 -p -0.92388 -0.382683 0 -p -0.707107 -0.707107 0 -p -0.382683 -0.92388 0 -p 0 -1 0 -p 0.382683 -0.92388 0 -p 0.707107 -0.707107 0 -p 0.92388 -0.382683 0 -p 1 0 0 -p 0.92388 0.382683 0 -p 0.707107 0.707107 0 -p 0.382683 0.92388 0 -p 0 1 0 -p 0 0.92388 0.382683 -p 0 0.707107 0.707107 -p 0 0.382683 0.92388 -p 0 0 1 -p 0 -0.382683 0.92388 -p 0 -0.707107 0.707107 -p 0 -0.92388 0.382683 -p 0 -1 0 -p 0 -0.92388 -0.382683 -p 0 -0.707107 -0.707107 -p 0 -0.382683 -0.92388 -p 0 0 -1 -p 0 0.382683 -0.92388 -p 0 0.707107 -0.707107 -p 0 0.92388 -0.382683 -p 0 1 0 -p -0.382683 0.92388 0 -p -0.707107 0.707107 0 -p -0.92388 0.382683 0 -p -1 0 0 -p -0.92388 0 0.382683 -p -0.707107 0 0.707107 -p -0.382683 0 0.92388 -p 0 0 1 -p 0.382683 0 0.92388 -p 0.707107 0 0.707107 -p 0.92388 0 0.382683 -p 1 0 0 -p 0.92388 0 -0.382683 -p 0.707107 0 -0.707107 -p 0.382683 0 -0.92388 -p 0 0 -1 -p -0.382683 0 -0.92388 -p -0.707107 0 -0.707107 -p -0.92388 0 -0.382683 -p -1 0 0 -k 0 -k 1 -k 2 -k 3 -k 4 -k 5 -k 6 -k 7 -k 8 -k 9 -k 10 -k 11 -k 12 -k 13 -k 14 -k 15 -k 16 -k 17 -k 18 -k 19 -k 20 -k 21 -k 22 -k 23 -k 24 -k 25 -k 26 -k 27 -k 28 -k 29 -k 30 -k 31 -k 32 -k 33 -k 34 -k 35 -k 36 -k 37 -k 38 -k 39 -k 40 -k 41 -k 42 -k 43 -k 44 -k 45 -k 46 -k 47 -k 48 -k 49 -k 50 -k 51 -k 52 ;\n    rebuild_locator_shape $locator \"Sphere\"  $index 52 ;\n\n    //visibility\n    shadingNode -n ($locator+\"_locator_shape_condition\") -asUtility condition;\n    shadingNode -n ($locator+\"_sphere_shape_condition\") -asUtility condition;\n    shadingNode -n ($locator+\"_cube_shape_condition\") -asUtility condition;\n    shadingNode -n ($locator+\"_square_shape_condition\") -asUtility condition;\n\n    setAttr ($locator+\"_locator_shape_condition.secondTerm\") 0;\n    setAttr ($locator+\"_square_shape_condition.secondTerm\") 1;\n    setAttr ($locator+\"_cube_shape_condition.secondTerm\") 2;\n    setAttr ($locator+\"_sphere_shape_condition.secondTerm\") 3;\n\n    setAttr ($locator+\"_locator_shape_condition.colorIfTrueR\") 1;\n    setAttr ($locator+\"_locator_shape_condition.colorIfFalseR\") 0;\n    setAttr ($locator+\"_sphere_shape_condition.colorIfTrueR\") 1;\n    setAttr ($locator+\"_sphere_shape_condition.colorIfFalseR\") 0;\n    setAttr ($locator+\"_cube_shape_condition.colorIfTrueR\") 1;\n    setAttr ($locator+\"_cube_shape_condition.colorIfFalseR\") 0;\n    setAttr ($locator+\"_square_shape_condition.colorIfTrueR\") 1;\n    setAttr ($locator+\"_square_shape_condition.colorIfFalseR\") 0;\n\n    connectAttr -f ($locator+\".control_shape\") ($locator+\"_locator_shape_condition.firstTerm\");\n    connectAttr -f ($locator+\".control_shape\") ($locator+\"_sphere_shape_condition.firstTerm\");\n    connectAttr -f ($locator+\".control_shape\") ($locator+\"_cube_shape_condition.firstTerm\");\n    connectAttr -f ($locator+\".control_shape\") ($locator+\"_square_shape_condition.firstTerm\");\n\n    connectAttr -f ($locator+\"_locator_shape_condition.outColorR\") ($locator+\"Shape.visibility\");\n    connectAttr -f ($locator+\"_sphere_shape_condition.outColorR\") ($locator+\"SphereShape.visibility\");\n    connectAttr -f ($locator+\"_cube_shape_condition.outColorR\") ($locator+\"CubeShape.visibility\");\n    connectAttr -f ($locator+\"_square_shape_condition.outColorR\") ($locator+\"SquareShape.visibility\");\n\n    setAttr ($locator+\".control_shape\") 3;\n    setAttr ($locator+\".control_shape\") $form;\n\n    setAttr -lock true -keyable false -channelBox false ($locator+\".sx\");\n    setAttr -lock true -keyable false -channelBox false ($locator+\".sy\");\n    setAttr -lock true -keyable false -channelBox false ($locator+\".sz\");\n    setAttr -lock true -keyable false -channelBox false ($locator+\".v\");\n}\n\nproc rebuild_locator_shape (string $locator, string $shape, int $index, int $amount)\n{\n    rename `listRelatives ($locator+\"_temp\")` ($locator+\"TempShape\");\n\n    string $axes[] = {\"x\", \"y\", \"z\"};\n\n    for ($i=0;$i<$amount+1;$i++)\n    {\n        for ($axis in $axes)\n        {\n            if (`getAttr ($locator+\"TempShape.controlPoints[\"+$i+\"].\"+$axis+\"Value\")`==1)\n            {\n                connectAttr -f ($locator+\"_size_md.outputX\") ($locator+\"TempShape.controlPoints[\"+$i+\"].\"+$axis+\"Value\");\n            }\n            if (`getAttr ($locator+\"TempShape.controlPoints[\"+$i+\"].\"+$axis+\"Value\")`==-1)\n            {\n                connectAttr -f ($locator+\"_size_md.outputY\") ($locator+\"TempShape.controlPoints[\"+$i+\"].\"+$axis+\"Value\");\n            }\n\n            if (`getAttr ($locator+\"TempShape.controlPoints[\"+$i+\"].\"+$axis+\"Value\")`==0.382683)\n            {\n                connectAttr -f ($locator+\"_size_md_positive.outputX\") ($locator+\"TempShape.controlPoints[\"+$i+\"].\"+$axis+\"Value\");\n            }\n            if (`getAttr ($locator+\"TempShape.controlPoints[\"+$i+\"].\"+$axis+\"Value\")`==-0.382683)\n            {\n                connectAttr -f ($locator+\"_size_md_negative.outputX\") ($locator+\"TempShape.controlPoints[\"+$i+\"].\"+$axis+\"Value\");\n            }\n\n            if (`getAttr ($locator+\"TempShape.controlPoints[\"+$i+\"].\"+$axis+\"Value\")`==0.707107)\n            {\n                connectAttr -f ($locator+\"_size_md_positive.outputY\") ($locator+\"TempShape.controlPoints[\"+$i+\"].\"+$axis+\"Value\");\n            }\n            if (`getAttr ($locator+\"TempShape.controlPoints[\"+$i+\"].\"+$axis+\"Value\")`==-0.707107)\n            {\n                connectAttr -f ($locator+\"_size_md_negative.outputY\") ($locator+\"TempShape.controlPoints[\"+$i+\"].\"+$axis+\"Value\");\n            }\n\n            if (`getAttr ($locator+\"TempShape.controlPoints[\"+$i+\"].\"+$axis+\"Value\")`==0.92388)\n            {\n                connectAttr -f ($locator+\"_size_md_positive.outputZ\") ($locator+\"TempShape.controlPoints[\"+$i+\"].\"+$axis+\"Value\");\n            }\n            if (`getAttr ($locator+\"TempShape.controlPoints[\"+$i+\"].\"+$axis+\"Value\")`==-0.92388)\n            {\n                connectAttr -f ($locator+\"_size_md_negative.outputZ\") ($locator+\"TempShape.controlPoints[\"+$i+\"].\"+$axis+\"Value\");\n            }\n        }\n    }\n\n    parent ($locator+\"_temp\") $locator;\n    xform -t 0 0 0 ($locator+\"_temp\");\n    parent -s -r ($locator+\"TempShape\") $locator;\n    delete ($locator+\"_temp\");\n    setAttr ($locator+\"TempShape.overrideEnabled\") 1;\n    setAttr ($locator+\"TempShape.overrideColor\") $index;\n    rename ($locator+\"TempShape\") ($locator+$shape+\"Shape\");\n}\n\nproc show_axis()\n{\n    string $joints_name[] = `ls -sl`;\n    for($sel in $joints_name)\n    {\n        setAttr ($sel+\".displayLocalAxis\") 1;\n    }\n}\n\nproc segmentScaleCompensate_toggle()\n{\n    string $joints_name[] = `ls -sl`;\n\n    float $base_sc_value = `getAttr ($joints_name[0]+\".segmentScaleCompensate\")`;\n\n    for ($sel in $joints_name)\n    {\n        float $current_sc_value = `getAttr -l ($sel+\".segmentScaleCompensate\")`;\n        if ($current_sc_value == 0)\n        {\n            if($base_sc_value == 0)\n            {\n                setAttr ($sel+\".segmentScaleCompensate\") 1;\n                print \"\\n -- segmentScaleCompensate ON --\\n\";\n            }\n            else\n            {\n                setAttr ($sel+\".segmentScaleCompensate\") 0;\n                print \"\\n -- segmentScaleCompensate OFF --\\n\";\n            }\n        }\n    }\n}\n\nglobal proc reParent_collision_init()\n{\n    string $Collsion_objects[] = `ls -sl`;\n\n    string $check_mesh_shape[] = `listRelatives -s -c -f $Collsion_objects[0]`;\n    string $currentShapeType = `objectType $check_mesh_shape[0]`;\n\n    if($currentShapeType == \"mesh\")\n    {\n        for ($c=1; $c<=(size($Collsion_objects)-1); ++$c )\n        {\n            if ( !catchQuiet (getAttr ($Collsion_objects[$c]+\".reParent_controlName\")) )\n            {\n                select -r $Collsion_objects[0] $Collsion_objects[$c];\n                reParent_collision;\n            }\n            else\n            {\n                select -r $Collsion_objects[$c];\n                reParent_init;\n                string $SelectedNewControl[] = `ls -sl`;\n                select -r $Collsion_objects[0] $SelectedNewControl[0];\n                reParent_collision;\n            }\n        }\n    }\n    else\n    {\n        confirmDialog -b \"Ok\" -t \"Oooops..\" -m \"  SELECT MESH GEOMETRY FIRST  \";\n    }\n}\n\nproc reParent_collision()\n{\n    string $connect_control;\n    string $base_names[] = `ls -sl`;\n    string $work_names[] = define_work_names($base_names);\n\n    //define real names\n    string $geo = $work_names[0];\n    string $ctrl = $work_names[1];\n\n    string $base_geo = $base_names[0];\n    string $base_ctrl = $base_names[1];\n\n\n    if (`getAttr ($ctrl+\".reParent_Type\")`==\"IK\")\n    {\n        $connect_control = $ctrl;\n    }\n    else\n    {\n        $connect_control = `getAttr ($ctrl+\".reParent_controlName\")`;\n    }\n\n    //add collision attributes\n    if ( catchQuiet (`getAttr ($base_ctrl+\".Collision_translate_effect\")`)==1)\n    {\n        addAttr -ln \"Collision_translate_effect\"  -at double -min 0 -max 1  -dv 1 ($base_ctrl);\n        setAttr -e-keyable true ($base_ctrl+\".Collision_translate_effect\");\n    }\n\n    if ( catchQuiet (`getAttr ($base_ctrl+\".Collision_rotate_effect\")`)==1)\n    {\n        addAttr -ln \"Collision_rotate_effect\"  -at double -min 0 -max 1  -dv 0 ($base_ctrl);\n        setAttr -e-keyable true ($base_ctrl+\".Collision_rotate_effect\");\n    }\n\n    if ( catchQuiet (`getAttr ($base_ctrl+\".Collision_geometry_offset\")`)==1)\n    {\n        addAttr -ln \"Collision_geometry_offset\" -at double -dv 0 ($base_ctrl);\n        setAttr -e-keyable true ($base_ctrl+\".Collision_geometry_offset\");\n    }\n\n    //create and connection nodes\n    createNode closestPointOnMesh -n ($ctrl+\"_cfw_cpom\");\n    connectAttr -f ($base_geo+\".outMesh\") ($ctrl+\"_cfw_cpom.inMesh\");\n    connectAttr -f ($base_geo+\".worldMatrix[0]\") ($ctrl+\"_cfw_cpom.inputMatrix\");\n\n    shadingNode -n ($ctrl+\"_cfw_dMatrix\") -asUtility decomposeMatrix;\n    connectAttr -f ($base_ctrl+\".worldMatrix[0]\") ($ctrl+\"_cfw_dMatrix.inputMatrix\");\n    connectAttr -f ($ctrl+\"_cfw_dMatrix.outputTranslate\") ($ctrl+\"_cfw_cpom.inPosition\");\n\n    shadingNode -n ($ctrl+\"_cfw_angleBetween\") -asUtility angleBetween;\n    connectAttr -f ($ctrl+\"_cfw_cpom.normal\") ($ctrl+\"_cfw_angleBetween.vector2\");\n\n    shadingNode -n ($ctrl+\"_cfw_pos_cMatrix\") -asUtility composeMatrix;\n    connectAttr -f ($ctrl+\"_cfw_angleBetween.euler\") ($ctrl+\"_cfw_pos_cMatrix.inputRotate\");\n    connectAttr -f ($ctrl+\"_cfw_cpom.position\") ($ctrl+\"_cfw_pos_cMatrix.inputTranslate\");\n\n    shadingNode -n ($ctrl+\"_cfw_offset_cMatrix\") -asUtility composeMatrix;\n    connectAttr -f ($base_ctrl+\".Collision_geometry_offset\") ($ctrl+\"_cfw_offset_cMatrix.inputTranslateY\");\n\n    shadingNode -n ($ctrl+\"_cfw_offset_mMatrix\") -asUtility multMatrix;\n    connectAttr -f ($ctrl+\"_cfw_offset_cMatrix.outputMatrix\") ($ctrl+\"_cfw_offset_mMatrix.matrixIn[0]\");\n    connectAttr -f ($ctrl+\"_cfw_pos_cMatrix.outputMatrix\") ($ctrl+\"_cfw_offset_mMatrix.matrixIn[1]\");\n\n    shadingNode -n ($ctrl+\"_cfw_offset_dMatrix\") -asUtility decomposeMatrix;\n    connectAttr -f ($ctrl+\"_cfw_offset_mMatrix.matrixSum\") ($ctrl+\"_cfw_offset_dMatrix.inputMatrix\");\n\n    shadingNode -n ($ctrl+\"_cfw_underground_distance\") -asUtility distanceBetween;\n    connectAttr -f ($ctrl+\"_cfw_dMatrix.outputTranslate\") ($ctrl+\"_cfw_underground_distance.point1\");\n    connectAttr -f ($ctrl+\"_cfw_cpom.position\")($ctrl+\"_cfw_underground_distance.point2\");\n\n    shadingNode -n ($ctrl+\"_cfw_underground_mult\") -asUtility multiplyDivide;\n    connectAttr -f ($ctrl+\"_cfw_underground_distance.distance\") ($ctrl+\"_cfw_underground_mult.input1Y\");\n    setAttr ($ctrl+\"_cfw_underground_mult.input2Y\") -2;\n\n    shadingNode -n ($ctrl+\"_cfw_underground_cMatrix\") -asUtility composeMatrix;\n    connectAttr -f ($ctrl+\"_cfw_underground_mult.outputX\") ($ctrl+\"_cfw_underground_cMatrix.inputTranslateX\");\n    connectAttr -f ($ctrl+\"_cfw_underground_mult.outputY\") ($ctrl+\"_cfw_underground_cMatrix.inputTranslateY\");\n    connectAttr -f ($ctrl+\"_cfw_underground_mult.outputZ\") ($ctrl+\"_cfw_underground_cMatrix.inputTranslateZ\");\n\n    shadingNode -n ($ctrl+\"_cfw_underground_mMatrix\") -asUtility multMatrix;\n    connectAttr -f ($ctrl+\"_cfw_underground_cMatrix.outputMatrix\") ($ctrl+\"_cfw_underground_mMatrix.matrixIn[0]\");\n    connectAttr -f ($ctrl+\"_cfw_pos_cMatrix.outputMatrix\") ($ctrl+\"_cfw_underground_mMatrix.matrixIn[1]\");\n\n    shadingNode -n ($ctrl+\"_cfw_underground_dMatrix\") -asUtility decomposeMatrix;\n    connectAttr -f ($ctrl+\"_cfw_underground_mMatrix.matrixSum\") ($ctrl+\"_cfw_underground_dMatrix.inputMatrix\");\n\n    shadingNode -n ($ctrl+\"_cfw_inner_distance\") -asUtility distanceBetween;\n    connectAttr -f ($ctrl+\"_cfw_cpom.position\") ($ctrl+\"_cfw_inner_distance.point1\");\n    connectAttr -f ($ctrl+\"_cfw_underground_dMatrix.outputTranslate\") ($ctrl+\"_cfw_inner_distance.point2\");\n\n    shadingNode -n ($ctrl+\"_cfw_outer_distance\") -asUtility distanceBetween;\n    connectAttr -f ($ctrl+\"_cfw_underground_dMatrix.outputTranslate\") ($ctrl+\"_cfw_outer_distance.point1\");\n    connectAttr -f ($ctrl+\"_cfw_dMatrix.outputTranslate\") ($ctrl+\"_cfw_outer_distance.point2\");\n\n    shadingNode -n ($ctrl+\"_cfw_distance_pma\") -asUtility plusMinusAverage;\n    setAttr ($ctrl+\"_cfw_distance_pma.operation\") 2;\n    connectAttr -f ($ctrl+\"_cfw_inner_distance.distance\") ($ctrl+\"_cfw_distance_pma.input1D[1]\");\n    connectAttr -f ($ctrl+\"_cfw_outer_distance.distance\") ($ctrl+\"_cfw_distance_pma.input1D[0]\");\n\n    shadingNode -n ($ctrl+\"_cfw_rv_tr_Blend\") -asUtility remapValue;\n    connectAttr -f ($ctrl+\"_cfw_distance_pma.output1D\") ($ctrl+\"_cfw_rv_tr_Blend.inputValue\");\n    connectAttr -f ($base_ctrl+\".Collision_geometry_offset\")  ($ctrl+\"_cfw_rv_tr_Blend.inputMin\");\n    setAttr ($ctrl+\"_cfw_rv_tr_Blend.outputMin\") 0;\n    setAttr ($ctrl+\"_cfw_rv_tr_Blend.outputMax\") 1;\n    shadingNode -n ($ctrl+\"_cfw_rv_tr_Blend_offset\") -asUtility plusMinusAverage;\n    setAttr ($ctrl+\"_cfw_rv_tr_Blend_offset.operation\") 2;\n    connectAttr -f ($base_ctrl+\".Collision_geometry_offset\") ($ctrl+\"_cfw_rv_tr_Blend_offset.input1D[0]\");\n    setAttr ($ctrl+\"_cfw_rv_tr_Blend_offset.input1D[1]\") 0.001;\n    connectAttr -f ($ctrl+\"_cfw_rv_tr_Blend_offset.output1D\") ($ctrl+\"_cfw_rv_tr_Blend.inputMax\");\n\n    shadingNode -n ($ctrl+\"_cfw_rv_rt_Blend\") -asUtility remapValue;\n    connectAttr -f ($ctrl+\"_cfw_distance_pma.output1D\") ($ctrl+\"_cfw_rv_rt_Blend.inputValue\");\n    connectAttr -f ($base_ctrl+\".Collision_geometry_offset\")  ($ctrl+\"_cfw_rv_rt_Blend.inputMin\");\n    setAttr ($ctrl+\"_cfw_rv_rt_Blend.outputMin\") 0;\n    setAttr ($ctrl+\"_cfw_rv_rt_Blend.outputMax\") 1;\n    shadingNode -n ($ctrl+\"_cfw_rv_rt_Blend_offset\") -asUtility plusMinusAverage;\n    setAttr ($ctrl+\"_cfw_rv_rt_Blend_offset.operation\") 2;\n    connectAttr -f ($base_ctrl+\".Collision_geometry_offset\") ($ctrl+\"_cfw_rv_rt_Blend_offset.input1D[0]\");\n    setAttr ($ctrl+\"_cfw_rv_rt_Blend_offset.input1D[1]\") 1;\n    connectAttr -f ($ctrl+\"_cfw_rv_rt_Blend_offset.output1D\") ($ctrl+\"_cfw_rv_rt_Blend.inputMax\");\n\n    createNode pairBlend -n ($ctrl+\"_cfw_tr_Blend\");\n    connectAttr -f ($ctrl+\"_cfw_rv_tr_Blend.outValue\") ($ctrl+\"_cfw_tr_Blend.weight\");\n    connectAttr -f ($ctrl+\"_cfw_dMatrix.outputTranslate\") ($ctrl+\"_cfw_tr_Blend.inTranslate1\");\n    connectAttr -f ($ctrl+\"_cfw_offset_dMatrix.outputTranslate\") ($ctrl+\"_cfw_tr_Blend.inTranslate2\");\n\n    createNode pairBlend -n ($ctrl+\"_cfw_rt_Blend\");\n    connectAttr -f ($ctrl+\"_cfw_rv_rt_Blend.outValue\") ($ctrl+\"_cfw_rt_Blend.weight\");\n    connectAttr -f ($ctrl+\"_cfw_dMatrix.outputRotate\") ($ctrl+\"_cfw_rt_Blend.inRotate1\");\n    connectAttr -f ($ctrl+\"_cfw_offset_dMatrix.outputRotate\") ($ctrl+\"_cfw_rt_Blend.inRotate2\");\n\n    //rotate effect\n    shadingNode -n ($ctrl+\"_cfw_rotate_effect_mult\") -asUtility multiplyDivide;\n    connectAttr -f ($ctrl+\"_cfw_rv_rt_Blend.outValue\") ($ctrl+\"_cfw_rotate_effect_mult.input1X\");\n    connectAttr -f ($ctrl+\"_cfw_rotate_effect_mult.outputX\") ($ctrl+\"_cfw_rt_Blend.weight\");\n    connectAttr -f ($base_ctrl+\".Collision_rotate_effect\") ($ctrl+\"_cfw_rotate_effect_mult.input2X\");\n    connectAttr -f ($base_ctrl+\".Collision_rotate_effect\") ($ctrl+\"_cfw_rotate_effect_mult.input2Y\");\n    connectAttr -f ($base_ctrl+\".Collision_rotate_effect\") ($ctrl+\"_cfw_rotate_effect_mult.input2Z\");\n\n    //translate effect\n    shadingNode -n ($ctrl+\"_cfw_translate_effect_mult\") -asUtility multiplyDivide;\n    connectAttr -f ($ctrl+\"_cfw_rv_tr_Blend.outValue\") ($ctrl+\"_cfw_translate_effect_mult.input1X\");\n    connectAttr -f ($ctrl+\"_cfw_translate_effect_mult.outputX\") ($ctrl+\"_cfw_tr_Blend.weight\");\n    connectAttr -f ($base_ctrl+\".Collision_translate_effect\") ($ctrl+\"_cfw_translate_effect_mult.input2X\");\n    connectAttr -f ($base_ctrl+\".Collision_translate_effect\") ($ctrl+\"_cfw_translate_effect_mult.input2Y\");\n    connectAttr -f ($base_ctrl+\".Collision_translate_effect\") ($ctrl+\"_cfw_translate_effect_mult.input2Z\");\n\n    //constrain control to collision locator\n    //define offset\n    shadingNode -n ($ctrl+\"_cfw_temp_offset_mMatrix\") -asUtility multMatrix;\n    connectAttr -f ($connect_control+\".worldMatrix[0]\") ($ctrl+\"_cfw_temp_offset_mMatrix.matrixIn[0]\");\n    connectAttr -f ($base_ctrl+\".worldInverseMatrix[0]\") ($ctrl+\"_cfw_temp_offset_mMatrix.matrixIn[1]\");\n    $com_offset = `getAttr ($ctrl+\"_cfw_temp_offset_mMatrix.matrixSum\")`;\n    delete ($ctrl+\"_cfw_temp_offset_mMatrix\");\n\n    //connect nodes\n    shadingNode -n ($ctrl+\"_cfw_to_obj_cMatrix\") -asUtility composeMatrix;\n    connectAttr -f ($ctrl+\"_cfw_tr_Blend.outTranslate\") ($ctrl+\"_cfw_to_obj_cMatrix.inputTranslate\");\n    connectAttr -f ($ctrl+\"_cfw_rt_Blend.outRotate\") ($ctrl+\"_cfw_to_obj_cMatrix.inputRotate\");\n\n    shadingNode -n ($ctrl+\"_cfw_to_obj_mMatrix\") -asUtility multMatrix;\n    setAttr ($ctrl+\"_cfw_to_obj_mMatrix.matrixIn[0]\") -type \"matrix\"\n    $com_offset[0] $com_offset[1] $com_offset[2] $com_offset[3] $com_offset[4] $com_offset[5] $com_offset[6] $com_offset[7]\n    $com_offset[8] $com_offset[9] $com_offset[10] $com_offset[11] $com_offset[12] $com_offset[13] $com_offset[14] $com_offset[15];\n    connectAttr -f ($ctrl+\"_cfw_to_obj_cMatrix.outputMatrix\")($ctrl+\"_cfw_to_obj_mMatrix.matrixIn[1]\");\n    connectAttr -f ($connect_control+\".parentInverseMatrix[0]\") ($ctrl+\"_cfw_to_obj_mMatrix.matrixIn[2]\");\n\n    shadingNode -n ($ctrl+\"_to_obj_dMatrix\") -asUtility decomposeMatrix;\n    connectAttr -f ($ctrl+\"_cfw_to_obj_mMatrix.matrixSum\") ($ctrl+\"_to_obj_dMatrix.inputMatrix\");\n\n    string $pac_name[] = `createNode parentConstraint -n ($ctrl+\"_com_parentConstraint\")`;\n    connectAttr -f ($ctrl+\"_to_obj_dMatrix.outputTranslate\") ($pac_name[0]+\".target[0].targetTranslate\");\n    connectAttr -f ($ctrl+\"_to_obj_dMatrix.outputRotate\")    ($pac_name[0]+\".target[0].targetRotate\");\n    parent $pac_name $connect_control;\n\n   //connect orient constrain to child\n    string $pairBlend_name = `createNode pairBlend -n ($ctrl+\"_com_orient_pairBlend\")`;\n\n    connectAttr -f ($pac_name[0]+\".constraintTranslateX\") ($pairBlend_name+\".inTranslateX2\");\n    connectAttr -f ($pac_name[0]+\".constraintTranslateY\") ($pairBlend_name+\".inTranslateY2\");\n    connectAttr -f ($pac_name[0]+\".constraintTranslateZ\") ($pairBlend_name+\".inTranslateZ2\");\n\n    connectAttr -f ($pac_name[0]+\".constraintRotateX\") ($pairBlend_name+\".inRotateX2\");\n    connectAttr -f ($pac_name[0]+\".constraintRotateY\") ($pairBlend_name+\".inRotateY2\");\n    connectAttr -f ($pac_name[0]+\".constraintRotateZ\") ($pairBlend_name+\".inRotateZ2\");\n\n    if (`attributeExists \"reParent_blendParent\" $connect_control`==0)\n    {\n        addAttr -ln \"reParent_blendParent\"  -at double  -min 0 -max 1 -dv 1 $connect_control;\n        setAttr -e-keyable true ($connect_control+\".reParent_blendParent\");\n    }\n\n    connectAttr -f ($connect_control+\".reParent_blendParent\") ($pairBlend_name+\".weight\");\n\n   //connect translate\n    $check_char_set = `listConnections -p 1 -t \"character\" ($connect_control+\".translateX\")`;\n    if (size($check_char_set)!=0){connectAttr -f ($pairBlend_name+\".outTranslateX\") $check_char_set[size($check_char_set)-1];}\n    else\n    {\n        if(`getAttr -l ($connect_control+\".translateX\")`!=1)\n        {\n            string $anim_curve[] = `listConnections -p 1  -d 0($connect_control+\".translateX\")`;\n            if( $anim_curve[0] != \"\")\n            {\n                connectAttr -f $anim_curve[0] ($pairBlend_name+\".inTranslateX1\");\n                connectAttr -f ($pairBlend_name+\".outTranslateX\") ($connect_control+\".translateX\");\n            }\n            else\n            {\n                connectAttr -f ($pac_name[0]+\".constraintTranslateX\") ($connect_control+\".translateX\");\n            }\n        }\n    }\n\n    $check_char_set = `listConnections -p 1  -t \"character\" ($connect_control+\".translateY\")`;\n    if ( size($check_char_set)!=0){connectAttr -f ($pairBlend_name+\".outTranslateY\") $check_char_set[size($check_char_set)-1];}\n    else\n    {\n            string $anim_curve[] = `listConnections -p 1  -d 0($connect_control+\".translateY\")`;\n            if( $anim_curve[0] != \"\")\n            {\n                connectAttr -f $anim_curve[0] ($pairBlend_name+\".inTranslateY1\");\n                connectAttr -f ($pairBlend_name+\".outTranslateY\") ($connect_control+\".translateY\");\n            }\n            else\n            {\n                connectAttr -f ($pac_name[0]+\".constraintTranslateY\") ($connect_control+\".translateY\");\n            }\n    }\n\n    $check_char_set = `listConnections -p 1  -t \"character\" ($connect_control+\".translateZ\")`;\n    if ( size($check_char_set)!=0){connectAttr -f ($pairBlend_name+\".outTranslateZ\") $check_char_set[size($check_char_set)-1];}\n    else\n    {\n            string $anim_curve[] = `listConnections -p 1  -d 0($connect_control+\".translateZ\")`;\n            if( $anim_curve[0] != \"\")\n            {\n                connectAttr -f $anim_curve[0] ($pairBlend_name+\".inTranslateZ1\");\n                connectAttr -f ($pairBlend_name+\".outTranslateZ\") ($connect_control+\".translateZ\");\n            }\n            else\n            {\n                connectAttr -f ($pac_name[0]+\".constraintTranslateZ\") ($connect_control+\".translateZ\");\n            }\n    }\n\n    //connect orient\n    $check_char_set = `listConnections -p 1 -t \"character\" ($connect_control+\".rotateX\")`;\n    if (size($check_char_set)!=0){connectAttr -f ($pairBlend_name+\".outRotateX\") $check_char_set[size($check_char_set)-1];}\n    else\n    {\n        if(`getAttr -l ($connect_control+\".rotateX\")`!=1)\n        {\n            string $anim_curve[] = `listConnections -p 1  -d 0($connect_control+\".rotateX\")`;\n            if( $anim_curve[0] != \"\")\n            {\n                connectAttr -f $anim_curve[0] ($pairBlend_name+\".inRotateX1\");\n                connectAttr -f ($pairBlend_name+\".outRotateX\") ($connect_control+\".rotateX\");\n            }\n            else\n            {\n                connectAttr -f ($pac_name[0]+\".constraintRotateX\") ($connect_control+\".rotateX\");\n            }\n        }\n    }\n\n    $check_char_set = `listConnections -p 1  -t \"character\" ($connect_control+\".rotateY\")`;\n    if (size($check_char_set)!=0){connectAttr -f ($pairBlend_name+\".outRotateY\") $check_char_set[size($check_char_set)-1];}\n    else\n    {\n            string $anim_curve[] = `listConnections -p 1  -d 0($connect_control+\".rotateY\")`;\n            if( $anim_curve[0] != \"\")\n            {\n                connectAttr -f $anim_curve[0] ($pairBlend_name+\".inRotateY1\");\n                connectAttr -f ($pairBlend_name+\".outRotateY\") ($connect_control+\".rotateY\");\n            }\n            else\n            {\n                connectAttr -f ($pac_name[0]+\".constraintRotateY\") ($connect_control+\".rotateY\");\n            }\n    }\n\n    $check_char_set = `listConnections -p 1  -t \"character\" ($connect_control+\".rotateZ\")`;\n    if ( size($check_char_set)!=0){connectAttr -f ($pairBlend_name+\".outRotateZ\") $check_char_set[size($check_char_set)-1];}\n    else\n    {\n            string $anim_curve[] = `listConnections -p 1  -d 0($connect_control+\".rotateZ\")`;\n            if( $anim_curve[0] != \"\")\n            {\n                connectAttr -f $anim_curve[0] ($pairBlend_name+\".inRotateZ1\");\n                connectAttr -f ($pairBlend_name+\".outRotateZ\") ($connect_control+\".rotateZ\");\n            }\n            else\n            {\n                connectAttr -f ($pac_name[0]+\".constraintRotateZ\") ($connect_control+\".rotateZ\");\n            }\n    }\n\n    connectAttr -f ($connect_control+\".rotateOrder\") ($ctrl+\"_to_obj_dMatrix.inputRotateOrder\");\n    select -r $base_ctrl;\n\n    print \"\\nit's alive!\\n\";\n}\n\nproc right_joint_orient(string $array[])\n{\n    for ($sel in $array)\n\t{\n        spaceLocator -n ($sel+\"_reParent_jo_pc_locator\");\n        pointConstraint -n \"temp_jo_pc\" -w 1 $sel ($sel+\"_reParent_jo_pc_locator\") ;\n\t}\n\n    for ($sel in $array)\n    {\n        spaceLocator -n ($sel+\"_reParent_jo_locator\");\n        parent ($sel+\"_reParent_jo_locator\") $sel;\n        xform -t 0 -5 0 ($sel+\"_reParent_jo_locator\");\n        parent -world ($sel+\"_reParent_jo_locator\");\n    }\n\n    delete \"*temp_jo_pc*\";\n\n    for ($sel in $array)\n\t{\n        pointConstraint -n \"temp_jo_pc\" -w 1  ($sel+\"_reParent_jo_pc_locator\") $sel ;\n\t}\n\n    for ($i=0; $i<(size($array)-1); $i++)\n\t{\n        aimConstraint -n \"temp_jo_ac\" -offset 0 0 0 -weight 1 -aimVector 0 1 0 -upVector 1 0 0 -worldUpType \"object\" -worldUpObject ($array[$i+1]+\"_reParent_jo_locator\") ($array[$i+1]+\"_reParent_jo_pc_locator\") $array[$i];\n    }\n\n    delete \"*temp_jo_ac*\" \"*temp_jo_pc*\" \"*_reParent_jo_locator*\" \"*_reParent_jo_pc_locator*\";\n    makeIdentity -apply true -t 1 -r 1 -s 1 -n 0 -pn 1 $array;\n\n    setAttr ($array[(size($array)-1)]+\".jointOrientX\") 0;\n    setAttr ($array[(size($array)-1)]+\".jointOrientY\") 0;\n    setAttr ($array[(size($array)-1)]+\".jointOrientZ\") 0;\n}\n\n\nproc offset_animation()\n{\n    string $SelectedControls[] = `ls -sl`;\n    int $amountOfAllObjs = `size($SelectedControls)`;\n\n    for ($r=0; $r<$amountOfAllObjs; ++$r )\n    {\n        selectKey -r -k $SelectedControls[$r];\n        keyframe -animation keys -option over -relative -timeChange ($r+1);\n    }\n}\n\nproc offset_animation_options()\n{\n    if ((`window -ex offset_animation_options`)==true)\n    deleteUI offset_animation_options;\n    string $window = `window -toolbox 1 -t \"Offset Animation\" -wh 140 48 -s 0 offset_animation_options`;\n    rowColumnLayout;\n    rowLayout -nc 2 -cw 30 30 ;\n    setParent..;\n    columnLayout -adj 1;\n    rowColumnLayout -nc 2;\n    floatField -v 0.1 -w 50 -precision 2 OffsetFrames;\n    button -l \"Offset\" -command \"offset_animation_options_go\" -bgc .8 .8 .8 -w 80 -h 35;\n    setParent..;\n    showWindow offset_animation_options;\n    window -edit -widthHeight 137 45 offset_animation_options;\n}\n\nproc offset_animation_options_go()\n{\n\tfloat $OffsetFrames = `floatField -q -v OffsetFrames`;\n\n    string $SelectedControls[] = `ls -sl`;\n    int $amountOfAllObjs = `size($SelectedControls)`;\n\n    for ($r=0; $r<$amountOfAllObjs; ++$r )\n    {\n        selectKey -r -k $SelectedControls[$r];\n        keyframe -animation keys -option over -relative -timeChange (($r+1)*$OffsetFrames);\n    }\n}\n\nproc reParent_tutorial()\n{launch -web \"https://www.youtube.com/playlist?list=PLjwRnk_BSpcA2X_zgGGvqq29KrA7DD1IV\";}\n\nproc reParent_intro()\n{launch -web \"https://www.youtube.com/watch?v=pFD0H5cQq3s\";}\n\nproc reParent_manual_ENG()\n{launch -web \"https://docs.google.com/document/d/18lo4223RTf3OeSbD9zOzRLMoBxXMbIF-G8hzFJ7omek/edit\";}\n\nproc reParent_manual_RUS()\n{launch -web \"https://docs.google.com/document/d/1eMQW4nVOig-oLXRpxmTtfIa7w6VxfjnwxoU6Z2IU1FA/edit\";}\n\nglobal proc reParent_panel_big()\n{\n    if (`window -q -h reParent_panel` == 250)\n    {window -edit -h 348 reParent_panel;}\n    if (`window -q -h reParent_panel` == 258)\n    {window -edit -h 356 reParent_panel;}\n}\n\nglobal proc reParent_panel_small()\n{\n    if (`window -q -h reParent_panel` == 348)\n    {window -edit -h 250 reParent_panel;}\n    if (`window -q -h reParent_panel` == 356)\n    {window -edit -h 258 reParent_panel;}\n}\n\nglobal proc reParent_panel_go_to_base()\n{\n    if (`window -q -h reParent_panel` == 258)\n    {window -edit -h 250 reParent_panel;}\n    if (`window -q -h reParent_panel` == 356)\n    {window -edit -h 348 reParent_panel;}\n    button -e -w 140 -h 35 -vis 1 DeleteButton;\n    button  -edit -en 1 reParentButton;\n}\n\nglobal proc reParent_panel_go_to_cancel()\n{\n    if (`window -q -h reParent_panel` == 250)\n    {window -edit -h 258 reParent_panel;}\n    if (`window -q -h reParent_panel` == 348)\n    {window -edit -h 356 reParent_panel;}\n    button -e -w 140 -h 1 -vis 0 DeleteButton;\n    button  -edit -en 0 reParentButton;\n}\n\nproc go_mode_starter()\n{\n    global string $session_selected_controls[];\n    int $ManualButton = `checkBox -q -v ManualCheckBox`;\n    int $AimButton = `checkBox -q -v AimCheckBox`;\n    int $GlobalButton = `checkBox -q -v MakeGlobalCheckBox`;\n    int $reConstrainButton = `checkBox -q -v reConstrainCheckBox`;\n    int $IKButton = `checkBox -q -v IKCheckBox`;\n\tint $SplineButton = `checkBox -q -v SplineCheckBox`;\n\n    if(`objExists Last_Session_reParentLocator_set`)\n\n    if ($ManualButton==1&&$AimButton==0&&$GlobalButton==0&&$reConstrainButton==0&&$IKButton==0&&$SplineButton==0&&$reConstrainButton==0){manual_mode_go;}\n    if ($ManualButton==0&&$AimButton==1&&$GlobalButton==0&&$IKButton==0){aim_mode_go;}\n    if ($AimButton==0&&$GlobalButton==1&&$IKButton==0&&$reConstrainButton==0){reParent;}\n    if ($reConstrainButton==1&&$ManualButton==1&&$IKButton==0){reConstrain_mode_go;}\n    if ($IKButton==1){select -r $session_selected_controls; IK_mode_manual_init;}\n    if ($SplineButton==1){select -r $session_selected_controls; spline_mode_go;}\n}\n\nproc go_mode_cancel()\n{\n    int $ManualButton = `checkBox -q -v ManualCheckBox`;\n    int $AimButton = `checkBox -q -v AimCheckBox`;\n    int $GlobalButton = `checkBox -q -v MakeGlobalCheckBox`;\n    int $reConstrainButton = `checkBox -q -v reConstrainCheckBox`;\n    int $IKButton = `checkBox -q -v IKCheckBox`;\n\n    refresh -suspend 0; ogs -reset;\n\n    reParent_panel_go_to_base;\n\n    if ($ManualButton==1&&$AimButton==0&&$GlobalButton==0&&$reConstrainButton==0){manual_mode_cancel;}\n    if ($ManualButton==0&&$AimButton==1&&$GlobalButton==0){aim_mode_cancel;}\n    if ($ManualButton==0&&$AimButton==0&&$GlobalButton==1){global_mode_cancel;}\n    if ($reConstrainButton==1){reConstrain_mode_cancel;}\n    if ($ManualButton==1&&$GlobalButton==1){global_mode_cancel;}\n    if ($IKButton==1){IK_mode_go_cancel;}\n}\n\nproc mxConstraint (string $type, int $options, string $parent_obj, string $child_obj)\n{\n    //option: 0-align, 1-constrain\n    //$control: 0-all, 1-final control\n\n    /*\n    string $type = \"scaleConstrain_mo\";\n    int $options = 1;\n    string $parent_obj = \"locator1\";\n    string $child_obj = \"joint5\";\n    */\n\n    string $constrain_name[];\n    string $pairBlend_name;\n\n    delete_unused_nodes;\n\n    //option: 0-align, 1-base\n    string $check_char_set[];\n    string $work_names[] = define_work_names({$parent_obj, $child_obj});\n\n    string $parent_node = $work_names[0];\n    string $child_node = $work_names[1];\n\n    if (`attributeExists \"reParent_blend\" $child_obj`==0)\n    {\n        addAttr -ln \"reParent_blend\"  -at double  -min 0 -max 1 -dv 1 $child_obj;\n        setAttr -e-keyable true ($child_obj+\".reParent_blend\");\n    }\n\n    $pairBlend_name = `createNode pairBlend -n ($child_node+\"_com_pairBlend\")`;\n    connectAttr -f ($child_obj+\".reParent_blend\") ($pairBlend_name+\".weight\");\n\n    //point constrain\n    if ($type == \"pointConstrain\")\n    {\n        $constrain_name = `pointConstraint -w 1 -n ($child_node+\"_com_pointConstraint\") -skip x -skip y -skip z $parent_obj $child_obj`;\n        mxConstraint_connect (\"translate\", $constrain_name[0], $pairBlend_name, $child_obj, $options);\n    }\n\n    if ($type == \"pointConstrain_mo\")\n    {\n        $constrain_name = `pointConstraint -w 1 -mo -n ($child_node+\"_com_pointConstraint\") -skip x -skip y -skip z -mo $parent_obj $child_obj`;\n        mxConstraint_connect (\"translate\", $constrain_name[0], $pairBlend_name, $child_obj, $options);\n    }\n\n    //parent constrain\n    if ($type == \"parentConstrain\")\n    {\n        $constrain_name = `parentConstraint -w 1 -n ($child_node+\"_com_parentConstraint\") -skipTranslate x -skipTranslate y -skipTranslate z -skipRotate x -skipRotate y -skipRotate z $parent_obj $child_obj`;\n\n        //connect translates\n        mxConstraint_connect (\"translate\", $constrain_name[0], $pairBlend_name, $child_obj, $options);\n    }\n\n    if ($type == \"parentConstrain_mo\")\n    {\n        $constrain_name = `parentConstraint -w 1 -mo -n ($child_node+\"_com_parentConstraint\")  -skipTranslate x -skipTranslate y -skipTranslate z -skipRotate x -skipRotate y -skipRotate z $parent_obj $child_obj`;\n        mxConstraint_connect (\"translate\", $constrain_name[0], $pairBlend_name, $child_obj, $options);\n    }\n\n    //orient constrain\n    if ($type == \"parentConstrain_mo\"||$type == \"parentConstrain\"||$type == \"orientConstrain_mo\"||$type == \"orientConstrain\")\n    {\n        //define offset\n        shadingNode -n ($child_node+\"_com_tr_offset_mMatrix\") -asUtility multMatrix;\n        connectAttr -f ($child_obj+\".worldMatrix[0]\") ($child_node+\"_com_tr_offset_mMatrix.matrixIn[0]\");\n        connectAttr -f ($parent_obj+\".worldInverseMatrix[0]\") ($child_node+\"_com_tr_offset_mMatrix.matrixIn[1]\");\n        shadingNode -n ($child_node+\"_com_tr_offset_dMatrix\") -asUtility decomposeMatrix;\n        connectAttr -f ($child_node+\"_com_tr_offset_mMatrix.matrixSum\") ($child_node+\"_com_tr_offset_dMatrix.inputMatrix\");\n\n        float $com_parent_offset[] = `getAttr ($child_node+\"_com_tr_offset_mMatrix.matrixSum\")`;\n        delete ($child_node+\"_com_tr_offset_mMatrix\");\n\n        //add attributes\n        if (`attributeExists ($child_node+\"_reParent_pim\") $parent_obj`==0)\n        {\n            addAttr -ln ($child_node+\"_reParent_pim\")  -at fltMatrix $parent_obj;\n        }\n\n        if (`attributeExists ($child_node+\"_reParent_ro\") $parent_obj`==0)\n        {\n            addAttr -ln ($child_node+\"_reParent_ro\") -at long  -dv 0 $parent_obj;\n        }\n\n        string $com_rt_dm = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_dm\") -asUtility decomposeMatrix`;\n        string $com_rt_mm = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_mm\") -asUtility multMatrix`;\n\n        connectAttr -f ($parent_obj+\".worldMatrix[0]\") ($com_rt_mm+\".matrixIn[1]\");\n        connectAttr -force ($com_rt_mm+\".matrixSum\") ($com_rt_dm+\".inputMatrix\");\n\n        if (catchQuiet (`connectAttr -f ($parent_obj+\".\"+$child_node+\"_reParent_ro\") ($com_rt_dm+\".inputRotateOrder\")`) )\n        {\n           connectAttr -f ($parent_obj+\".\"+$child_node+\"_reParent_ro\") ($com_rt_dm+\".inputRotateOrder\");\n        }\n\n        if (catchQuiet (`connectAttr -f ($child_obj+\".rotateOrder\") ($parent_obj+\".\"+$child_node+\"_reParent_ro\")`) )\n        {\n           connectAttr -f ($child_obj+\".rotateOrder\") ($parent_obj+\".\"+$child_node+\"_reParent_ro\");\n        }\n\n        $currentShapeType = `objectType $child_obj`;\n        if ($currentShapeType != \"joint\")\n        {   // objects\n            if (catchQuiet (`connectAttr -f ($parent_obj+\".\"+$child_node+\"_reParent_pim\") ($com_rt_mm+\".matrixIn[2]\")`) )\n            {\n               connectAttr -f ($parent_obj+\".\"+$child_node+\"_reParent_pim\") ($com_rt_mm+\".matrixIn[2]\");\n            }\n\n            if (catchQuiet (`connectAttr -f ($child_obj+\".parentInverseMatrix[0]\") ($parent_obj+\".\"+$child_node+\"_reParent_pim\")`) )\n            {\n               connectAttr -f ($child_obj+\".parentInverseMatrix[0]\") ($parent_obj+\".\"+$child_node+\"_reParent_pim\");\n            }\n\n            setAttr ($com_rt_dm+\".isHistoricallyInteresting\") 0;\n            setAttr ($com_rt_mm+\".isHistoricallyInteresting\") 0;\n        }\n        else\n        {\n            // joints\n            if (`attributeExists ($child_node+\"_reParent_pm\") $parent_obj`==0)\n            {\n                addAttr -ln ($child_node+\"_reParent_pm\") -at fltMatrix $parent_obj;\n\n                addAttr -ln ($child_node+\"_reParent_jo\")  -at double3  $parent_obj;\n                addAttr -ln ($child_node+\"_reParent_joX\")  -at doubleAngle -p ($child_node+\"_reParent_jo\") $parent_obj;\n                addAttr -ln ($child_node+\"_reParent_joY\")  -at doubleAngle -p ($child_node+\"_reParent_jo\") $parent_obj;\n                addAttr -ln ($child_node+\"_reParent_joZ\")  -at doubleAngle -p ($child_node+\"_reParent_jo\") $parent_obj;\n\n                addAttr -ln ($child_node+\"_reParent_jis\")  -at double3  $parent_obj;\n                addAttr -ln ($child_node+\"_reParent_jisX\")  -at double -p ($child_node+\"_reParent_jis\") $parent_obj;\n                addAttr -ln ($child_node+\"_reParent_jisY\")  -at double -p ($child_node+\"_reParent_jis\") $parent_obj;\n                addAttr -ln ($child_node+\"_reParent_jisZ\")  -at double -p ($child_node+\"_reParent_jis\") $parent_obj;\n\n                addAttr -ln ($child_node+\"_reParent_jra\")  -at double3  $parent_obj;\n                addAttr -ln ($child_node+\"_reParent_jraX\")  -at double -p ($child_node+\"_reParent_jra\") $parent_obj;\n                addAttr -ln ($child_node+\"_reParent_jraY\")  -at double -p ($child_node+\"_reParent_jra\") $parent_obj;\n                addAttr -ln ($child_node+\"_reParent_jraZ\")  -at double -p ($child_node+\"_reParent_jra\") $parent_obj;\n            }\n\n            connectAttr -f ($child_obj+\".jointOrient\")     ($parent_obj+\".\"+$child_node+\"_reParent_jo\");\n            connectAttr -f ($child_obj+\".parentMatrix[0]\") ($parent_obj+\".\"+$child_node+\"_reParent_pm\");\n            connectAttr -f ($child_obj+\".inverseScale\")    ($parent_obj+\".\"+$child_node+\"_reParent_jis\");\n\n            setAttr ($parent_obj+\".\"+$child_node+\"_reParent_jraX\") `getAttr ($child_obj+\".rotateAxisX\")`;\n            setAttr ($parent_obj+\".\"+$child_node+\"_reParent_jraY\") `getAttr ($child_obj+\".rotateAxisY\")`;\n            setAttr ($parent_obj+\".\"+$child_node+\"_reParent_jraZ\") `getAttr ($child_obj+\".rotateAxisZ\")`;\n\n            string $com_rt_jo_cm  = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_jo_cm\") -asUtility composeMatrix`;\n            connectAttr -f ($parent_obj+\".\"+$child_node+\"_reParent_jo\") ($com_rt_jo_cm+\".inputRotate\");\n\n            string $com_rt_jis_cm  = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_jis_cm\") -asUtility composeMatrix`;\n            connectAttr -f ($parent_obj+\".\"+$child_node+\"_reParent_jis\") ($com_rt_jis_cm+\".inputScale\");\n\n            string $com_rt_jis_im  = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_jis_im\") -asUtility inverseMatrix`;\n            connectAttr -f ($com_rt_jis_cm+\".outputMatrix\") ($com_rt_jis_im+\".inputMatrix\");\n\n            string $com_rt_jm  = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_jmm\") -asUtility multMatrix`;\n            connectAttr -f ($com_rt_jo_cm+\".outputMatrix\") ($com_rt_jm+\".matrixIn[0]\");\n            connectAttr -f ($com_rt_jis_im+\".outputMatrix\") ($com_rt_jm+\".matrixIn[1]\");\n            connectAttr -f ($parent_obj+\".\"+$child_node+\"_reParent_pm\") ($com_rt_jm+\".matrixIn[2]\");\n\n            string $com_rt_im  = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_im\") -asUtility inverseMatrix`;\n            connectAttr -f ($com_rt_jm+\".matrixSum\") ($com_rt_im+\".inputMatrix\");\n            connectAttr -f ($com_rt_im+\".outputMatrix\") ($com_rt_mm+\".matrixIn[2]\");\n\n            //joint axis\n            string $com_rt_jra_cm  = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_jra_cm\") -asUtility composeMatrix`;\n            connectAttr -f ($parent_obj+\".\"+$child_node+\"_reParent_jra\") ($com_rt_jra_cm+\".inputRotate\");\n\n            string $com_rt_jra_im  = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_jra_im\") -asUtility inverseMatrix`;\n            connectAttr -f ($com_rt_jra_cm+\".outputMatrix\") ($com_rt_jra_im+\".inputMatrix\");\n\n            string $com_rt_jra_m  = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_jramm\") -asUtility multMatrix`;\n            connectAttr -f ($com_rt_jra_im+\".outputMatrix\") ($com_rt_jra_m+\".matrixIn[0]\");\n            connectAttr -f ($com_rt_mm+\".matrixSum\") ($com_rt_jra_m+\".matrixIn[1]\");\n\n            connectAttr -force ($com_rt_jra_m+\".matrixSum\") ($com_rt_dm+\".inputMatrix\");\n\n            setAttr ($com_rt_jo_cm+\".isHistoricallyInteresting\") 0;\n            setAttr ($com_rt_jm+\".isHistoricallyInteresting\") 0;\n            setAttr ($com_rt_im+\".isHistoricallyInteresting\") 0;\n\n            setAttr ($com_rt_jra_cm+\".isHistoricallyInteresting\") 0;\n            setAttr ($com_rt_jra_im+\".isHistoricallyInteresting\") 0;\n            setAttr ($com_rt_jra_m+\".isHistoricallyInteresting\") 0;\n        }\n\n       //connect orient constrain to child\n        string $orientConstrain_name = `createNode orientConstraint -n ($child_node+\"_com_orientConstraint\")`;\n        connectAttr -f ($com_rt_dm+\".outputRotate\") ($orientConstrain_name+\".target[0].targetRotate\");\n        parent $orientConstrain_name ($child_obj);\n\n        mxConstraint_connect (\"rotate\", $orientConstrain_name, $pairBlend_name, $child_obj, $options);\n\n        //add offset\n        if ($type == \"parentConstrain_mo\"||$type == \"orientConstrain_mo\")\n        {\n            setAttr ($com_rt_mm+\".matrixIn[0]\") -type \"matrix\"\n            $com_parent_offset[0] $com_parent_offset[1] $com_parent_offset[2] $com_parent_offset[3] $com_parent_offset[4] $com_parent_offset[5] $com_parent_offset[6] $com_parent_offset[7]\n            $com_parent_offset[8] $com_parent_offset[9] $com_parent_offset[10] $com_parent_offset[11] $com_parent_offset[12] $com_parent_offset[13] $com_parent_offset[14] $com_parent_offset[15];\n        }\n\n    }\n\n    //scale constrain\n    if ($type == \"scaleConstrain\"||$type == \"scaleConstrain_mo\")\n    {\n        //define offset\n        shadingNode -n ($child_node+\"_com_scl_offset_mMatrix\") -asUtility multMatrix;\n        connectAttr -f ($child_obj+\".worldMatrix[0]\") ($child_node+\"_com_scl_offset_mMatrix.matrixIn[0]\");\n        connectAttr -f ($parent_obj+\".worldInverseMatrix[0]\") ($child_node+\"_com_scl_offset_mMatrix.matrixIn[1]\");\n        shadingNode -n ($child_node+\"_com_scl_offset_dMatrix\") -asUtility decomposeMatrix;\n        connectAttr -f ($child_node+\"_com_scl_offset_mMatrix.matrixSum\") ($child_node+\"_com_scl_offset_dMatrix.inputMatrix\");\n\n        float $com_parent_offset[] = `getAttr ($child_node+\"_com_scl_offset_mMatrix.matrixSum\")`;\n        delete ($child_node+\"_com_scl_offset_mMatrix\");\n\n        //add attributes\n        if (`attributeExists ($child_node+\"_reParent_pim\") $parent_obj`==0)\n        {\n            addAttr -ln ($child_node+\"_reParent_pim\")  -at fltMatrix $parent_obj;\n        }\n\n        if (`attributeExists ($child_node+\"_reParent_ro\") $parent_obj`==0)\n        {\n            addAttr -ln ($child_node+\"_reParent_ro\") -at long  -dv 0 $parent_obj;\n        }\n\n        string $com_rt_dm = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_dm\") -asUtility decomposeMatrix`;\n        string $com_rt_mm = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_mm\") -asUtility multMatrix`;\n\n        connectAttr -f ($parent_obj+\".worldMatrix[0]\") ($com_rt_mm+\".matrixIn[1]\");\n        connectAttr -force ($com_rt_mm+\".matrixSum\") ($com_rt_dm+\".inputMatrix\");\n\n        if (catchQuiet (`connectAttr -f ($parent_obj+\".\"+$child_node+\"_reParent_ro\") ($com_rt_dm+\".inputRotateOrder\")`) )\n        {\n           connectAttr -f ($parent_obj+\".\"+$child_node+\"_reParent_ro\") ($com_rt_dm+\".inputRotateOrder\");\n        }\n\n        if (catchQuiet (`connectAttr -f ($child_obj+\".rotateOrder\") ($parent_obj+\".\"+$child_node+\"_reParent_ro\")`) )\n        {\n           connectAttr -f ($child_obj+\".rotateOrder\") ($parent_obj+\".\"+$child_node+\"_reParent_ro\");\n        }\n\n        $currentShapeType = `objectType $child_obj`;\n        if ($currentShapeType != \"joint\")\n        {   // objects\n            if (catchQuiet (`connectAttr -f ($parent_obj+\".\"+$child_node+\"_reParent_pim\") ($com_rt_mm+\".matrixIn[2]\")`) )\n            {\n               connectAttr -f ($parent_obj+\".\"+$child_node+\"_reParent_pim\") ($com_rt_mm+\".matrixIn[2]\");\n            }\n\n            if (catchQuiet (`connectAttr -f ($child_obj+\".parentInverseMatrix[0]\") ($parent_obj+\".\"+$child_node+\"_reParent_pim\")`) )\n            {\n               connectAttr -f ($child_obj+\".parentInverseMatrix[0]\") ($parent_obj+\".\"+$child_node+\"_reParent_pim\");\n            }\n\n            setAttr ($com_rt_dm+\".isHistoricallyInteresting\") 0;\n            setAttr ($com_rt_mm+\".isHistoricallyInteresting\") 0;\n        }\n        else\n        {   // joints\n            if (`attributeExists ($child_node+\"_reParent_pm\") $parent_obj`==0)\n            {\n                addAttr -ln ($child_node+\"_reParent_pm\") -at fltMatrix $parent_obj;\n\n                addAttr -ln ($child_node+\"_reParent_jo\")  -at double3  $parent_obj;\n                addAttr -ln ($child_node+\"_reParent_joX\")  -at doubleAngle -p ($child_node+\"_reParent_jo\") $parent_obj;\n                addAttr -ln ($child_node+\"_reParent_joY\")  -at doubleAngle -p ($child_node+\"_reParent_jo\") $parent_obj;\n                addAttr -ln ($child_node+\"_reParent_joZ\")  -at doubleAngle -p ($child_node+\"_reParent_jo\") $parent_obj;\n\n                addAttr -ln ($child_node+\"_reParent_jis\")  -at double3  $parent_obj;\n                addAttr -ln ($child_node+\"_reParent_jisX\")  -at double -p ($child_node+\"_reParent_jis\") $parent_obj;\n                addAttr -ln ($child_node+\"_reParent_jisY\")  -at double -p ($child_node+\"_reParent_jis\") $parent_obj;\n                addAttr -ln ($child_node+\"_reParent_jisZ\")  -at double -p ($child_node+\"_reParent_jis\") $parent_obj;\n\n                addAttr -ln ($child_node+\"_reParent_jra\")  -at double3  $parent_obj;\n                addAttr -ln ($child_node+\"_reParent_jraX\")  -at double -p ($child_node+\"_reParent_jra\") $parent_obj;\n                addAttr -ln ($child_node+\"_reParent_jraY\")  -at double -p ($child_node+\"_reParent_jra\") $parent_obj;\n                addAttr -ln ($child_node+\"_reParent_jraZ\")  -at double -p ($child_node+\"_reParent_jra\") $parent_obj;\n            }\n\n            catchQuiet (`connectAttr -f ($child_obj+\".jointOrient\")     ($parent_obj+\".\"+$child_node+\"_reParent_jo\")`);\n            catchQuiet (`connectAttr -f ($child_obj+\".parentMatrix[0]\") ($parent_obj+\".\"+$child_node+\"_reParent_pm\")`);\n            catchQuiet (`connectAttr -f ($child_obj+\".inverseScale\")    ($parent_obj+\".\"+$child_node+\"_reParent_jis\")`);\n\n            setAttr ($parent_obj+\".\"+$child_node+\"_reParent_jraX\") `getAttr ($child_obj+\".rotateAxisX\")`;\n            setAttr ($parent_obj+\".\"+$child_node+\"_reParent_jraY\") `getAttr ($child_obj+\".rotateAxisY\")`;\n            setAttr ($parent_obj+\".\"+$child_node+\"_reParent_jraZ\") `getAttr ($child_obj+\".rotateAxisZ\")`;\n\n            string $com_rt_jo_cm  = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_jo_cm\") -asUtility composeMatrix`;\n            connectAttr -f ($parent_obj+\".\"+$child_node+\"_reParent_jo\") ($com_rt_jo_cm+\".inputRotate\");\n\n            string $com_rt_jis_cm  = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_jis_cm\") -asUtility composeMatrix`;\n            connectAttr -f ($parent_obj+\".\"+$child_node+\"_reParent_jis\") ($com_rt_jis_cm+\".inputScale\");\n\n            string $com_rt_jis_im  = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_jis_im\") -asUtility inverseMatrix`;\n            connectAttr -f ($com_rt_jis_cm+\".outputMatrix\") ($com_rt_jis_im+\".inputMatrix\");\n\n            string $com_rt_jm  = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_jmm\") -asUtility multMatrix`;\n            connectAttr -f ($com_rt_jo_cm+\".outputMatrix\") ($com_rt_jm+\".matrixIn[0]\");\n            connectAttr -f ($com_rt_jis_im+\".outputMatrix\") ($com_rt_jm+\".matrixIn[1]\");\n            connectAttr -f ($parent_obj+\".\"+$child_node+\"_reParent_pm\") ($com_rt_jm+\".matrixIn[2]\");\n\n            string $com_rt_im  = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_im\") -asUtility inverseMatrix`;\n            connectAttr -f ($com_rt_jm+\".matrixSum\") ($com_rt_im+\".inputMatrix\");\n            connectAttr -f ($com_rt_im+\".outputMatrix\") ($com_rt_mm+\".matrixIn[2]\");\n\n            //joint axis\n            string $com_rt_jra_cm  = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_jra_cm\") -asUtility composeMatrix`;\n            connectAttr -f ($parent_obj+\".\"+$child_node+\"_reParent_jra\") ($com_rt_jra_cm+\".inputRotate\");\n\n            string $com_rt_jra_im  = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_jra_im\") -asUtility inverseMatrix`;\n            connectAttr -f ($com_rt_jra_cm+\".outputMatrix\") ($com_rt_jra_im+\".inputMatrix\");\n\n            string $com_rt_jra_m  = `shadingNode -n ($child_node+\"_to_\"+$parent_node+\"_com_rt_jramm\") -asUtility multMatrix`;\n            connectAttr -f ($com_rt_jra_im+\".outputMatrix\") ($com_rt_jra_m+\".matrixIn[0]\");\n            connectAttr -f ($com_rt_mm+\".matrixSum\") ($com_rt_jra_m+\".matrixIn[1]\");\n\n            connectAttr -force ($com_rt_jra_m+\".matrixSum\") ($com_rt_dm+\".inputMatrix\");\n\n            setAttr ($com_rt_jo_cm+\".isHistoricallyInteresting\") 0;\n            setAttr ($com_rt_jm+\".isHistoricallyInteresting\") 0;\n            setAttr ($com_rt_im+\".isHistoricallyInteresting\") 0;\n\n            setAttr ($com_rt_jra_cm+\".isHistoricallyInteresting\") 0;\n            setAttr ($com_rt_jra_im+\".isHistoricallyInteresting\") 0;\n            setAttr ($com_rt_jra_m+\".isHistoricallyInteresting\") 0;\n        }\n\n       //connect scale constrain to child\n        string $scaleConstrain_name = `createNode scaleConstraint -n ($child_node+\"_com_scaleConstraint\")`;\n        connectAttr -f ($com_rt_dm+\".outputScale\") ($scaleConstrain_name+\".target[0].targetScale\");\n        parent $scaleConstrain_name ($child_obj);\n\n        mxConstraint_connect (\"scale\", $scaleConstrain_name, $pairBlend_name, $child_obj, $options);\n\n        if ($type == \"scaleConstrain_mo\")\n        {\n            setAttr ($com_rt_mm+\".matrixIn[0]\") -type \"matrix\"\n            $com_parent_offset[0] $com_parent_offset[1] $com_parent_offset[2] $com_parent_offset[3] $com_parent_offset[4] $com_parent_offset[5] $com_parent_offset[6] $com_parent_offset[7]\n            $com_parent_offset[8] $com_parent_offset[9] $com_parent_offset[10] $com_parent_offset[11] $com_parent_offset[12] $com_parent_offset[13] $com_parent_offset[14] $com_parent_offset[15];\n        }\n    }\n\n    if (`attributeExists \"reParent_blend\" $parent_obj`==1)\n    {\n        if(size(`listConnections -d 1 ($parent_obj+\".reParent_blend\")`)==0)\n        {\n            deleteAttr -attribute \"reParent_blend\" $parent_obj;\n        }\n    }\n}\n\nproc mxConstraint_connect (string $mode, string $constrain_name, string $pairBlend_name, string $child_obj, int $options )\n{\n    string $type, $Type, $TypeC;\n\n    if ($mode==\"translate\")\n    {\n        $type = \"translate\";\n        $Type = \"Translate\";\n        $TypeC = \"Translate\";\n        setAttr ($constrain_name+\".enableRestPosition\") 0;\n    }\n    if ($mode==\"rotate\")\n    {\n        $type = \"rotate\";\n        $Type = \"Rotate\";\n        $TypeC =\"Rotate\";\n\n    }\n    if ($mode==\"scale\")\n    {\n        $type = \"scale\";\n        $Type = \"Scale\";\n        $TypeC =\"Translate\";\n    }\n\n    string $axes[] = {\"X\", \"Y\", \"Z\"};\n    for ($axis in $axes)\n    {\n        connectAttr -f ($constrain_name+\".constraint\"+$Type+$axis) ($pairBlend_name+\".in\"+$TypeC+$axis+\"2\");\n\n        $check_char_set = `listConnections -p 1 -t \"character\" ($child_obj+\".\"+$type+$axis)`;\n        if (size($check_char_set)!=0){connectAttr -f ($pairBlend_name+\".out\"+$TypeC+$axis) $check_char_set[size($check_char_set)-1];}\n        else\n        {\n            if(`getAttr -l ($child_obj+\".\"+$type+$axis)`!=1)\n            {\n                string $anim_curve[] = `listConnections -p 1  -d 0($child_obj+\".\"+$type+$axis)`;\n                for ($i=0;$i<size($anim_curve);$i++)\n                {\n                    if (`gmatch $anim_curve[$i] \"*dagSetMembers*\"`==1)\n                    {\n                        string $array[]= {$anim_curve[$i]};\n                        $anim_curve = stringArrayRemove($array, $anim_curve);\n                    }\n                }\n                if( $anim_curve[0] != \"\")\n                {\n                    connectAttr -f $anim_curve[0] ($pairBlend_name+\".in\"+$TypeC+$axis+\"1\");\n                    connectAttr -f ($pairBlend_name+\".out\"+$TypeC+$axis) ($child_obj+\".\"+$type+$axis);\n                }\n                else\n                {\n                    connectAttr -f ($constrain_name+\".constraint\"+$Type+$axis) ($child_obj+\".\"+$type+$axis);\n                }\n            }\n        }\n    }\n    if ($options==0)\n    {\n        delete $constrain_name;\n        if (`attributeExists \"reParent_blend\" $child_obj`==1)\n        {\n            deleteAttr -attribute \"reParent_blend\" $child_obj;\n        }\n    }\n}"
	-width 34 
	-height 34 
	-manage 1 
	-visible 1 
	-annotation "reParent"
	-label "reParent"
	- imageOverlayLabel "reParent" 
    -image1 "commandButton.png" 
	-sourceType "mel"
	-style "iconOnly" 
	-parent $currentShelf;


