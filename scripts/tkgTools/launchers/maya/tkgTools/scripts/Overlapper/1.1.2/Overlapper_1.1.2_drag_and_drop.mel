string $currentShelf = `tabLayout -query -selectTab $gShelfTopLevel`;
shelfButton
	-command "//***********************************************//\n//                                               //\n//           Overlapper release 1.1.2            //\n//    Tool for creating overlapping action       //\n//      copyright Dmitrii Kolpakov 2018          //\n//                                               //\n//***********************************************//\n\nglobal proc OverlapperRelease()\n{\n\toptionVar -intValue animBlendingOpt 1;\n\n\tif ((`window -ex OverlapperPanel`)==true)\n\tdeleteUI OverlapperPanel;\n\t\n\tCleanUpProc;\n\t\n\tstring $window = `window  -title \"Overlapper 1.1.2\"\n\t       -toolbox 1\n\t       -s 1\n\t       -menuBar 1 \n\t       -widthHeight 172 133\n\t        OverlapperPanel`;\n \n    menu  -l \"Advanced\" -to 0 aboutMenu;\n    menuItem  -l \"Debug mode\" -cb 0 -ann \"Don't delete Overlapping offset controls. Expert mode. Be careful\"  debMode;\n    menuItem  -l \"Bake on anim layer\" -cb 0 -ann \"Each new overlapping animation will be baked on new animation layer\"  onLayerMode;\n\tmenuItem  -l \"Adaptive scale\" -cb 1 -ann \"Overlap Scale parameter automaticly changes for distance between selected controls\" adScaleMode;\n\tmenuItem  -l \"Create selection set\" -cb 1 -ann \"Create selection set of overlapped controls for last overlapper session\" ovCrSelSet;\n\tmenuItem  -l \"Delete redundant\" -cb 0 -ann \"Delete all redundant keys on ovelapped controls\" DelRed;    \n\tmenuItem  -l \"CleanUp\" -ann \"Delete all Oveplapper stuff\" -c CleanUpProc;    \n    \n    menu -l \"Help\" -to 0 helpMenu;\n    menuItem -l \"Intro\"  -c hIntro;\n    menuItem -l \"Tutorial\"  -c hTutorial;\n\n \tcolumnLayout;   \n    rowColumnLayout -nc 2 ;\n    text -label \"     Softness    \" -align \"center\" -ann \"More animation velocity, less softness\";\n    floatField -v 3 -w 10 -precision 2 timeShift;\n    text -label \"     Scale    \" -align \"center\" -ann \"More Scale, more overlap apmlitude\";\n    floatField -v 1.0 -w 10 -precision 2 globalScale;\n \trowColumnLayout -nc 1;\n    rowColumnLayout -nc 1;\n    checkBox -ann \"Add wind animation on overlapped controls\" -label \" Wind\" -v 0 -h 18  WindCheckBox;\n    setParent..;\n    setParent..;\n    rowColumnLayout -nc 2;\n    text  -label \" Scale\" -align \"center\" -ann \"More Scale, more wind apmlitude\";\n    floatField -v 1 -w 48 -bgc 0.45 0.52 0.57  -precision 2 windScale; \n    text -label \" Speed \" -align \"center\"  -ann \"More Speed, more wind frequence\";\n    floatField -v 1 -w 20 -precision 2 -bgc 0.45 0.52 0.57 windSpeed;\n    setParent..;     setParent..; setParent..; \n    rowColumnLayout -nc 1;\n    string $theLayout =`frameLayout -cc OverlapperPanelBig -ec OverlapperPanelSmall -collapsable 1 - collapse 1 -l \"Options\"`;\n\n    checkBox -l \"Don't use first controls\" -v 0 -ann \"Don't use first controls in selected sequence of controls\" firstCtrl;\n    checkBox -l \"Add translate\" -v 0 -ann \"Add translate overlap for selected controls\" IKmode;\n    checkBox  -l \"Hierarchy\" -v 0 -ann \"Add all controls below the hierarchy. Works with Advanced Skeleton rigs\" HierarchyCheckBox;\n    checkBox  -l \"Cycle\" -v 0 -ann \"Create seamless overlapping action for cycle animation. The first and the last keys on timeline must be the same\" CycleCheckBox; \n\n    setParent..;\n\n\tbutton  -w 160 -label \"Overlap\" -bgc 0.85 0.85 0.85 -command \"OverlapperStarter\";\n\tshowWindow $window;\n\twindow -edit -widthHeight 163 163 OverlapperPanel;\n}\n\nglobal proc OverlapperPanelBig()\n{window -edit -widthHeight 163 163 OverlapperPanel;}\n\nglobal proc OverlapperPanelSmall()\n{window -edit -widthHeight 163 236 OverlapperPanel;}\n\nproc hIntro()\n{launch -web \"https://vimeo.com/286860063\";}\n\nproc hTutorial()\n{launch -web \"https://vimeo.com/287771379\";}\n\nglobal proc CleanUpProc()\n{\nif(`objExists \"*_OverlapJoint*\"`) \t\t\t{delete \"*_OverlapJoint*\";}\nif(`objExists \"*:*_OverlapJoint*\"`) \t\t{delete \"*:*_OverlapJoint*\";}\nif(`objExists \"*:*:*_OverlapJoint*\"`)       {delete \"*:*:*_OverlapJoint*\";}\nif(`objExists \"*overlapOffsetLocator*\"`)    {delete \"*overlapOffsetLocator*\";}\nif(`objExists \"overlapResultLocatorOut*\"`)  {delete \"overlapResultLocatorOut*\";}\nif(`objExists \"TEMP_Offset_locator*\"`)   \t{delete (\"TEMP_Offset_locator*\");}\nif(`objExists \"*overlapOffsetIKLocator*\"`)  {delete \"*overlapOffsetIKLocator*\";}\nif(`objExists \"OverlapperSet\"`)             {delete \"OverlapperSet\";}\nif(`objExists \"OverlapperWorkSet\"`)         {delete \"OverlapperWorkSet\";}\n\nprogressWindow -endProgress;\n\n}\n\nglobal proc OverlapperStarter()\n{\n    float $startTime = `timerX`;\n\n\tif(`objExists \"OverlapperWorkSet\"`){delete \"OverlapperWorkSet\";}\n\t//time range\n\tglobal string $gPlayBackSlider;\n\tglobal string $FirstSelectedCtrl;\n\tglobal int $timeStart, $timeEnd;\n\tglobal int $timeStartGlobal, $timeEndGlobal;\n\tfloat $RangeStart, $Range[];\n\tfloat $totalTime;\n\t$Range = `timeControl -q -ra $gPlayBackSlider`;\n\t$RangeStart = $Range[1] - $Range[0];\n\tint $RangeStartInt = $RangeStart;\n\n\tif($RangeStartInt == 1)\n\t\t{$timeStartGlobal = `playbackOptions -q -min`; $timeEndGlobal = `playbackOptions -q -max`;}\n\telse\n\t\t{$timeStartGlobal = $Range[0]; $timeEndGlobal = $Range[1];}\n\t\n\t\t\tstring $ctrlsAmount[] = `ls -sl`;\n\t\t\t$FirstSelectedCtrl = $ctrlsAmount[0];\n    \t\t\t\n\t\t\t// MANY CONTROLS\n\t\t\tif(`size($ctrlsAmount)`>1)\n\t\t\t\t{ \n\t\t\t\t\t\t// some ctrls with hierarchy\n\t\t\t\t\tif (`checkBox -q -v HierarchyCheckBox`==1) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor ($SelCtrl in $ctrlsAmount)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tselect -r $SelCtrl; progressWindow -endProgress; OverlapperWithHierarchy; CycleFinal;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t// some ctrls without hierarchy\n\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tOverlapper; CycleFinal;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t// ONE CONTROLS\t\n\t\t\telse {\n\n\t\t\t\t\t// with hierarchy\n\t\t\t\t\tif (`checkBox -q -v HierarchyCheckBox`==1) \n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprogressWindow -endProgress; OverlapperWithHierarchy; CycleFinal;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t// without hierarchy\n\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tconfirmDialog  -b \"Ok\" -t \"Oooops..\" -m \"For correct work you should select more than one control \\n            or switch on Hierarchy mode in Options \\n\\nIf you want overlap one control: \\n    1. select two neighboring controls \\n    2. check  `Don't use first control`  in Options \";\n\t\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t}\n\n    $totalTime = `timerX -startTime $startTime`;\n    print (\"Total Overlapper Time: \"+$totalTime+\" seconds\"+\"\\n\");\n}\n\n////////////////// Hierarchy work //////////////////////\n\nproc OverlapperWithHierarchy()\n{    \n\t\tstring $ArraySecondGuys[];\n\t\tstring $parentArray[];\n\t\tstring $nodesArray[];\n\t\tstring $Chain[];        \n\t\tstring $lastElement;\n\t\tstring $allSceneNurbes[];\n\t\tstring $currentShapeType;\n\t\tstring $CtrlByHierarchy[];\n\t\tstring $TypeOfObject;\n\t\tint $ClearElemwnts;\n\t\tclear ($allSceneNurbes);\n\t\t\n\t\t// find type of selection\n\t\tstring $currentCtrls[] = `ls -sl`;\n\t\tselect -r $currentCtrls[0];\n\t\tpickWalk -d down;\n\t\tstring $currentShape[] = `ls -sl`;\n\t\t$currentShapeType = `objectType $currentShape[0]`;\n\t\t\n\t\tselect -r $currentCtrls; select -hi;\n\t\t$currentCtrls = `ls -sl`;\n\t\t\n\t\tif( `objExists \"*Root_M\"`||`objExists \"*:Root_M\"`||`objExists \"*DeformationSystem\"`||`objExists \"*:DeformationSystem\"`||`objExists \"*MotionSystem\"`||`objExists \"*:MotionSystem\"`||`objExists \"*FitSkeleton\"`||`objExists \"*:FitSkeleton\"`)\n\t\t\t {$currentShapeType = \"nurbsCurve\";}\n\t\t\n\t\t$allSceneNurbes = `listTransforms (\"-type \"+$currentShapeType)`;\n\t\t\n\t\tstring $Stuff[] = stringArrayRemove($allSceneNurbes, $currentCtrls);\n\t\t$CtrlByHierarchy = stringArrayRemove($Stuff, $currentCtrls);\n\t\tselect -r $CtrlByHierarchy;\n\t\t\n\t\tint $amountOfAllCtrls = `size($CtrlByHierarchy)`;\n\t\tstring $LastCtrlInHierarchy = $CtrlByHierarchy[(`size($CtrlByHierarchy)`)-1];\n\t\tclear ($Chain);\n\n\t\tfor ($i=0; $i<$amountOfAllCtrls; ++$i )\n\t\t{\t\n\t\t\tselect -r $CtrlByHierarchy[$i];\n\t\t\tselect -hi;\n\t\t\tstring $currentCtrls[] = `ls -sl`;\n\t\t\tstring $Stuff[] = stringArrayRemove($allSceneNurbes, $currentCtrls);\n\t\t\tstring $CurrentCtrlByHierarchy[] = stringArrayRemove($Stuff, $currentCtrls);\n\t\t\t\t\n\t\t        if ($CtrlByHierarchy[$i+1]==$CurrentCtrlByHierarchy[1]&&$CurrentCtrlByHierarchy[0]!=$LastCtrlInHierarchy)\n\t\t        {\n\t\t            stringArrayInsertAtIndex(100, $Chain, $CurrentCtrlByHierarchy[0]);\n\t\t\t\t\tselect -r $CurrentCtrlByHierarchy[0];\n\t\t        }\n\t\t        else \n\t\t        {\t\n\t\t\t\t\tstringArrayInsertAtIndex(100, $Chain, $CurrentCtrlByHierarchy[0]);\n\t\t        \tselect -r $Chain;\n\t\t        \tOverlapper;\n\t\t        \tstring $CtrlByHierarchy[] = stringArrayRemove($Chain, $CtrlByHierarchy); clear ($Chain);\n\n\t\t        }\n\t\t        \n\t\t\tint $amountOfAllCtrls = `size($CtrlByHierarchy)`;      \n\t\t}\n}\n\n///////////// Overlapper /////////////\n\nproc Overlapper()\n{\n\tcycleCheck -e 1;\n\tglobal int $timeStartGlobal, $timeEndGlobal;\n\tglobal int $timeStart, $timeEnd;\n\t$timeStart = $timeStartGlobal;\n\t$timeEnd = $timeEndGlobal;\n\tint $ClearElemwnts;\n\t\t\n\tfloat $OverTimeShift = `floatField -q -v timeShift`;\n\tfloat $OverGlobalScale = `floatField -q -v globalScale`; \n\tif($OverGlobalScale<=0){$OverGlobalScale=0.001;}\n\tfloat $windScaleValue = `floatField -q -v windScale`;\n\tfloat $windSpeedValue = `floatField -q -v windSpeed`;\n\t\n\tint $deBugMode = `menuItem -query -cb  debMode`;\n\tint $onLayerSwitch = `menuItem -query -cb  onLayerMode`;\n\tint $adptScale = `menuItem -query -cb  adScaleMode`;\n\tint $OvSelectionSet = `menuItem -query -cb  ovCrSelSet`;\n\n\tint $TRANSLATEmode = `checkBox -q -v IKmode`;\n\tint $DoNotUseFirstCtrl = `checkBox -q -v firstCtrl`;\n\tint $WindSwitch = `checkBox -q -v WindCheckBox`;\n\tint $CycleCheckBox = `checkBox -q -v CycleCheckBox`;\n\t\n\tfloat $timeShift = $OverTimeShift;\n\tfloat $overlapIntensity = $OverGlobalScale;\n\n\tfloat $scaleModulator = 5;\n\tstring $overlapJointsArray[];\n\tfloat $overlapJointsLenghtArray[];\n\tfloat $averageLenghtJoints;\n\tglobal float $sumLenghtJoints;\n\tstring $ControlName[];\n\tfloat $cycleLenghts;\n\tstring $SelectedControlsClearNameSpaces[];\n\tstring $SelectedControls[];\n\tglobal string $eulerFilterCurves[];\n\tglobal string $FirstSelectedCtrl;\n\tint $TRmode;\n\tint $w;\n\tstring $CurentWindControl;\n\t\n\tclear ($overlapJointsArray);\n\tclear ($overlapJointsLenghtArray);\n\tclear ($SelectedControls);\n\tclear ($SelectedControlsClearNameSpaces);\n\n\t//time range\n\tfloat $currentTime =`currentTime -query`;\n\t\n\t//set frame\n\tcurrentTime - e $timeStart;\n\t\n\t$SelectedControls = `ls -sl`;\n\t\n\tint $iLoop = `size($SelectedControls)`;\n\n\t$DividedName = `tokenize $SelectedControls[0] \":\" $ControlName`;\n\tif ($DividedName>1) \n\t{\n\t\tfor ($i=0; $i<$iLoop; ++$i)\n\t\t\t{\t\n\t\t\t\t$DividedNameCurve = `tokenize $SelectedControls[$i] \":\" $ControlName`;\n\t\t\t\t$ClearNameCtrl = $ControlName[($DividedNameCurve-1)];\n\t\t\t\tstringArrayInsertAtIndex(100, $SelectedControlsClearNameSpaces, $ClearNameCtrl);\t\n\t\t\t}\n\t}\n\telse {$SelectedControlsClearNameSpaces=$SelectedControls;}\n\t\n\tselect -cl;\n\n\t//progressBar\n    int $amount = 0;\n    float $prAmount = 100/$iLoop;\n\n     progressWindow\n         -title \"progress...\"\n         -progress $amount\n         -status \"Progress: 0%\"\n         -isInterruptable true;\n\n\t// create locators for Joints\n\tfor ($i=0; $i<$iLoop; ++$i)\n\t\t{\t\n\t\t\tspaceLocator -n (\"TEMP_Offset_locator\"+$i);\n\t\t    select -r $SelectedControls[$i] (\"TEMP_Offset_locator\"+$i);\n\t\t\tparentConstraint -weight 1;\n\t\t}\n\t\t\tselect -cl;\n\n\t// create Joints\n\t\n\tfor ($i=0; $i<$iLoop; ++$i )\n\t\t{\t\n\t\t\tfloat $WorldTr[] = `xform -q -ws -t (\"TEMP_Offset_locator\"+$i)`;\n\t\t\tjoint -rad 1 -n ($SelectedControls[$i]+\"_OverlapJoint\") -p $WorldTr[0] $WorldTr[1] $WorldTr[2];\n\n\t\t\t\tif ($i>0)\n\t\t\t\t{\n\t\t\t\t\tjoint -e -zso -oj xyz -sao yup ($SelectedControls[$i-1]+\"_OverlapJoint\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\tstringArrayInsertAtIndex( 100, $overlapJointsArray, ($SelectedControls[$i]+\"_OverlapJoint\") );\n\t\t}\n\t\t\n\tdelete (\"TEMP_Offset_locator*\");\n\n\tint $overlapJointsAnmount = `size($SelectedControls)`;\n    select -r ($overlapJointsArray[$overlapJointsAnmount-1]);\n\t\t\n\tduplicate -rr;\n\tstring $LastOrientJoints[] = `ls -sl`;\n\tmove -r -ls -wd 2 0 0 ;\n\tfloat $WorldLastTr[] = `xform -q -ws -t $LastOrientJoints[0]`;\n\tselect -r ($SelectedControls[$i-1]+\"_OverlapJoint\");\n\tjoint -rad 1 -n ($SelectedControls[$i-1]+\"LastOrientJoint\") -p $WorldLastTr[0] $WorldLastTr[1] $WorldLastTr[2];\n\tjoint -e -zso -oj xyz -sao yup ($SelectedControls[$i-1]+\"_OverlapJoint\");\n\tdelete $LastOrientJoints;\n\t$LastOrientJoints = `ls -sl`;\n\tstringArrayInsertAtIndex( 100, $overlapJointsArray, $LastOrientJoints[0]);\n\tselect -r $overlapJointsArray;\n\tjoint -e  -oj xyz -secondaryAxisOrient zup -ch -zso;\n\tclear ($overlapJointsLenghtArray);\n\n\t//joints lengths\n\tfor ($i=1; $i<($iLoop+1); ++$i )\n\t\t{\t\n\t\t\tfloat $DistanceBetween = `getAttr ($overlapJointsArray[$i]+\".translateX\")`;\n\t\t\tfloatArrayInsertAtIndex( 100, $overlapJointsLenghtArray, $DistanceBetween);\n\t\t}\n\t\n\t//average\n\tint $JointsLentghtsAmount = `size($overlapJointsLenghtArray)`;\n\t\n\t$sumLenghtJoints = 0;\n\tfor ($i=0; $i<($JointsLentghtsAmount); ++$i )\n\t\t{\t\n\t\t\t$sumLenghtJoints = $sumLenghtJoints + $overlapJointsLenghtArray[$i];\n\t\t}\n\t\t\t\t\n\t$averageLenghtJoints = ($sumLenghtJoints-2)/$JointsLentghtsAmount;\n\tsetAttr ($SelectedControls[$i-1]+\"LastOrientJoint.translateX\") $averageLenghtJoints;\n\t\n    // constrain joint to controls\n    for ($i=0; $i<$iLoop; ++$i)\n    \t{\t\n    \t\tselect -r $SelectedControls[$i] ($SelectedControls[$i]+\"_OverlapJoint\");\n    \t\tpointConstraint  -weight 1 -mo;\n    \t\torientConstraint -weight 1 -mo;\n    \t}\n\n\t// bake jonts\n\tselect -r $overlapJointsArray;\n\tbakeResults \n\t\t-simulation 0\n\t    -t ($timeStart+\":\"+$timeEnd)\n\t    -sampleBy 1 \n\t    -disableImplicitControl 1 \n\t    -preserveOutsideKeys 1 \n\t    -sparseAnimCurveBake 0 \n\t    -bakeOnOverrideLayer 0 \n\t    -minimizeRotation 0\n\t    $overlapJointsArray;\n\tdelete -constraints;\n\n\t// Cycling (copy curves, add time)\n\tif ($CycleCheckBox == 1)\n\t{\n        if ($DoNotUseFirstCtrl==1)\n        {\n\t\t\tfor ($i=1; $i<($iLoop); ++$i )\n\t\t    {\n\t\t    \tselectKey -r -k -t ($timeStart+\":\"+$timeEnd) ($SelectedControlsClearNameSpaces[$i]+\"_OverlapJoint_translateX\")\n\t\t\t\t\t\t\t\t\t    \t\t\t\t\t  ($SelectedControlsClearNameSpaces[$i]+\"_OverlapJoint_translateY\")\n\t\t\t\t\t\t\t\t\t    \t\t\t\t\t  ($SelectedControlsClearNameSpaces[$i]+\"_OverlapJoint_translateZ\")\n\t\t\t\t\t\t\t\t\t    \t\t\t\t\t  ($SelectedControlsClearNameSpaces[$i]+\"_OverlapJoint_rotateX\")\n\t\t\t\t\t\t\t\t\t    \t\t\t\t\t  ($SelectedControlsClearNameSpaces[$i]+\"_OverlapJoint_rotateY\")\n\t\t\t\t\t\t\t\t\t    \t\t\t\t\t  ($SelectedControlsClearNameSpaces[$i]+\"_OverlapJoint_rotateZ\");\t\t  \n\t\t    \tcopyKey;\n\t\t\t\tpasteKey -time $timeEnd -float $timeEnd -option insert -copies 2 -connect 0 -timeOffset 0 -floatOffset 0 -valueOffset 0;\n\t\t\t\tselect -cl  ;     \t\t\n\t\t    }\n        }\n   \t\telse\n   \t\t{\t\n   \t\t\tfor ($i=0; $i<($iLoop-1); ++$i )\n            {\n            \tselectKey -r -k -t ($timeStart+\":\"+$timeEnd) ($SelectedControlsClearNameSpaces[$i]+\"_OverlapJoint_translateX\")\n        \t\t\t\t\t\t\t    \t\t\t\t\t  ($SelectedControlsClearNameSpaces[$i]+\"_OverlapJoint_translateY\")\n        \t\t\t\t\t\t\t    \t\t\t\t\t  ($SelectedControlsClearNameSpaces[$i]+\"_OverlapJoint_translateZ\")\n        \t\t\t\t\t\t\t    \t\t\t\t\t  ($SelectedControlsClearNameSpaces[$i]+\"_OverlapJoint_rotateX\")\n        \t\t\t\t\t\t\t    \t\t\t\t\t  ($SelectedControlsClearNameSpaces[$i]+\"_OverlapJoint_rotateY\")\n        \t\t\t\t\t\t\t    \t\t\t\t\t  ($SelectedControlsClearNameSpaces[$i]+\"_OverlapJoint_rotateZ\");\t\t  \n            \tcopyKey;\n        \t\tpasteKey -time $timeEnd -float $timeEnd -option insert -copies 2 -connect 0 -timeOffset 0 -floatOffset 0 -valueOffset 0;\n        \t\tselect -cl  ;     \t\t\n            } \n\t\t } \n\t\t   \n\t$cycleLenghts = $timeEnd-$timeStart;\n\t$timeEnd = $timeEnd+2*$cycleLenghts;\n\t}\n\n    if($DoNotUseFirstCtrl==1) {$TRmode=1;} else {$TRmode=0;}\n\n\t// Overlaping\n\tfor ($i=$TRmode; $i<$iLoop; ++$i )\n\t\t{\n\t\t \t//progressBar\t\n    \t\t$amount += $prAmount;\t\t\n\t\t\tprogressWindow -edit\n\t\t\t-progress $amount\n\t\t\t-status (\"Progress: \"+$amount+\"%\");\n\n\t\t\t//create locator\n\t\t\tspaceLocator -n (\"overlapOffsetLocator\"+$i);\n\t\t\tselect -r $overlapJointsArray[$i] (\"overlapOffsetLocator\"+$i);\n\t\t\tstring $temps[] = `pointConstraint -offset 0 0 0 -weight 1`;\n\t\t\tdelete $temps;\n\t\t\t$temps = `orientConstraint -offset 0 0 0 -weight 1`;\n\t\t\tdelete $temps;\n\t\t\t\n\t\t\t//create IK locator\n\t\t\tspaceLocator -n (\"overlapOffsetIKLocator\"+$i);\n\t\t\tselect -r $overlapJointsArray[$i] (\"overlapOffsetIKLocator\"+$i);\n\t\t\t$temps = `pointConstraint -offset 0 0 0 -weight 1`;\n\t\t\tdelete $temps;\n\t\t\t$temps = `orientConstraint -offset 0 0 0 -weight 1`;\n\t\t\tdelete $temps;\n\t\t\t\n\t\t\tselect -r (\"overlapOffsetLocator\"+$i);\n\t\t\tif ($adptScale==1){$scaleModulator = $averageLenghtJoints;}\n\t\t\t$overlapIntensityMult = $averageLenghtJoints/$overlapIntensity*5;\n\t\t\tmove  -r -os -ls $overlapIntensityMult 0 0 ;\n\t\t\tselect -r $overlapJointsArray[$i] (\"overlapOffsetLocator\"+$i);\n\t\t\tparentConstraint -mo -weight 1;\n\t\t\t\n\t\t\tselect -r $overlapJointsArray[$i] (\"overlapOffsetIKLocator\"+$i);\n\t\t\tparentConstraint -mo -weight 1;\n\t\n\t\t\tbakeResults -simulation 0 \n\t\t\t    -t ($timeStart+\":\"+$timeEnd)\n\t\t\t    -sampleBy 1 \n\t\t\t    -disableImplicitControl 1 \n\t\t\t    -preserveOutsideKeys 1 \n\t\t\t    -sparseAnimCurveBake 0 \n\t\t\t    -bakeOnOverrideLayer 0     \n\t\t\t    -minimizeRotation 0 \n\t\t\t    -controlPoints 0\n\t\t\t    -at \"tx\" \n                -at \"ty\" \n                -at \"tz\" \n                -at \"rx\" \n                -at \"ry\" \n                -at \"rz\" \n\t\t\t    -shape 0 \n\t\t\t    (\"overlapOffsetLocator\"+$i) (\"overlapOffsetIKLocator\"+$i);    \n\n\t\t\tfilterCurve (\"overlapOffsetLocator\"+$i+\"_rotateX\")(\"overlapOffsetLocator\"+$i+\"_rotateY\")(\"overlapOffsetLocator\"+$i+\"_rotateZ\");\t\n\t\t\tspaceLocator -n (\"overlapOffsetLocatorWind\"+$i);\n\t\t\tparent (\"overlapOffsetLocatorWind\"+$i) (\"overlapOffsetLocator\"+$i);\n\t\t\tmakeIdentity -apply false -t 1 -r 1 -s 1;\n\n\t\t\tfloat $timeShiftNeg = -1*$timeShift;\n\t\t\tfloat $timeShiftCurrent = $timeShift+1;\n\n\t\t    keyframe -e -iub true -r -o over -tc $timeShift (\"overlapOffsetLocator\"+$i+\"_translateX\");\n\t\t\tkeyframe -e -iub true -r -o over -tc $timeShift (\"overlapOffsetLocator\"+$i+\"_translateY\");\n\t\t\tkeyframe -e -iub true -r -o over -tc $timeShift (\"overlapOffsetLocator\"+$i+\"_translateZ\");\n\t\t\tkeyframe -e -iub true -r -o over -tc $timeShift (\"overlapOffsetIKLocator\"+$i+\"_translateX\");\n\t\t\tkeyframe -e -iub true -r -o over -tc $timeShift (\"overlapOffsetIKLocator\"+$i+\"_translateY\");\n\t\t\tkeyframe -e -iub true -r -o over -tc $timeShift (\"overlapOffsetIKLocator\"+$i+\"_translateZ\");\n\t\t\tkeyframe -e -iub true -r -o over -tc ($timeShift*$OverGlobalScale) (\"overlapOffsetLocator\"+$i+\"_rotateX\");\n\t\t\tkeyframe -e -iub true -r -o over -tc ($timeShift*$OverGlobalScale) (\"overlapOffsetLocator\"+$i+\"_rotateY\");\n\t\t\tkeyframe -e -iub true -r -o over -tc ($timeShift*$OverGlobalScale) (\"overlapOffsetLocator\"+$i+\"_rotateZ\");\n\n\t\t\tselectKey -add -k -t $timeShiftCurrent (\"overlapOffsetLocator\"+$i+\"_translateX\");\n\t\t\tselectKey -add -k -t $timeShiftCurrent (\"overlapOffsetLocator\"+$i+\"_translateY\");\n\t\t\tselectKey -add -k -t $timeShiftCurrent (\"overlapOffsetLocator\"+$i+\"_translateZ\");\n\t\t\tselectKey -add -k -t $timeShiftCurrent (\"overlapOffsetIKLocator\"+$i+\"_translateX\");\n\t\t\tselectKey -add -k -t $timeShiftCurrent (\"overlapOffsetIKLocator\"+$i+\"_translateY\");\n\t\t\tselectKey -add -k -t $timeShiftCurrent (\"overlapOffsetIKLocator\"+$i+\"_translateZ\");\n\t\t\tselectKey -add -k -t ($timeShiftCurrent*$OverGlobalScale) (\"overlapOffsetLocator\"+$i+\"_rotateX\");\n\t\t\tselectKey -add -k -t ($timeShiftCurrent*$OverGlobalScale) (\"overlapOffsetLocator\"+$i+\"_rotateY\");\n\t\t\tselectKey -add -k -t ($timeShiftCurrent*$OverGlobalScale) (\"overlapOffsetLocator\"+$i+\"_rotateZ\");\n\n\t\t\tkeyframe -animation keys -option over -relative -timeChange $timeShiftNeg;\n\n\t\t\tspaceLocator -n (\"overlapInLocator_first_\"+$i);\n\t\t\tspaceLocator -n (\"overlapInLocator_second_\"+$i);\n\t\t\tspaceLocator -n (\"overlapResultLocator_\"+$i);\n\t\t\tparent (\"overlapInLocator_first_\"+$i) ($SelectedControls[$i]+\"_OverlapJoint\");\n\t\t\tparent (\"overlapInLocator_second_\"+$i) ($SelectedControls[$i]+\"_OverlapJoint\");\n\t\t\tparent (\"overlapResultLocator_\"+$i) ($SelectedControls[$i]+\"_OverlapJoint\");\n\t\t\tselect -r (\"overlapInLocator_first_\"+$i) (\"overlapInLocator_second_\"+$i) (\"overlapResultLocator_\"+$i);\n\t\t\tmakeIdentity -apply false -t 1 -r 1 -s 1;\n\t\t\tselect -r(\"overlapInLocator_second_\"+$i);\n\t\t\tmove  -r -os -ls $overlapIntensityMult 0 0 ;\t\t\n\t\t\tselect -r (\"overlapInLocator_first_\"+$i);\n\t\t\tgroup -n (\"overlapInLocator_first_\"+$i+\"grp\");\n\n\t\t\t// IK mode\n\t\t\tif($TRANSLATEmode==1)\n\t\t\t{ \n\t\t\t\tselect -r (\"overlapOffsetIKLocator\"+$i) (\"overlapInLocator_first_\"+$i+\"grp\");\n\t\t\t\tpointConstraint -mo -weight 1;\n\t\t\t}\n\n\t\t\tselect -r (\"overlapOffsetLocatorWind\"+$i) (\"overlapInLocator_second_\"+$i);\n\t\t\tparentConstraint -mo -weight 1;\n\t\t\t\n\t\t\tselect -r (\"overlapInLocator_second_\"+$i) (\"overlapInLocator_first_\"+$i+\"grp\");\n\t\t\taimConstraint -mo -weight 1 -aimVector 1 0 0 -upVector 0 1 0 -worldUpType \"object\" -worldUpObject (\"overlapInLocator_second_\"+$i);\n\t\t\tselect -r (\"overlapInLocator_second_\"+$i) (\"overlapInLocator_first_\"+$i);\n\t\t\torientConstraint -mo -skip y -skip z -weight 1;\n\t\t\tselect -r  (\"overlapInLocator_first_\"+$i) (\"overlapResultLocator_\"+$i);\n\t\t\tparentConstraint -mo -weight 1;\n\n\t\t\t///Wind\n\n\t\t\tif($DoNotUseFirstCtrl==1) {$w=$i-1;} else {$w=$i;}\n\t\t\t\n\t\t\tif($w<1&&$WindSwitch==1) \n\t\t\t{\n\t\t\t    string $CurentWindControl;\n\t    \t\tif($DoNotUseFirstCtrl==1) {$CurentWindControl = \"overlapOffsetLocatorWind1\";}\n\t    \t\telse {$CurentWindControl = \"overlapOffsetLocatorWind0\";}\n\t    \t\t\n\t    \t\tselect -r $CurentWindControl;\n\t    \t\t\n\t    \t\tfloat $windMultiply = 0.07*$overlapIntensityMult*$windScaleValue ; \n\t    \t\tfloat $speedMultiply = 20/$windSpeedValue; \n\t    \t\t\n\t    \t\tsetKeyframe  -attribute \"translateY\" -attribute \"translateZ\" -t $timeStart $CurentWindControl;\n\t    \t\t\n\t    \t\tbakeResults \n\t    \t\t\t-simulation 0 \n\t    \t\t\t-t ($timeStart+\":\"+($timeEnd+$speedMultiply))\n\t    \t\t\t-sampleBy $speedMultiply \n\t    \t\t\t-disableImplicitControl 1 \n\t    \t\t\t-preserveOutsideKeys 1 \n\t    \t\t\t-sparseAnimCurveBake 0 \n\t    \t\t\t-bakeOnOverrideLayer 0 \n\t    \t\t\t-minimizeRotation 0 \n\t    \t\t\t-at \"ty\" \n\t    \t\t\t-at \"tz\" \n\t    \t\t\t$CurentWindControl;\n\t    \t\t\n\t    \t\t    string $listAnimAttrs[] = `listAttr -k $CurentWindControl`;\t\t\n\t    \t\t\tfor ($attr in $listAnimAttrs)\n\t    \t\t\t{ \t\n\t    \t\t\t\t// array of animated atributes\n\t    \t\t\t\tstring $animCurve[] = `listConnections -type \"animCurve\" ($CurentWindControl+\".\"+$attr)`;\n\t    \t\t\t\tfor ($animCurveCurrent in $animCurve)\n\t    \t\t\t\t\t{\n\t    \t\t\t\t\t\t// array of keys\n\t    \t\t\t\t\t\tfloat $animCurveCurrentKeysTimeArray[] = `keyframe -time ($timeStart+\":\"+$timeEnd) -query -timeChange $animCurveCurrent`;\n\t    \t\t\n\t    \t\t\t\t\t    // array of values\n\t\t\t\t\t\t\t\tfor ($animCurveCurrentKeysTime in $animCurveCurrentKeysTimeArray)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfloat $animCurveCurrentKeysTimeArray[] = `keyframe -time $animCurveCurrentKeysTime -query -valueChange $animCurveCurrent`;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t//Randomazer\n\t\t\t\t\t\t\t\t\tfloat $RandomizerValue = `rand -1 1`;\n\t\t\t\t\t\t\t\t\tfloat $animCurveCurrentKeysValueArrayAddRandom = $animCurveCurrentKeysTimeArray[0]+$windMultiply*$RandomizerValue;\n\t\t\t\t\t\t\t\t\tkeyframe -e -iub true -r -o over -vc $animCurveCurrentKeysValueArrayAddRandom -t $animCurveCurrentKeysTime $animCurveCurrent;\n\t    \t\t\t\t\t\t}\n\t                        }\n\t\t\t\t    }\n\t\t\t\tkeyframe -e -iub true -r -o over -tc ($speedMultiply/2) ($CurentWindControl+\"_translateY\");\n\t\t\t\tselectKey -add -k -t (($speedMultiply/2)+1) ($CurentWindControl+\"_translateY\");\n\t    \t\tkeyframe -animation keys -option over -relative -timeChange ($speedMultiply/-2);\n\t    \t\tif ($CycleCheckBox == 1) \n\t    \t\t{\n\t    \t\t selectKey -add -k -t $timeStart ($CurentWindControl+\"_translateY\");\n                 selectKey -add -k -t $timeStart ($CurentWindControl+\"_translateZ\");\n                 pasteKey -time $timeEnd -float $timeEnd -option insert -copies 1 -connect 0 -timeOffset 0 -floatOffset 0 -valueOffset 0 ($CurentWindControl+\"_translateY\");\n                 pasteKey -time $timeEnd -float $timeEnd-option insert -copies 1 -connect 0 -timeOffset 0 -floatOffset 0 -valueOffset 0 ($CurentWindControl+\"_translateZ\");\n                 }\n\t\t\t}\n\n\t\t\tbakeResults -simulation 0 \n\t\t\t\t\t    -t ($timeStart+\":\"+$timeEnd)\n\t\t\t\t\t    -sampleBy 1 \n\t\t\t\t\t    -disableImplicitControl 1 \n\t\t\t\t\t    -preserveOutsideKeys 1 \n\t\t\t\t\t    -sparseAnimCurveBake 0 \n\t\t\t\t\t    -bakeOnOverrideLayer 0     \n\t\t\t\t\t    -minimizeRotation 0 \n\t\t\t\t\t    -controlPoints 0 \n\t\t\t\t\t    -shape 1 \n\t\t\t\t\t    (\"overlapResultLocator_\"+$i);\n\t\t\t\t\t    \n\t\t    if($deBugMode==0) {delete (\"overlapInLocator_first_\"+$i) (\"overlapInLocator_first_\"+$i+\"grp\") (\"overlapOffsetLocator\"+$i) (\"overlapInLocator_second_\"+$i);}\n\t\t    spaceLocator -n (\"overlapResultLocatorOut_\"+$i);\n\t\t    \t \n\t\t    if(`objExists \"OverlapperOverlapResultLocatorSet\"`) {sets -edit -forceElement OverlapperOverlapResultLocatorSet (\"overlapResultLocatorOut_\"+$i);}\n\t \t    else {$createSetResult = `sets -name \"OverlapperOverlapResultLocatorSet\"`;}\n\t    \n\t    \n\t\t    select -r  (\"overlapResultLocator_\"+$i) (\"overlapResultLocatorOut_\"+$i);\n\t\t    parentConstraint -weight 1;\n\t\t    bakeResults -simulation 0 \n\t\t\t\t\t    -t ($timeStart+\":\"+$timeEnd)\n\t\t\t\t\t    -sampleBy 1 \n\t\t\t\t\t    -disableImplicitControl 1 \n\t\t\t\t\t    -preserveOutsideKeys 1 \n\t\t\t\t\t    -sparseAnimCurveBake 0 \n\t\t\t\t\t    -bakeOnOverrideLayer 0     \n\t\t\t\t\t    -minimizeRotation 0 \n\t\t\t\t\t    -controlPoints 0 \n\t\t\t\t\t    -shape 1 \n\t\t\t\t\t    (\"overlapResultLocatorOut_\"+$i);\n\t\t\tif($deBugMode==0) {delete (\"overlapResultLocator_\"+$i);}\n\t\t    select -r (\"overlapResultLocatorOut_\"+$i) ($SelectedControls[$i]+\"_OverlapJoint\");\n\t\t    parentConstraint -weight 1 -mo;\n\t}\n\n\t// constrain controls back to joint\n    if ($DoNotUseFirstCtrl==1)\n\t{\n\t    for ($i=0; $i<$iLoop; ++$i )\n\t    {\t\n    \t//orient constraint\n\t    \tif (`getAttr -keyable ($SelectedControls[$i]+\".rx\")`==1&&`getAttr -lock ($SelectedControls[$i]+\".rx\")`==0&&\n\t    \t    `getAttr -keyable ($SelectedControls[$i]+\".ry\")`==1&&`getAttr -lock ($SelectedControls[$i]+\".ry\")`==0&&\n\t    \t    `getAttr -keyable ($SelectedControls[$i]+\".rx\")`==1&&`getAttr -lock ($SelectedControls[$i]+\".rx\")`==0)\n\t\t    \t{select -r ($SelectedControls[$i]+\"_OverlapJoint\") $SelectedControls[$i]; orientConstraint -mo -weight 1;}\n\t    \t\n\t    //point constraint\n\t    \tif (`getAttr -keyable ($SelectedControls[$i]+\".tx\")`==1&&`getAttr -lock ($SelectedControls[$i]+\".tx\")`==0&&\n\t    \t    `getAttr -keyable ($SelectedControls[$i]+\".ty\")`==1&&`getAttr -lock ($SelectedControls[$i]+\".ty\")`==0&&\n\t    \t    `getAttr -keyable ($SelectedControls[$i]+\".tx\")`==1&&`getAttr -lock ($SelectedControls[$i]+\".tx\")`==0&&$TRANSLATEmode==1)\n\t    \t\t{select -r ($SelectedControls[$i]+\"_OverlapJoint\") $SelectedControls[$i]; pointConstraint -mo -weight 1;}\n\t    }\n\t}\n\telse\n\t{\n\n\t    for ($i=0; $i<$iLoop; ++$i )\n\t    {\t\n\t    \t//orient constraint\n\t    \tif (`getAttr -keyable ($SelectedControls[$i]+\".rx\")`==1&&`getAttr -lock ($SelectedControls[$i]+\".rx\")`==0&&\n\t    \t    `getAttr -keyable ($SelectedControls[$i]+\".ry\")`==1&&`getAttr -lock ($SelectedControls[$i]+\".ry\")`==0&&\n\t    \t    `getAttr -keyable ($SelectedControls[$i]+\".rx\")`==1&&`getAttr -lock ($SelectedControls[$i]+\".rx\")`==0)\n\t\t    \t{select -r ($SelectedControls[$i]+\"_OverlapJoint\") $SelectedControls[$i]; orientConstraint -mo -weight 1;}\n\t    \t\n\t    \t//point constraint\n\t    \tif (`getAttr -keyable ($SelectedControls[$i]+\".tx\")`==1&&`getAttr -lock ($SelectedControls[$i]+\".tx\")`==0&&\n\t    \t    `getAttr -keyable ($SelectedControls[$i]+\".ty\")`==1&&`getAttr -lock ($SelectedControls[$i]+\".ty\")`==0&&\n\t    \t    `getAttr -keyable ($SelectedControls[$i]+\".tx\")`==1&&`getAttr -lock ($SelectedControls[$i]+\".tx\")`==0&&$TRANSLATEmode==1)\n\t    \t\t{select -r ($SelectedControls[$i]+\"_OverlapJoint\") $SelectedControls[$i]; pointConstraint -mo -weight 1;}\n\t    }\n\t}\n\n\t\t\t\tif ($CycleCheckBox == 1)\n\t\t\t{\t\n\n\t\t\t    $cycleLenghts = $timeEndGlobal-$timeStartGlobal;\n\t\n\t\t\t\tselect -r  OverlapperOverlapResultLocatorSet;\n\t\t\t\tstring $EulerArrays[] = `ls -sl`;\n\t\t\t\t\n\t\t\t\tfor ($obj in $EulerArrays)\n\t\t\t\t{\n\t\t\t\t\tkeyframe -e -iub true -r -o over -tc (-2*$cycleLenghts) ($obj+\"_translateX\");\n\t\t\t\t\tkeyframe -e -iub true -r -o over -tc (-2*$cycleLenghts)\t($obj+\"_translateY\");\n\t\t\t\t\tkeyframe -e -iub true -r -o over -tc (-2*$cycleLenghts) ($obj+\"_translateZ\");\n\t\t\t\t\tkeyframe -e -iub true -r -o over -tc (-2*$cycleLenghts) ($obj+\"_rotateX\");\n\t\t\t\t\tkeyframe -e -iub true -r -o over -tc (-2*$cycleLenghts)\t($obj+\"_rotateY\");\n\t\t\t\t\tkeyframe -e -iub true -r -o over -tc (-2*$cycleLenghts) ($obj+\"_rotateZ\");\n\t\t\t\t}\t    \n\t\t\t}\n\t\n\tselect -r $SelectedControls;\n    if ($DoNotUseFirstCtrl==1&&`size($SelectedControls)`>1) {select -d $FirstSelectedCtrl;}\n    $SelectedControls = `ls -sl`;\n\n\tif($TRANSLATEmode==1)\n\t{\n\t    bakeResults \n    \t-simulation 0 \n    \t-t ($timeStartGlobal+\":\"+$timeEndGlobal)\n    \t-sampleBy 1 \n    \t-disableImplicitControl 1 \n    \t-preserveOutsideKeys 1 \n    \t-sparseAnimCurveBake 0 \n    \t-bakeOnOverrideLayer $onLayerSwitch     \n    \t-minimizeRotation 0 \n    \t-controlPoints 0 \n    \t-shape 0\n    \t-at \"tx\" \n        -at \"ty\" \n        -at \"tz\" \n        -at \"rx\" \n        -at \"ry\" \n        -at \"rz\" \n    \t$SelectedControls;\n    }\n    else\n    {\n     \tbakeResults \n    \t-simulation 0 \n    \t-t ($timeStartGlobal+\":\"+$timeEndGlobal)\n    \t-sampleBy 1 \n    \t-disableImplicitControl 1 \n    \t-preserveOutsideKeys 1 \n    \t-sparseAnimCurveBake 0 \n    \t-bakeOnOverrideLayer $onLayerSwitch     \n    \t-minimizeRotation 0 \n    \t-controlPoints 0 \n    \t-shape 0\n        -at \"rx\" \n        -at \"ry\" \n        -at \"rz\" \n    \t$SelectedControls;   \n    }\n\n\t//create selection set \n\tif($OvSelectionSet==1) \n\t{\t\n\t    if(`objExists \"OverlapperSet*\"`) {sets -edit -forceElement OverlapperSet $SelectedControls;}\n\t    else {$createSetResult = `sets -name \"OverlapperSet\"`;}\n    }\n\t    if(`objExists \"OverlapperWorkSet*\"`) {sets -edit -forceElement OverlapperWorkSet $SelectedControls;}\n\t    else {$createSetResult = `sets -name \"OverlapperWorkSet\"`;}\n\t    \n    // finalization \n\tif($deBugMode==0) \n\t{\n\t    delete $overlapJointsArray; \n\t    if(`objExists \"overlapResultLocatorOut*\"`) {delete \"overlapResultLocatorOut*\";}\n\t    if(`objExists \"*overlapOffsetIKLocator*\"`) {delete \"*overlapOffsetIKLocator*\";} \n    }\n    currentTime - e $currentTime;\n    select -r $SelectedControls;\n    cycleCheck -e on;\n\tprogressWindow -endProgress;\n\t\n\t// select ovelapped controls set \n    if(`objExists \"OverlapperSet\"`) {select -r OverlapperSet;}\n    }\n\n// Finalizing\nglobal proc CycleFinal()\n{\n\tglobal int $prefsOption;\n\tstring $SelectedControlsClearNameSpaces[];\n\tstring $SelectedControls[];\n\tglobal string $eulerFilterCurves[];\t\n\tstring $ControlName[];\n  \tfloat $cycleLenghts;\n  \tfloat $totalTime;\n  \tfloat $startTime;\n  \tint $DelRedMode;\n  \tglobal int $timeStartGlobal, $timeEndGlobal;\n\tglobal int $timeStart, $timeEnd;\n\t$timeStart = $timeStartGlobal;\n\t$timeEnd = $timeEndGlobal;\n\t\n    $DelRedMode = `menuItem -query -cb DelRed`;\n    $TRANSLATEmode = `checkBox -q -v IKmode`;\n\n \t// euler all anim curves\t\n \tclear ($eulerFilterCurves);\n\tselect -r OverlapperWorkSet;\n\tstring $EulerArrays[] = `ls -sl`;\n\n\tfor ($obj in $EulerArrays)\n\t{\n\t\t$listAnimAttrs = `listAttr -k $obj`;\t\t\n\t\tfor ($attr in $listAnimAttrs)\n\t\t{ \t\n\t\t\t$animCurve = `listConnections -type \"animCurve\" ($obj+\".\"+$attr)`;\n\t\t\tint $ClearElemwnts = `size($animCurve)`; appendStringArray($eulerFilterCurves, $animCurve, $ClearElemwnts);\n\t\t}\n\t}\n\n\tfilterCurve $eulerFilterCurves;\n\n     // simplifier\n\tif ($DelRedMode == 1)\n    {\n    \tselect -r OverlapperWorkSet;\n        $SelectedControls = `ls -sl`;\n\n        if ($TRANSLATEmode == 1) {selectKey -r -at rx -at ry -at rz -at tx -at ty -at tz -k;}\n        else {selectKey -r -at rx -at ry -at rz -k;}\n\n        string $selectedCurves[] = `keyframe -selected -q -name`;\n        string $redundantTime =  $timeStartGlobal+\":\"+$timeEndGlobal;\n        \n         //delete redundant\n        for ($currentAnimCurve in $selectedCurves)\n        {\n        \tfloat $allKeys[] = `keyframe -t $redundantTime -q -timeChange $currentAnimCurve`;\n            $valArray = `keyframe -t $redundantTime -q -valueChange $currentAnimCurve`;\n            $keysSize = `size($allKeys)`;\n            \n            for ($s=1; $s<$keysSize-1; ++$s )\n            {if ($valArray[$s] == $valArray[$s-1]&&$valArray[$s] == $valArray[$s+1]) {cutKey -time $allKeys[$s] -clear $currentAnimCurve;}}\n        }\n\n    }\n\n\tdelete \"OverlapperWorkSet\";\n}\n\nOverlapperRelease;"
	-width 34 
	-height 34 
	-manage 1 
	-visible 1 
	-annotation "Overlapper"
	-label "Overlapper"
	-imageOverlayLabel "Overlapper" 
    -image1 "commandButton.png" 
	-sourceType "mel"
	-style "iconOnly" 
	-parent $currentShelf;


