//�TkgyVertexCopy(kawamata_yasuyuki@tkgpublic.co.jp) 
//��2017/01/06�@Version

global proc TkgVertexCopy_Cmd()
{

int $c1=`checkBox -q -v  TkgVertexCopy_CHECK1`;
int $c2=`checkBox -q -v  TkgVertexCopy_CHECK2`;
int $c3=`checkBox -q -v  TkgVertexCopy_CHECK3`;
if($c1==0 && $c2==0 && $c3==0){
	confirmDialog -t "Confirm" -m " �I�v�V�������ݒ肳��Ă��܂��� " -b "OK" ;
	return ;
}

string $sels[] = `filterExpand -sm 31`;
string $sels_obj[] = `filterExpand -sm 12`;
string $target[] , $xx , $v , $target_sels[];
float $vzahyou[3] , $diff[], $min_diff[], $dist, $min_dist;

if(((`size $sels`)>=2) || ((`size $sels_obj`)==2)){  //----���f��2�I���A���_2�ȏ�I���̎��ɏ���������

if((`size $sels`)>=2){
	$target_sels = $sels;  //----���_�I���̎��̓^�[�Q�b�g���$sels�ɂ���
}
if((`size $sels_obj`)==2){  //----���f���I���̎��̓^�[�Q�b�g���2�ԖڂɑI���������_�ɂ���
	clear $sels;

	select $sels_obj[0];
	ConvertSelectionToVertices;
	SelectPolygonSelectionBoundary;
	string $get1[] = `filterExpand -sm 31`;
	$target_sels=$get1;  //----1�ԖڂɑI���������f�����^�[�Q�b�g��ɂ���

	select $sels_obj[1];
	ConvertSelectionToVertices;
	SelectPolygonSelectionBoundary;
	string $get2[] = `filterExpand -sm 31`;
	$sels=$get2;  //----2�ԖڂɑI���������f���̃{�[�_�[���_���X�i�b�v������
}

float $offset=`floatField -q -v  TkgVertexCopy_FIELD1`;

/////////////////////////    
int $amount = 0;
int $size = `size  $sels`;
/////////////////////////    

$sels=`sort $sels`;  //----���Ԑ���
for($xx in $sels){

	/////////////////////////    
	progressWindow -t "Working" -progress $amount -min 0 -max $size -status "Completed : "-isInterruptable true;
	progressWindow -e -progress $amount -status ( "Completed Vertex : "+$amount+" / "+ $size );
	/////////////////////////  

	float $selectedVert[] = `pointPosition $xx`;

	int $ii , $flag=0 ,$c=0;

	for($v in $target_sels){ //----�^�[�Q�b�g��ɑ΂��郋�[�v
		if($v==$xx){  //----�^�[�Q�b�g�悪���g�̒��_�̏ꍇ�͏������Ȃ�
			continue;
		}
		float $vert[] = `pointPosition $v`;  //----�e���_�̒l���擾���A�I�𒸓_�Ƃ̋������Z�o
		$diff[0] = $vert[0] - $selectedVert[0];
		$diff[1] = $vert[1] - $selectedVert[1];
		$diff[2] = $vert[2] - $selectedVert[2];
		$dist = `sqrt ($diff[0] * $diff[0] + $diff[1] * $diff[1] + $diff[2] * $diff[2])`;
		if($c == 0 || $dist < $min_dist) {  //----�ŒZ�����̒��_���L�^
			if( $dist <= $offset ){  //----�������l
				$target[0] = $v;  //----�ŒZ�̃^�[�Q�b�g��(���_��)���i�[���Ă���
				$min_dist = $dist;
				$min_diff[0] = $diff[0];
				$min_diff[1] = $diff[1];
				$min_diff[2] = $diff[2];
				$c++;
			}
		}
	}
	if((`size $target`)==0){  //----�������l�ɂ��Ă͂܂�Ȃ��ꍇ�̓X���[
		$amount += 1;
		continue;
	} 	 
	else{  //----�������l��1�ł����Ă͂܂����ꍇ�̏���
		$sels = stringArrayRemove($target,$sels);  //----�ړ�������̒��_��$sels���珜��
	}

	/////////////////////////  
	if ( `progressWindow -q -isCancelled` ) break;
	if ( `progressWindow -q -progress` >= $size) break;
	$amount += 1;
	//pause -seconds 1;
	/////////////////////////  

	if(`checkBox -q -v TkgVertexCopy_CHECK1`){  //----�I�𒸓_���A�ŒZ�����ɂ��钸�_�Ɉړ�
		move -ws -r $min_diff[0] $min_diff[1] $min_diff[2] $xx ;
	}
	if(`checkBox -q -v TkgVertexCopy_CHECK2`){  //----���_�J���[�̃R�s�[
		float $color[] = `polyColorPerVertex -q -rgb $target[0]`;
		float $alfa[] = `polyColorPerVertex -q -a $target[0]`;
		polyColorPerVertex -e -r $color[0] -g $color[1] -b $color[2] -a $alfa[0] $xx;
	}
	//���@���O���[�o���R�s�[
	if(`checkBox -q -v TkgVertexCopy_CHECK3`){
		float $vzahyou[3] = `polyNormalPerVertex -q -xyz $target[0]`;
		vector $nzahyou = <<$vzahyou[0],$vzahyou[1],$vzahyou[2]>>;
		$nzahyou = unit($nzahyou);
		$selectone1 = `listRelatives -p -pa -ni $target[0]`;
		$selectone1 = `listRelatives -p -pa -ni $selectone1`;

		$wrotate = `xform -q -ws -ro $selectone1`;
		float $vnx1 = $wrotate[0];
		float $vny1 = $wrotate[1];
		float $vnz1 = $wrotate[2];
		$vnx1 = deg_to_rad($vnx1);
		$vny1 = deg_to_rad($vny1);
		$vnz1 = deg_to_rad($vnz1);

		$nzahyou = rot($nzahyou,<<1,0,0>>,$vnx1);
		$nzahyou = rot($nzahyou,<<0,1,0>>,$vny1);
		$nzahyou = rot($nzahyou,<<0,0,1>>,$vnz1);
		$nzahyou = unit($nzahyou);

		float  $vnx =($nzahyou.x);
		float  $vny =($nzahyou.y);
		float  $vnz =($nzahyou.z);
		//��

		//�� �@���O���[�o���y�[�X�g
		vector $nzahyou = <<$vnx , $vny , $vnz>>;
		$selectone2 = `listRelatives -p -pa -ni $xx`;
		$selectone2 = `listRelatives -p -pa -ni $selectone2`;
		$wrotate = `xform -q -ws -ro $selectone2`;

		$vnx1 = `TkgVertexCopy_vnx $wrotate`;
		$vny1 = `TkgVertexCopy_vny $wrotate`;
		$vnz1 = `TkgVertexCopy_vnz $wrotate`;
		vector $wY =`TkgVertexCopy_wy $vnx1`;
		vector $wZ =`TkgVertexCopy_wz $vnx1 $vny1 $wY`;

		$nzahyou = rot($nzahyou,<<1,0,0>>,$vnx1);
		$nzahyou = rot($nzahyou,$wY,$vny1);
		$nzahyou = rot($nzahyou,$wZ,$vnz1);
		$nzahyou = unit($nzahyou);
		polyNormalPerVertex -xyz ($nzahyou.x) ($nzahyou.y) ($nzahyou.z) $xx;  //----�@���̃R�s�[
		//��
	}
	clear $vzahyou ;
	clear $min_diff;
	clear $target;
}

progressWindow -endProgress;

}

else{
	confirmDialog -t "Confirm" -m " �I���̎d�����Ⴂ�܂� " -b "OK" ;
	return;	
}

if((`size $sels_obj`) > 0 && (`size $target[0]`) == 0){  //----1���������l�ɂЂ�������Ȃ��ꍇ�̓��f����I�����ďI��
	select $sels_obj;
}

}

//-----------------------------------------------------------------�ȉ��A���W�␳�v�Z

global proc float TkgVertexCopy_vnx(float $wrotate[])
{

float $vnx1 = 0.1;
$vnx1 = $wrotate[0];
$vnx1 = deg_to_rad($vnx1);
$vnx1 = ($vnx1*-1);
return $vnx1;

}

global proc float TkgVertexCopy_vny(float $wrotate[])
{

float $vny1 = 0.1;
$vny1 = $wrotate[1];
$vny1 = deg_to_rad($vny1);
$vny1 = ($vny1*-1);
return $vny1;

}

global proc float TkgVertexCopy_vnz(float $wrotate[])
{

float $vnz1 = 0.1;
$vnz1 = $wrotate[2];
$vnz1 = deg_to_rad($vnz1);
$vnz1 = ($vnz1*-1);
return $vnz1;

}

global proc vector TkgVertexCopy_wy(float $vnx1)
{

vector $wY;
$wY = rot(<<0,1,0>> , <<1,0,0>> , $vnx1);
return $wY;

}

global proc vector TkgVertexCopy_wz(float $vnx1 , float $vny1 , vector $wY)
{

vector $wZ;
$wZ = rot(<<0,0,1>> , <<1,0,0>> , $vnx1);
$wZ = rot($wZ , $wY , $vny1);
return $wZ;

}

//------------------------------------------------------------------------------//WINDOW

global proc TkgVertexCopy()
{

if(`window -q -ex TkgVertexCopy_WINDOW`){deleteUI TkgVertexCopy_WINDOW;}

window -width 100 -height 30 -title "TkgVertexCopy" -toolbox 1 -s 0  TkgVertexCopy_WINDOW;
columnLayout -adjustableColumn true ;
separator -height 5 -style "none";

rowLayout -nc 6 -cw6 3 55 90 60 60 60  ;
text -l "";
checkBox -label "Snap" -v 1 TkgVertexCopy_CHECK1;
checkBox -label "Vertex Color" -v 1  TkgVertexCopy_CHECK2;
checkBox -label "Normal" -v 1  TkgVertexCopy_CHECK3;
setParent ..;

separator -height 7 -style "none";

rowLayout -nc 6 -cw6 5  45 65 50 50 50  ;
text -l "";
text -h 22 -l "Distance";
floatField -w 50 -h 22 -v 0.01 -pre 3 -min 0 -max 10  -ann "�A���C����K�Tkg��鋗���ł�" CyVertexCopy_FIELD1;
button -w 91  -h 22  -l  "Apply" -c "TkgVertexCopy_Cmd()" -ann "�I�����Ă��钸�_(2�_�ȏ�)���̓��f��(2�I��)�̃{�[�_�[�̃A���C�������s���܂�";
setParent ..;

showWindow TkgVertexCopy_WINDOW;
window -e -wh 218 63 TkgVertexCopy_WINDOW;

}



