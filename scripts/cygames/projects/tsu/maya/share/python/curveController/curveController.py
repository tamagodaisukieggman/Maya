# -*- coding: utf-8 -*-
# ----------------------------------
# Project : Tsubasa
# Name    : curveController
# Author  : toi
# Update  : 2022/9/29
# ----------------------------------
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
from __future__ import unicode_literals
import maya.cmds as cmds
import pymel.core as pm
import os
from functools import partial

from dccUserMayaSharePythonLib import common as cm
from dccUserMayaSharePythonLib import pyCommon as pcm
from dccUserMayaSharePythonLib import file_dumspl as f


class CurveController(object):
    def __init__(self):
        self.window_name = os.path.basename(os.path.dirname(__file__))
        self.shape_list = [
            'locator',
            'square',
            'squarePyramid',
            'cube',
            'circle',
            'sphere',
            'sphereCross',
            'arrow',
            'pin',
            'crossPin',
            'hexagonalPrism'
        ]

    def delOverwrapWindow(self):
        if cmds.window(self.window_name, ex=True):
            cmds.deleteUI(self.window_name)

    def initUi(self):
        self.delOverwrapWindow()
        cmds.window(self.window_name, t=self.window_name, mb=True)
        cmds.menu(l='Help')
        cmds.menuItem(l='Tool help', c=pm.Callback(os.startfile, 'https://wisdom.cygames.jp/x/U3S8HQ'))
        fl = cmds.formLayout()
        cl = cmds.columnLayout(adj=True, co=['both', 3], rs=10)
        self.om = cmds.optionMenu(l='shape : ')
        for shape_ in self.shape_list:
            cmds.menuItem(l=shape_)
        cmds.button('create_button', l='create', c=self.do_create)

        cmds.formLayout(
            fl, e=True,
            af=[(cl, 'top', 3), (cl, 'left', 3), (cl, 'right', 3), (cl, 'bottom', 3)]
        )

        # ---------------------------------
        cmds.showWindow(self.window_name)

    def do_create(self, *args):
        choice = cmds.optionMenu(self.om, q=True, value=True)
        sels = cmds.ls(sl=True, transforms=True)
        create_shapes = []
        if sels:
            for sel in sels:
                create_shapes.append(self.create(choice, sel))
        else:
            create_shapes.append(self.create(choice))
        return create_shapes

    def create(self, *args):
        shape_kind = args[0]
        pos_base_node = None if len(args) == 1 else args[1]
        exec ('shape_ = self.{}()'.format(shape_kind))
        shape_ = cmds.rename(shape_, '{}_{}_ctrl'.format(pos_base_node, shape_kind))

        if pos_base_node is not None:
            cm.match(pos_base_node, shape_)
        return shape_

    def createCurve(self, point_list):
        return cmds.curve(d=1, p=point_list)

    def locator(self):
        return self.createCurve(
            [[0.0, 0.0, 20.0], [0.0, 0.0, 0.0], [-20.0, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 20.0, 0.0],
             [0.0, 0.0, 0.0], [0.0, 0.0, -20.0], [0.0, 0.0, 0.0], [0.0, -20.0, 0.0], [0.0, 0.0, 0.0],
             [20.0, 0.0, 0.0]]
        )

    def cube(self):
        return self.createCurve(
            [[16, 16, 16], [-16, 16, 16], [-16, 16, -16], [16, 16, -16], [16, 16, 16], [16, -16, 16],
             [16, -16, -16], [16, 16, -16], [16, -16, -16], [-16, -16, -16], [-16, 16, -16],
             [-16, -16, -16], [-16, -16, 16], [-16, 16, 16], [-16, -16, 16], [16, -16, 16]]
        )

    def circle(self):
        return self.createCurve(
            [[0.0, 0.0, -16], [-6.122, 0.0, -14.782], [-11.313, 0.0, -11.313],
             [-14.782, 0.0, -6.122], [-16.000, 0.0, 0.0], [-14.782, 0.0, 6.122],
             [-11.313, 0.0, 11.313], [-6.122, 0.0, 14.782], [0.0, 0.0, 16],
             [6.122, 0.0, 14.782], [11.313, 0.0, 11.313], [14.782, 0.0, 6.1229], [16, 0.0, 0.0],
             [14.7822, 0.0, -6.123], [11.313, 0.0, -11.313], [6.123, 0.0, -14.7822], [0.0, 0.0, -16]]
        )

    def square(self):
        return self.createCurve(
            [[-16, 0.0, -16], [-16, 0.0, 16], [16, 0.0, 16], [16, 0.0, -16], [-16, 0.0, -16]]
        )

    def arrow(self):
        return self.createCurve(
            [[0.0, 0, 16], [-6.396, 0, 9.594], [-3.198, 0, 9.594], [-3.198, 0.0, 0.0],
             [3.198, 0.0, 0.0], [3.198, 0, 9.594], [6.396, 0, 9.594], [0.0, 0, 16]]
        )

    def sphere(self):
        return self.createCurve(
            [[0.0, 16.0, 0.0], [-6.123, 14.782, 0.0], [-11.314, 11.314, 0.0], [-14.782, 6.123, 0.0], [-16.0, 0.0, 0.0],
             [-14.782, 0.0, 6.123], [-11.314, 0.0, 11.314], [-6.123, 0.0, 14.782], [0.0, 0.0, 16.0],
             [6.123, 0.0, 14.782], [11.314, 0.0, 11.314], [14.782, 0.0, 6.123], [16.0, 0.0, 0.0], [14.782, 0.0, -6.123],
             [11.314, 0.0, -11.314], [6.123, 0.0, -14.782], [0.0, 0.0, -16.0], [-6.123, 0.0, -14.782],
             [-11.314, 0.0, -11.314], [-14.782, 0.0, -6.123], [-16.0, 0.0, 0.0], [-14.782, -6.123, 0.0],
             [-11.314, -11.314, 0.0], [-6.123, -14.782, 0.0], [0.0, -16.0, 0.0], [6.123, -14.782, 0.0],
             [11.314, -11.314, 0.0], [14.782, -6.123, 0.0], [16.0, 0.0, 0.0], [14.782, 6.123, 0.0],
             [11.314, 11.314, 0.0], [6.123, 14.782, 0.0], [0.0, 16.0, 0.0], [0.0, 14.782, 6.123], [0.0, 11.314, 11.314],
             [0.0, 6.123, 14.782], [0.0, 0.0, 16.0], [0.0, -6.123, 14.782], [0.0, -11.314, 11.314],
             [0.0, -14.782, 6.123], [0.0, -16.0, 0.0], [0.0, -14.782, -6.123], [0.0, -11.314, -11.314],
             [0.0, -6.123, -14.782], [0.0, 0.0, -16.0], [0.0, 6.123, -14.782], [0.0, 11.314, -11.314],
             [0.0, 14.782, -6.123], [0.0, 16.0, 0.0]]
        )

    def pin(self):
        return self.createCurve(
            [[0.0, 0.0, 0.0], [0.0, 0.0, 0.0], [12.063, 0.0, 0.0], [12.362, 0.0, -1.507], [13.216, 0.0, -2.784],
             [18.785, 0.0, 2.784], [17.507, 0.0, 3.638], [16.0, 0.0, 3.938], [14.493, 0.0, 3.638], [13.216, 0.0, 2.784],
             [12.362, 0.0, 1.507], [12.063, 0.0, 0.0], [12.362, 0.0, 1.507], [13.216, 0.0, 2.784],
             [18.785, 0.0, -2.784], [17.507, 0.0, -3.638], [16.0, 0.0, -3.938], [14.493, 0.0, -3.638],
             [13.216, 0.0, -2.784], [18.785, 0.0, 2.784], [19.638, 0.0, 1.507], [19.938, 0.0, 0.0],
             [19.638, 0.0, -1.507], [18.785, 0.0, -2.784]]
        )

    def sphereCross(self):
        return self.createCurve(
            [[0.0, 0.0, -16.0], [-4.12, 0.0, -15.457], [-8.0, 0.0, -13.852], [-11.322, 0.0, -11.302],
             [-13.86, 0.0, -7.989], [-15.455, 0.0, -4.133], [-16.0, 0.0, 0.0], [-15.452, 0.0, 4.146],
             [-13.848, 0.0, 8.0], [-11.302, 0.0, 11.322], [-7.993, 0.0, 13.859], [-4.141, 0.0, 15.455],
             [0.0, 0.0, 16.0], [4.132, 0.0, 15.456], [7.999, 0.0, 13.857], [11.306, 0.0, 11.32],
             [13.854, 0.0, 8.004], [15.456, 0.0, 4.135], [16.0, 0.0, 0.0], [15.457, 0.0, -4.127],
             [13.846, 0.0, -8.014], [11.316, 0.0, -11.311], [8.001, 0.0, -13.856], [4.145, 0.0, -15.453],
             [0.0, 0.0, -16.0], [0.0, 4.113, -15.459], [0.0, 7.998, -13.857], [0.0, 11.31, -11.317],
             [0.0, 13.86, -7.992], [0.0, 15.445, -4.164], [0.0, 16.0, 0.0], [0.0, -16.0, 0.0], [0.0, -15.458, -4.119],
             [0.0, -13.847, -8.013], [0.0, -11.308, -11.318], [0.0, -8.007, -13.851], [0.0, -4.117, -15.458],
             [0.0, 0.0, -16.0], [0.0, 0.0, 16.0], [0.0, -4.118, 15.458], [0.0, -8.019, 13.842], [0.0, -11.317, 11.31],
             [0.0, -13.863, 7.984], [0.0, -15.445, 4.166], [0.0, -16.0, 0.0], [4.114, -15.458, 0.0],
             [8.038, -13.828, 0.0], [11.287, -11.334, 0.0], [13.856, -8.0, 0.0], [15.456, -4.134, 0.0],
             [16.0, 0.0, 0.0], [15.461, 4.097, 0.0], [13.866, 7.976, 0.0], [11.327, 11.297, 0.0],
             [8.044, 13.823, 0.0], [4.145, 15.453, 0.0], [0.0, 16.0, 0.0], [-4.045, 15.467, 0.0],
             [-8.022, 13.839, 0.0], [-11.288, 11.334, 0.0], [-13.834, 8.03, 0.0], [-15.434, 4.191, 0.0],
             [-16.0, 0.0, 0.0], [-15.462, -4.086, 0.0], [-13.851, -8.007, 0.0], [-11.255, -11.359, 0.0],
             [-8.015, -13.845, 0.0], [-4.146, -15.453, 0.0], [0.0, -16.0, 0.0], [0.0, 16.0, 0.0],
             [0.0, 15.457, 4.128], [0.0, 13.857, 7.998], [0.0, 11.298, 11.326], [0.0, 8.027, 13.836],
             [0.0, 4.119, 15.458], [0.0, 0.0, 16.0], [0.0, 0.0, 0.0], [-16.0, 0.0, 0.0], [16.0, 0.0, 0.0]]
        )

    def crossPin(self):
        return self.createCurve(
            [[0.0, 0.0, -19.938], [-1.507, 0.0, -19.638], [-2.784, 0.0, -18.785], [2.784, 0.0, -13.216],
             [3.638, 0.0, -14.493], [3.938, 0.0, -16.0], [3.638, 0.0, -17.507], [2.784, 0.0, -18.785],
             [1.507, 0.0, -19.638], [0.0, 0.0, -19.938], [1.507, 0.0, -19.638], [2.784, 0.0, -18.785],
             [-2.784, 0.0, -13.216], [-3.638, 0.0, -14.493], [-3.938, 0.0, -16.0], [-3.638, 0.0, -17.507],
             [-2.784, 0.0, -18.785], [2.784, 0.0, -13.216], [1.507, 0.0, -12.362], [0.0, 0.0, -12.063],
             [-1.507, 0.0, -12.362], [-2.784, 0.0, -13.216], [-1.507, 0.0, -12.362], [0.0, 0.0, -12.063],
              [0.0, 0.0, 0.0], [12.063, 0.0, 0.0], [12.362, 0.0, -1.507], [13.216, 0.0, -2.784], [14.493, 0.0, -3.638],
             [16.0, 0.0, -3.938], [17.507, 0.0, -3.638], [18.785, 0.0, -2.784], [19.638, 0.0, -1.507],
             [19.938, 0.0, 0.0], [19.638, 0.0, 1.507], [18.785, 0.0, 2.784], [17.507, 0.0, 3.638], [16.0, 0.0, 3.938],
             [14.493, 0.0, 3.638], [13.216, 0.0, 2.784], [18.785, 0.0, -2.784], [19.638, 0.0, -1.507],
             [19.938, 0.0, 0.0], [19.638, 0.0, 1.507], [18.785, 0.0, 2.784], [13.216, 0.0, -2.784],
             [12.362, 0.0, -1.507], [12.063, 0.0, 0.0], [12.362, 0.0, 1.507], [13.216, 0.0, 2.784],
             [12.362, 0.0, 1.507], [12.063, 0.0, 0.0], [0.0, 0.0, 0.0], [0.0, 0.0, 12.063], [1.507, 0.0, 12.362],
             [2.784, 0.0, 13.216], [3.638, 0.0, 14.493], [3.938, 0.0, 16.0], [3.638, 0.0, 17.507],
             [2.784, 0.0, 18.785], [1.507, 0.0, 19.638], [0.0, 0.0, 19.938], [-1.507, 0.0, 19.638],
             [-2.784, 0.0, 18.785], [-3.638, 0.0, 17.507], [-3.938, 0.0, 16.0], [-3.638, 0.0, 14.493],
             [-2.784, 0.0, 13.216], [2.784, 0.0, 18.785], [1.507, 0.0, 19.638], [0.0, 0.0, 19.938],
             [-1.507, 0.0, 19.638], [-2.784, 0.0, 18.785], [2.784, 0.0, 13.216], [1.507, 0.0, 12.362],
             [0.0, 0.0, 12.063], [-1.507, 0.0, 12.362], [-2.784, 0.0, 13.216], [-1.507, 0.0, 12.362],
             [0.0, 0.0, 12.063], [0.0, 0.0, 0.0], [-12.063, 0.0, 0.0], [-12.362, 0.0, 1.507], [-13.216, 0.0, 2.784],
             [-14.493, 0.0, 3.638], [-16.0, 0.0, 3.938], [-17.507, 0.0, 3.638], [-18.785, 0.0, 2.784],
             [-19.638, 0.0, 1.507], [-19.938, 0.0, 0.0], [-19.638, 0.0, -1.507], [-18.785, 0.0, -2.784],
             [-13.216, 0.0, 2.784], [-12.362, 0.0, 1.507], [-12.063, 0.0, 0.0], [-12.362, 0.0, -1.507],
             [-13.216, 0.0, -2.784], [-18.785, 0.0, 2.784], [-19.638, 0.0, 1.507], [-19.938, 0.0, 0.0],
             [-19.638, 0.0, -1.507], [-18.785, 0.0, -2.784], [-17.507, 0.0, -3.638], [-16.0, 0.0, -3.938],
             [-14.493, 0.0, -3.638], [-13.216, 0.0, -2.784]]
        )

    def hexagonalPrism(self):
        return self.createCurve(
            [[8.0, 16.0, -13.856], [-8.0, 16.0, -13.856], [-16.0, 16.0, 0.0], [-8.0, 16.0, 13.856],
             [8.0, 16.0, 13.856], [16.0, 16.0, 0.0], [8.0, 16.0, -13.856], [8.0, -16.0, -13.856],
             [-8.0, -16.0, -13.856], [-8.0, 16.0, -13.856], [-8.0, -16.0, -13.856], [-16.0, -16.0, 0.0],
             [-16.0, 16.0, 0.0], [-16.0, -16.0, 0.0], [-8.0, -16.0, 13.856], [-8.0, 16.0, 13.856],
             [-8.0, -16.0, 13.856], [8.0, -16.0, 13.856], [8.0, 16.0, 13.856], [8.0, -16.0, 13.856],
             [16.0, -16.0, 0.0], [16.0, 16.0, -0.0], [16.0, -16.0, 0.0], [8.0, -16.0, -13.856]]
        )

    def squarePyramid(self):
        return self.createCurve(
            [[0.0, 16.0, 0.0], [-16.0, -16.0, -16.0], [-16.0, -16.0, 16.0], [0.0, 16.0, 0.0], [-16.0, -16.0, 16.0],
             [16.0, -16.0, 16.0], [0.0, 16.0, 0.0], [16.0, -16.0, 16.0], [16.0, -16.0, -16.0], [0.0, 16.0, 0.0],
             [16.0, -16.0, -16.0], [-16.0, -16.0, -16.0]]
        )


def main():
    CurveController().initUi()
