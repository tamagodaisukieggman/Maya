//===============================================
//
//  コリジョン関連
//
//===============================================

/////////////////////////////////////////////////
// 全てのコリジョンメッシュをUCX_ で始まる命名にする
/////////////////////////////////////////////////
global proc int shr_collisionUtils_renameAllCollisionNodes(string $root_node)
{
    /*
    Returns
    -------
    処理結果:
        -1: リネーム不可（命名元の表示メッシュノードがない）
         0: リネーム不要
         1: リネーム完了
    */

    // 命名対象のコリジョンメッシュノードを取得
    string $target_nodes[] = shr_collisionUtils_getTargetCollisionNodes($root_node);

    if(`size($target_nodes)` == 0)
    {
        return 0;
    }

    // 命名元の表示メッシュノードを取得
    string $node_to_name_from = shr_collisionUtils_getNodeToNameFrom($root_node);

    if($node_to_name_from == "")
    {
        return -1;
    }

    // 命名対象ノードをリネーム
    int $renamed = shr_collisionUtils_renameTargetNodes($target_nodes, $node_to_name_from);

    return $renamed;
}

/////////////////////////////////////////////////
// 命名対象ノードをリネーム
/////////////////////////////////////////////////
global proc int shr_collisionUtils_renameTargetNodes(string $target_nodes[], string $node_to_name_from)
{
    /*
    Returns
    -------
    処理結果:
         0: リネーム不要
         1: リネーム完了
    */

    int $renamed = false;

    string $target_node;

    for($target_node in $target_nodes)
    {
        // 有効なコリジョンノード名じゃなければリネーム
        if(shr_collisionUtils_isValidTargetNodeName($target_node, $node_to_name_from) == false)
        {
            string $new_name = "UCX_" + $node_to_name_from + "_00";

            rename $target_node $new_name;

            $renamed = true;
        }
    }

    return $renamed;
}

/////////////////////////////////////////////////
// 命名対象ノードがすでに有効な命名になっているか
/////////////////////////////////////////////////
global proc int shr_collisionUtils_isValidTargetNodeName(string $target_node, string $node_to_name_from)
{
    string $match_str = `match ("|UCX_" + $node_to_name_from + "_[0-9][0-9]$") $target_node`;

    if($match_str != "")
    {
        return true;
    }

    return false;
}

/////////////////////////////////////////////////
// 命名元にするノードを取得
/////////////////////////////////////////////////
global proc string shr_collisionUtils_getNodeToNameFrom(string $root_node)
{
    string $node_to_name_from = "";

    string $lod0_node = $root_node + "|mesh|lod0";

    if(`objExists $lod0_node`)
    {
        // lod0 ノード以下の全てのmesh ノードを取得
        string $all_mesh_nodes[] = `listRelatives -ad -ni -f -type "mesh" $lod0_node`;

        if(`size($all_mesh_nodes)` != 0)
        {
            string $parents[] = `listRelatives -parent $all_mesh_nodes[0]`;

            $node_to_name_from = $parents[0];
        }
    }

    return $node_to_name_from;
}

/////////////////////////////////////////////////
// 命名対象のノードを取得
/////////////////////////////////////////////////
global proc string[] shr_collisionUtils_getTargetCollisionNodes(string $root_node)
{
    // 命名対象のノード
    string $target_nodes[];

    // collision ノードを取得
    string $collision_node = shr_collisionUtils_getCollisionNode($root_node);

    if($collision_node == "")
    {
        return $target_nodes;
    }

    // collision ノード以下の全てのmesh ノードを取得
    string $all_mesh_nodes[] = `listRelatives -ad -ni -f -type "mesh" $collision_node`;

    string $mesh_node;

    // mesh ノードの親のトランスフォームノードを取得して配列に追加
    for($mesh_node in $all_mesh_nodes)
    {
        string $parent_nodes[] = `listRelatives -parent -f $mesh_node`;
        $target_nodes[`size($target_nodes)`] = $parent_nodes[0];
    }

    // 重複する項目を配列から削除
    $target_nodes = stringArrayRemoveDuplicates($target_nodes);

    return $target_nodes;
}

/////////////////////////////////////////////////
// collision ノードを取得
/////////////////////////////////////////////////
global proc string shr_collisionUtils_getCollisionNode(string $root_node)
{
    string $collision_node;

    // ルートノードの子ノードを取得
    string $child_nodes[] = `listRelatives -c -f -type "transform" $root_node`;

    string $child_node;

    for($child_node in $child_nodes)
    {
        if(endsWith($child_node, "|collision"))
        {
            $collision_node = $child_node;

            break;
        }
    }

    return $collision_node;
}
