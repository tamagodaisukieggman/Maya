//===============================================
//
// HDA から出力されたメッシュをベイクし再構築する
//
//===============================================

global proc string[] shr_rebuildHdaOutputMeshes(string $hdaNode)
{
    string $resultNodes[];

    // 出力ジオメトリをベイク
    houdiniEngine_bakeAsset($hdaNode);

    // ベイクして生成されたノードを取得
    string $generatedNodes[] = `ls -sl`;

    // 生成ノードの名前から枝番を削除
    $generatedNodes = shr_rebuildHdaOutputMeshes_removeSuffixNumber($generatedNodes);

    string $generatedNode;

    for($generatedNode in $generatedNodes)
    {
        // 生成ノードの名前から対応する元ノードの名前を取得
        string $sourceNode = substituteAllString($generatedNode, "|", "");
        $sourceNode = substituteAllString($sourceNode, "_SEP_", "|");

        // アトリビュートを変更
        shr_rebuildHdaOutputMeshes_modifyGeneratedMeshesAttributes($sourceNode, $generatedNode);

        // 元ノードの子供を取得
        string $childrenOfSourceNode[] = `listRelatives -pa -type "transform" $sourceNode`;

        // いったん元ノードの子に
        string $parentResults[] = `parent $generatedNode $sourceNode`;
        $generatedNode = $parentResults[0];

        // 元ノードのワールドピボット位置
        float $pivotPos[] = `xform -q -ws -pivots $sourceNode`;

        // 対象ノードのピボット位置を変更
        xform -ws -pivots $pivotPos[0] $pivotPos[1] $pivotPos[2] $generatedNode;

        // 移動と回転をフリーズ
        makeIdentity -apply true -t 1 -r 1 -s 0 -n 0 $generatedNode;

        // 元ノードに子ノードが存在すれば生成ノードの子に
        if(`size($childrenOfSourceNode)`)
        {
            parent $childrenOfSourceNode $generatedNode;
        }

        // 元ノードの親を取得
        string $tempArray[]= `listRelatives -p -pa $sourceNode`;

        string $parentOfSourceNode;

        // 親が存在する場合
        if(`size($tempArray)`)
        {
            $parentOfSourceNode = $tempArray[0];

            // 元ノードの階層内での順番を取得
            int $order = shr_rebuildHdaOutputMeshes_getOrderInHierarchy($sourceNode);

            // 生成ノードを元ノードの親の子に
            $parentResults = `parent $generatedNode $parentOfSourceNode`;
            $generatedNode = $parentResults[0];

            // ノード順復元
            reorder -r $order $generatedNode;
        }
        else
        {
            // ワールドの子に戻す
            parent -w $generatedNode;
        }

        // 元ノード削除
        delete $sourceNode;

        // 生成ノードを元ノードの名前にリネーム
        string $sourceNodeBaseName = shr_rebuildHdaOutputMeshes_getNodeBasename($sourceNode);
        string $resultNode = `rename $generatedNode $sourceNodeBaseName`;

        $resultNodes[`size($resultNodes)`] = $resultNode;
    }

    return $resultNodes;
}

///////////////////////////////////////
// 生成ノードの名前から枝番を削除
///////////////////////////////////////
global proc string[] shr_rebuildHdaOutputMeshes_removeSuffixNumber(string $nodes[])
{
    string $node;

    int $index;

    for($node in $nodes)
    {
        string $newName = substituteAllString($node, "_SEP_", ".");
        string $tokens[] = stringToStringArray($newName, ".");

        int $tokenSize = `size($tokens)`;

        if($tokenSize == 2)
        {
            $newName = $tokens[0];
        }
        else if($tokenSize >=3)
        {
            stringArrayRemoveAtIndex($tokenSize - 1, $tokens);

            $newName = stringArrayToString($tokens, "_SEP_");
        }

        $newName = shr_rebuildHdaOutputMeshes_getNodeBasename($newName);

        $newName = `rename $node $newName`;

        $newName = longNameOf($newName);

        $nodes[$index] = $newName;

        $index += 1;
    }

    return $nodes;
}

/////////////////////////////////////////////////
// HDA で生成されたメッシュのアトリビュートを変更
/////////////////////////////////////////////////
global proc shr_rebuildHdaOutputMeshes_modifyGeneratedMeshesAttributes(string $sourceNode, string $targetNode)
{
    // 法線表示を元ノードと合わせる
    int $normalType = `getAttr ($sourceNode + ".normalType")`;
    float $normalSize = `getAttr ($sourceNode + ".normalSize")`;
    int $displayNormal = `getAttr ($sourceNode + ".displayNormal")`;
    setAttr ($targetNode + ".normalType") $normalType;
    setAttr ($targetNode + ".normalSize") $normalSize;
    setAttr ($targetNode + ".displayNormal") $displayNormal;

    int $displayColors = `getAttr ($sourceNode + ".displayColors")`;
    setAttr ($targetNode + ".displayColors") $displayColors;
}

/////////////////////////////////////////////////
// 親階層内での順番を取得
/////////////////////////////////////////////////
global proc int shr_rebuildHdaOutputMeshes_getOrderInHierarchy(string $node)
{
    $node = longNameOf($node);

    int $num;

    string $parent[] = `listRelatives -p -pa $node`;

    if($parent[0] != "")
    {
        string $child_nodes[] = `listRelatives -f $parent[0]`;

        for($child_node in $child_nodes)
        {
            $num += 1;

            if($child_node == $node)
            {
                break;
            }
        }
    }

    return $num;
}

////////////////////////////////////
// ノードのベースネームを取得
///////////////////////////////////
global proc string shr_rebuildHdaOutputMeshes_getNodeBasename(string $node_name)
{
    string $tokens[];

    tokenize $node_name "|" $tokens;

    return $tokens[`size($tokens)` - 1];
}
