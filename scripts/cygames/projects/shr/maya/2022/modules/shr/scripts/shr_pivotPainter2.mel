//===============================================
//
// Pivot Painter 2 for Shenron
//
//===============================================

/////////////////////////////////////////////////
// UI 作成
/////////////////////////////////////////////////
global proc shr_pivotPainter2()
{
    source "shr_rebuildHdaOutputMeshes";
    source "shr_p4Cmds";
    source "shr_fixHierarchy";
    source "shr_ueRemoteClient";
    source "shr_bakeFoliagePivotToUV";

    // ツールログ送信
    shr_toolLog("Pivot Painter 2", "", "launched.");

    // Houdini 環境が有効か
    int $houdiniEngineEnabled = python("import shr.utils.hda_loader.houdini_util as houdini_util; houdini_util.main()");

    // Houdini Engine Preferences の Unset PYTHONPATH をTrue に
    // ライブラリの競合が発生を回避するため
    shr_pivotPainter2_checkUnsetPythonpathPreference();

    // メニュー作成
    menuBarLayout;

    menu -label "リスト";
        menuItem
            -label "リストを更新"
            -image "refresh.png"
            -enable on
            -c "shr_pivotPainter2_updateAssetList"
            ;

    menu -l "ヘルプ" -helpMenu on;
        menuItem
            -l "Pivot Painter 2 のヘルプ"
            -image "help.png"
            -c "showHelp -absolute \"https://wisdom.cygames.jp/pages/viewpage.action?pageId=530194726\""
            ;

     frameLayout -lv off -mw 4 -mh 4;

        rowLayout -nc 2;
            button
                -l "Bake Pivot Ex"
                -ann "ロックされた法線を維持したままBake Pivot を実行"
                -c "shr_bakePivotEx"
                ;

            button
                -l "Vegetation Normal Smooth"
                -c "shr_vegetationNormalSmooth"
                ;

            setParent ..;

        textScrollList
            -allowMultiSelection on
            -sc "shr_pivotPainter2_assetListSelectedCallback"
            -dcc "shr_pivotPainter2_assetListDoubleClickedCallback"
            TSL_shr_pivotPainter2_asset;

        columnLayout -adj on -cat "left" 8;

            checkBox
                -l "テクスチャをUE5 にインポート"
                -ann "出力した_pip, _piv マップをUE5 にインポートします"
                -v `optionVar -q ov_importTextures_shr_pivotPainter2`
                -onc "optionVar -iv ov_importTextures_shr_pivotPainter2 true"
                -ofc "optionVar -iv ov_importTextures_shr_pivotPainter2 false"
                uCB_shr_pivotPainter2_inportTexture;

        setParent ..;

        separator -st "in" SEP_shr_pivotPainter2;

        rowLayout -nc 2 -adj 1;

            button
                -l "Pivot Painter 2 データ作成"
                -bgc 0.5 0.6 0.5
                -c "shr_pivotPainter2_pivotPainter2ButtonClickedCallback"
                ;

            symbolButton
                -image "fileOpen.png"
                -ann "テクスチャ出力先フォルダをエクスプローラで開く"
                -c "shr_pivotPainter2_openInExplorer"
                ;

            setParent ..;

    // リストを更新
    shr_pivotPainter2_updateAssetList();

    // シーンオープン時にリストを更新
    scriptJob -event "SceneOpened" "shr_pivotPainter2_updateAssetList" -parent WSC_shr_pivotPainter2;
}

/////////////////////////////////////////////////
// アセットリストで選択しているアセットを取得
/////////////////////////////////////////////////
global proc string[] shr_pivotPainter2_getSelectedAssets()
{
    string $sel_assets[] = `textScrollList -q -si TSL_shr_pivotPainter2_asset`;

    return $sel_assets;
}

///////////////////////////////////////
// シーン内のvgt_ ノードを取得
///////////////////////////////////////
global proc string[] shr_pivotPainter2_getAllVgtNodes()
{
    // シーン内のルートノードを取得
    string $root_nodes[] = `ls "|*"`;

    string $vgt_nodes[];

    string $elm;

    for($elm in $root_nodes)
    {
        if(startsWith($elm, "vgt_"))
        {
            // 正しいアセット名の場合
            if(`shr_fixHierarchy_checkRootNodeName($elm)` == 1)
            {
                $vgt_nodes[`size($vgt_nodes)`] = $elm;
            }
        }
    }

    return $vgt_nodes;
}

///////////////////////////////////////
// アセットリストを更新
///////////////////////////////////////
global proc shr_pivotPainter2_updateAssetList()
{
    // アセットリストで選択しているアセットを取得
    string $sel_assets[] = shr_pivotPainter2_getSelectedAssets();

    // アセットリストをクリア
    textScrollList -e -removeAll TSL_shr_pivotPainter2_asset;

    // vgt_ ノードを取得
    string $vgt_nodes[] = shr_pivotPainter2_getAllVgtNodes();

    string $elm;

    // アセットリストに項目を追加
    for($elm in $vgt_nodes)
    {
        textScrollList -e -a $elm TSL_shr_pivotPainter2_asset;
    }

    string $sel_asset;

    // 選択していた項目があれば再選択
    for($sel_asset in $sel_assets)
    {
        if (stringArrayContains($sel_asset, $vgt_nodes))
        {
            textScrollList -e -si $sel_asset TSL_shr_pivotPainter2_asset;
        }
    }
}

/////////////////////////////////////////////////
// アセットリストで項目を選択した時のコールバック
/////////////////////////////////////////////////
global proc shr_pivotPainter2_assetListSelectedCallback()
{
    setFocus SEP_shr_pivotPainter2;

    string $sel_assets[] = shr_pivotPainter2_getSelectedAssets();

    if(`size($sel_assets)` == 0)
    {
        select -cl;
    }

    else
    {
        select -r $sel_assets;
    }
}

/////////////////////////////////////////////////
// アセットリストで項目をダブルクリックした時のコールバック
/////////////////////////////////////////////////
global proc shr_pivotPainter2_assetListDoubleClickedCallback()
{
    string $all_items[] = `textScrollList -q -ai TSL_shr_pivotPainter2_asset`;

    string $item;

    for($item in $all_items)
    {
        textScrollList -e -si $item TSL_shr_pivotPainter2_asset;
    }

    shr_pivotPainter2_assetListSelectedCallback();
}

/////////////////////////////////////////////////
// Pivot Painter 2 ボタンを押したときののコールバック
/////////////////////////////////////////////////
global proc shr_pivotPainter2_pivotPainter2ButtonClickedCallback()
{
    // シーン名取得
    string $scene_name = `file -q -sceneName -shortName`;

    // ファイルがまだ一度も保存されていなければ終了
    if($scene_name == "")
    {
        confirmDialog
            -title "確認" -message "シーンがまだ保存されていません。" -button "確認";

        return;
    }

    // アセットリストで選択しているアセットを取得
    string $sel_assets[] = shr_pivotPainter2_getSelectedAssets();

    if(`size($sel_assets)` == 0)
    {
        confirmDialog -title "確認" -message "リストで項目を選択してから実行してください。" -button "確認";

        return;
    }

    // 出力パス
    string $texture_folder_path = `shr_pivotPainter2_getTextureFolderPath`;

    if($texture_folder_path == "")
    {
        confirmDialog -title "確認" -message "出力先フォルダが特定できません。" -button "確認";

        return;
    }

    // 出力確認ダイアログ
    if(shr_pivotPainter2_exportConfirmDialog($texture_folder_path, $sel_assets) == false)
    {
        print "// テクスチャ出力をキャンセルしました。\n";
        return;
    }

    // 現在の選択を取得
    string $sel[] = `ls -sl`;

    // メインプログレスバー
    global string $gMainProgressBar;

    int $step = 3;

    // プログレスバー
    progressBar -e -bp -max (`size($sel_assets)` * $step) -st "" -isInterruptable false $gMainProgressBar;

    // テクスチャ出力結果
    int $export_results[];

    int $count;

    string $asset;

    for($asset in $sel_assets)
    {
        // 対象のメッシュノードを取得
        string $target_node = shr_pivotPainter2_getTargetNode($asset);

        if($target_node == "")
        {
            intArrayInsertAtIndex(`size($export_results)`, $export_results, 0);
            intArrayInsertAtIndex(`size($export_results)`, $export_results, 0);

            $count += $step;
            continue;
        }

        // キャンセルの場合
        if(intArrayContains(3, $export_results))
        {
            intArrayInsertAtIndex(`size($export_results)`, $export_results, 3);
            intArrayInsertAtIndex(`size($export_results)`, $export_results, 3);

            $count += $step;
            continue;
        }

        progressBar -e -pr $count -st ($asset + ": Houdini Asset 作成中...") $gMainProgressBar;
        $count += 1;

        // ロケーター階層構造を作成
        string $created_locator = shr_pivotPainter2_createLocatorHierarchy($target_node);

        // 不要UVset を削除
        shr_pivotPainter2_deleteGarbageUVsetPre($target_node);

        // hda ノード作成
        string $houdini_asset_node = shr_pivotPainter2_createHoudiniAsset($target_node, $created_locator);

        progressBar -e -pr $count -st ($asset + ": テクスチャ出力中...") $gMainProgressBar;
        $count += 1;

        // テクスチャを出力
        int $current_results[] = shr_pivotPainter2_exportTextures($houdini_asset_node, $asset);

        intArrayInsertAtIndex(`size($export_results)`, $export_results, $current_results[0]);
        intArrayInsertAtIndex(`size($export_results)`, $export_results, $current_results[1]);

        progressBar -e -pr $count -st ($asset + ": ノード階層を再構築中...") $gMainProgressBar;
        $count += 1;

        // HDA から出力されたメッシュをベイクし再構築する
        string $generatedNodes[] = shr_rebuildHdaOutputMeshes($houdini_asset_node);

        // 不要UV を削除
        shr_pivotPainter2_deleteGarbageUVsetPost($generatedNodes);

        // hda ノードを削除
        delete $houdini_asset_node;

        // ロケーターを削除
        delete $created_locator;
    }

    progressBar -e -ep $gMainProgressBar;

    // UE5 テクスチャインポート結果
    int $import_results[];

    // UE5 インポートアセットチェックボックスがオンの場合
    if(`optionVar -q "ov_importTextures_shr_pivotPainter2"`)
    {
        // UE5 にインポート
        $import_results = shr_pivotPainter2_importTexturesInUE5($sel_assets, $export_results);
    }

    // 選択を復元
    select -r $sel;

    refresh;

    // 結果ダイアログ
    shr_pivotPainter2_resultDialog($export_results, $import_results, $texture_folder_path, $sel_assets);
}

///////////////////////////////////////
// 不要UVset を削除 生成前
///////////////////////////////////////
global proc shr_pivotPainter2_deleteGarbageUVsetPre(string $target_node)
{
    string $all_descendents[] = `listRelatives -ad -pa -type "transform" $target_node`;

    stringArrayInsertAtIndex(0, $all_descendents, $target_node);

    string $descendent;

    for($descendent in $all_descendents)
    {
        shr_bakeFoliagePivotToUV_deleteGarbageUVset($descendent);
    }
}

///////////////////////////////////////
// 不要UVset を削除 生成後
///////////////////////////////////////
global proc shr_pivotPainter2_deleteGarbageUVsetPost(string $target_nodes[])
{
    string $valid_uvsets[] = {"map1", "uv2"};

    string $target_node;

    for($target_node in $target_nodes)
    {
        string $all_uv_sets[] = `polyUVSet -q -auv $target_node`;

        string $uv_set;

        for($uv_set in $all_uv_sets)
        {
            if(stringArrayContains($uv_set, $valid_uvsets) == false)
            {
                polyUVSet -d -uvSet $uv_set $target_node;
            }
        }
    }
}

///////////////////////////////////////
// UE5 テクスチャインポート
///////////////////////////////////////
global proc int[] shr_pivotPainter2_importTexturesInUE5(string $asset_names[], int $export_results[])
{
    int $import_results[];

    // UE5 が起動していない場合
    if(shr_ueRemoteClient_isUE5Running() == false)
    {
        confirmDialog -t "確認" -m "UE5 が起動していません。\n\nインポートをスキップします。"-b "確認";

        return $import_results;
    }

    // ShenronProto プロジェクトじゃない場合
    if(shr_ueRemoteClient_isValidProject() == false)
    {
        string $dialog_result =
        `confirmDialog
            -title "確認"
            -message "現在UE5 で開いているプロジェクトが 'ShenronProto' ではありません。\n\nUE5 プロジェクトへのインポートを実行しますか？"
            -button "実行"
            -button "キャンセル"
            -defaultButton "キャンセル"
            -cancelButton "キャンセル"
            -dismissString "キャンセル"`
            ;

        // キャンセルボタン
        if ($dialog_result == "キャンセル")
        {
            return $import_results;
        }
    }

    // メインプログレスバー
    global string $gMainProgressBar;

    // プログレスバー
    progressBar -e -bp -max (`size($asset_names)` * 2) -st "" -isInterruptable false $gMainProgressBar;

    string $asset_name;

    int $index;

    for($asset_name in $asset_names)
    {
        // アセット名からテクスチャ名を取得
        string $texture_names[] = shr_pivotPainter2_getTextureNames($asset_name);

        string $texture_name;

        for($texture_name in $texture_names)
        {
            string $texture_basename = basenameEx($texture_name);

            progressBar -e -pr ($index + 1) -st ("UE5 にインポート中: " + $texture_basename) $gMainProgressBar;

            int $success;

            // テクスチャエクスポートが失敗、スキップ、キャンセルの場合はテクスチャインポートを行わない
            if($export_results[$index] != 1)
            {
                $import_results[$index] = $export_results[$index];
            }
            else
            {
                // テクスチャパス、UE5 パスを取得
                python("import sys");
                python("import os");
                python("sys.path.append('C:/cygames/shrdev/shr/tools/in/ext/unrealengine/5.1/python')");
                python("from shr_ue_utils.asset import AssetNameUtils");
                python("asset_name_utils = AssetNameUtils('" + $texture_basename + "')");

                string $texture_path = shr_pivotPainter2_getTexturePath($texture_name);
                string $ue_path = python("os.path.dirname(asset_name_utils.asset_file_game_path)");

                // jon_info を設定
                string $job_info_list[];
                $job_info_list = shr_ueRemoteClient_appendStrValueToJobInfoList($job_info_list, "tga_path", $texture_path);
                $job_info_list = shr_ueRemoteClient_appendStrValueToJobInfoList($job_info_list, "ue_path", $ue_path);

                // UE5 にインポート（リモート）
                string $remote_result[] = shr_ueRemoteClient_runFile("import_texture", $job_info_list, 0);

                // UE5 インポートの成否
                $import_results[$index] = shr_ueRemoteClient_isSuccess($remote_result);

                // インポート失敗なら次へ
                if($import_results[$index] == false)
                {
                    $index += 1;

                    continue;
                }
            }

            $index += 1;
        }
    }

    progressBar -e -ep $gMainProgressBar;

    return $import_results;
}

///////////////////////////////////////
//  出力確認ダイアログ
///////////////////////////////////////
global proc int shr_pivotPainter2_exportConfirmDialog(string $export_folder_path, string $sel_assets[])
{
    string $message = "テクスチャを出力します。よろしいですか？\n\n";

    $message = $message + "■ 出力先フォルダ\n";
    $message = $message + "    " + $export_folder_path + "\n\n";

    $message = $message + "■ 出力テクスチャ名";

    string $asset;

    for($asset in $sel_assets)
    {
        string $texture_names[] = shr_pivotPainter2_getTextureNames($asset);

        $message = $message + "\n    " + $texture_names[0];
        $message = $message + "\n    " + $texture_names[1];
    }

    string $result =
    `confirmDialog
        -title "確認"
        -message $message
        -button "実行"
        -button "キャンセル"
        -defaultButton "実行"
        -cancelButton "キャンセル"
        -dismissString "キャンセル"`
        ;

    // キャンセルボタン
    if ($result == "キャンセル")
    {
        return false;
    }

    return true;
}

///////////////////////////////////////
// 結果ダイアログ
///////////////////////////////////////
global proc shr_pivotPainter2_resultDialog(int $export_results[], int $import_results[], string $export_folder_path, string $sel_assets[])
{
    string $result_mark[];
    $result_mark[0] = "×";
    $result_mark[1] = "〇";
    $result_mark[2] = "×";
    $result_mark[3] = "×";

    string $export_result_string[];
    $export_result_string[0] = " : 失敗";
    $export_result_string[1] = "";
    $export_result_string[2] = " : スキップ";
    $export_result_string[3] = " : キャンセル";

    string $message = "出力結果\n\n";

    $message = $message + "■ 出力先フォルダ\n";
    $message = $message + "    " + $export_folder_path + "\n\n";

    $message = $message + "■ 出力テクスチャ名";

    string $selItem;
    int $index;

    for($asset in $sel_assets)
    {
        string $texture_names[] = shr_pivotPainter2_getTextureNames($asset);

        $message = $message + `format -s $result_mark[$export_results[$index * 2]] -s $texture_names[0] -s $export_result_string[$export_results[$index * 2]] "\n    ^1s  ^2s^3s"`;
        $message = $message + `format -s $result_mark[$export_results[$index * 2 + 1]] -s $texture_names[1] -s $export_result_string[$export_results[$index * 2 + 1]] "\n    ^1s  ^2s^3s"`;

        $index += 1;
    }

    $index = 0;

    if(`size($import_results)` != 0)
    {
        $message = $message + "\n\n■ UE5 インポート";

        for($asset in $sel_assets)
        {
            string $texture_names[] = shr_pivotPainter2_getTextureNames($asset);

            $message = $message + `format -s $result_mark[$import_results[$index * 2]] -s (basenameEx($texture_names[0])) -s $export_result_string[$import_results[$index * 2]] "\n    ^1s  ^2s^3s"`;
            $message = $message + `format -s $result_mark[$import_results[$index * 2 + 1]] -s (basenameEx($texture_names[1])) -s $export_result_string[$import_results[$index * 2 + 1]] "\n    ^1s  ^2s^3s"`;

            $index += 1;
        }
    }

    // ダイアログ表示
    confirmDialog -title "確認" -message $message -button "確認";
}

///////////////////////////////////////
// Houdini Asset Node を作成
///////////////////////////////////////
global proc string shr_pivotPainter2_createHoudiniAsset(string $mesh_input_node, string $locator_input_node)
{
    // hda ノード作成
    string $houdini_asset_node = houdiniEngine_loadAsset("C:/cygames/shrdev/shr/tools/in/ext/maya/share/hda/shr_pivot_painter.hda", "Sop/shr_pivot_painter");

    setAttr ($houdini_asset_node + ".syncWhenInputConnects") false;

    // 出力メッシュをグループで分割
    setAttr ($houdini_asset_node + ".splitGeosByGroup") true;
    setAttr ($houdini_asset_node + ".outputGeometryGroups") false;

    // Mesh インプットとLocator インプットに入力
    houdiniEngine_setAssetInput(($houdini_asset_node + ".input[0].inputNodeId"), {$mesh_input_node});
    houdiniEngine_setAssetInput(($houdini_asset_node + ".input[1].inputNodeId"), {$locator_input_node});

    // Sync Asset
    houdiniEngine_syncAssetOutput $houdini_asset_node;

    // ファイル出力先フォルダを指定
    string $output_folder = shr_pivotPainter2_getTempFolderPath();
    setAttr -type "string" ($houdini_asset_node + ".houdiniAssetParm.houdiniAssetParm_outputdir") $output_folder;

    return $houdini_asset_node;
}

///////////////////////////////////////
// テクスチャを出力
///////////////////////////////////////
global proc int[] shr_pivotPainter2_exportTextures(string $houdini_asset_node, string $asset_name)
{
    int $export_results[];

    // FBX とテクスチャを一時フォルダに出力
    setAttr ($houdini_asset_node + ".houdiniAssetParm.houdiniAssetParm_execute__button") true;

    refresh;

    // 一時ファイルパス
    string $temp_folder_path = shr_pivotPainter2_getTempFolderPath();
    string $temp_pip_texture_path = $temp_folder_path + "/temp_RGB_PivotPos_A_ParentIndexInt_UV2.exr";
    string $temp_piv_texture_path = $temp_folder_path + "/temp_RGB_XVector_A_XExtentDividedbyRange_UV2.tga";

    // テクスチャ名
    string $texture_names[] = shr_pivotPainter2_getTextureNames($asset_name);

    // アセットのテクスチャパス
    string $texture_folder_path = shr_pivotPainter2_getTextureFolderPath();
    string $pip_texture_path = shr_pivotPainter2_getTexturePath($texture_names[0]);
    string $piv_texture_path = shr_pivotPainter2_getTexturePath($texture_names[1]);

    // アセットのtexture フォルダがなければ作成
    if(`filetest -d $texture_folder_path` == false)
    {
        sysFile -md $texture_folder_path;
    }

    int $is_canceled;

    // テクスチャファイルを移動
    if(`filetest -f $temp_pip_texture_path`)
    {
        // perforce チェック処理
        string $result = `shr_pivotPainter2_confirmChackout($pip_texture_path)`;

        if($result == 1)
        {
            sysFile -rename $pip_texture_path $temp_pip_texture_path;
        }
        // キャンセル
        else if($result == 3)
        {
            $is_canceled = true;
        }

        $export_results[0] = $result;
    }

    if($is_canceled)
    {
        $export_results[1] = 3;
    }
    else
    {
        if(`filetest -f $temp_piv_texture_path`)
        {
            // perforce チェック処理
            string $result = `shr_pivotPainter2_confirmChackout($piv_texture_path)`;

            if($result == 1)
            {
                sysFile -rename $piv_texture_path $temp_piv_texture_path;
            }

            $export_results[1] = $result;
        }
    }

    return $export_results;
}

///////////////////////////////////////
// チェックアウト確認ダイアログ
///////////////////////////////////////
global proc int shr_pivotPainter2_confirmChackout(string $path)
{
    // p4v ファイル情報取得
    string $fstat[] = `shr_p4Cmds_getFileStatusFlags($path)`;

    // print $fstat;

    // perforce 登録ファイルの場合
    if(`size($fstat)` != 0)
    {
        // コンフリクトしている場合
        if(stringArrayContains("CONFLICTED", $fstat))
        {
            string $message = $path + "\n\n コンフリクトしているため、テクスチャ出力できません。";

            string $result = `confirmDialog -t "Pivot Painter 2" -icn "warning" -m $message -b "スキップ" -b "キャンセル" -db "スキップ" -cb "キャンセル" -ds "キャンセル"`;

            if($result == "スキップ")
            {
                return 2;
            }
            else
            {
                return 3;
            }
        }

        // 他にチェックアウトしているユーザーがいる場合
        if(stringArrayContains("OTHER_OPENED", $fstat))
        {
            string $users[] = shr_p4Cmds_getOtherCheckoutUser($path);
            string $user;

            string $buttonLabel;

            string $message = $path + "\n\n他にチェックアウトしているユーザーがいます。";

            // チェックアウトしている場合
            if(stringArrayContains("CHECKED_OUT", $fstat))
            {
                $message = $message + "\n\nテクスチャ出力を行いますか？";

                $buttonLabel = "テクスチャ出力";
            }
            // チェックアウトしていない場合
            else
            {
                $message = $message + "\n\nチェックアウトしてテクスチャ出力を行いますか？";

                $buttonLabel = "チェックアウトしてテクスチャ出力";
            }

            $message = $message + "\n\n\n【 現在チェックアウトしているユーザー 】\n\n";

            for($user in $users)
            {
                $message = $message + $user + ", ";
            }

            string $result = `confirmDialog -t "Pivot Painter 2" -m $message -b $buttonLabel -b "スキップ" -b "キャンセル" -db $buttonLabel -cb "キャンセル" -ds "キャンセル"`;

            if($result == "テクスチャ出力")
            {
                return 1;
            }
            else if($result == "チェックアウトしてテクスチャ出力")
            {
                // チェックアウト
                shr_p4Cmds_checkout($path);

                return 1;
            }
            else if($result == "スキップ")
            {
                return 2;
            }
            else
            {
                return 3;
            }
        }

        // 最新リビジョンじゃない場合
        else if(stringArrayContains("UNCURRENT", $fstat))
        {
            // チェックアウトしている場合
            if(stringArrayContains("CHECKED_OUT", $fstat))
            {
                // リバートして最新リビジョンを取得してチェックアウトするか確認
                string $message = $path + "\n\n最新リビジョンではない状態でチェックアウトされています。\n\n最新リビジョンを取得してチェックアウトし直しますか？";

                string $result = `confirmDialog -t "Pivot Painter 2" -m $message -b "最新リビジョンを取得してチェックアウト" -b "このまま続行" -b "スキップ" -b "キャンセル" -db "最新リビジョンを取得してチェックアウト" -cb "キャンセル" -ds "キャンセル"`;

                if($result == "最新リビジョンを取得してチェックアウト")
                {
                    // リバート
                    shr_p4Cmds_revert($path);

                    // 最新リビジョンを取得
                    shr_p4Cmds_sync($path);

                    // チェックアウト
                    shr_p4Cmds_checkout($path);

                    return 1;
                }
                else if($result == "このまま続行")
                {
                    return 1;
                }
                else if($result == "スキップ")
                {
                    return 2;
                }
                else
                {
                    return 3;
                }
            }
            // チェックアウトしていない場合
            else
            {
                // 最新リビジョンを取得するか確認
                string $message = $path + "\n\n最新リビジョンではありません。\n\n最新リビジョンを取得してチェックアウトしますか？";

                string $result = `confirmDialog -t "Pivot Painter 2" -m $message -b "最新リビジョンを取得してチェックアウト" -b "このままチェックアウト" -b "スキップ" -b "キャンセル" -db "最新リビジョンを取得してチェックアウト" -cb "キャンセル" -ds "キャンセル"`;

                if($result == "最新リビジョンを取得してチェックアウト")
                {
                    // 最新リビジョンを取得
                    shr_p4Cmds_sync($path);

                    // チェックアウト
                    shr_p4Cmds_checkout($path);

                    return 1;
                }
                else if($result == "このままチェックアウト")
                {
                    // チェックアウト
                    shr_p4Cmds_checkout($path);

                    return 1;
                }
                else if($result == "スキップ")
                {
                    return 2;
                }
                else
                {
                    return 3;
                }
            }
        }
        // 最新リビジョンでチェックアウトしていない場合
        else if(stringArrayContains("REGISTERED", $fstat) && stringArrayContains("CHECKED_OUT", $fstat) == false)
        {
            // チェックアウトするか確認
            string $message = $path + "\n\nチェックアウトしますか？";

            string $result = `confirmDialog -t "Pivot Painter 2" -m $message -b "チェックアウトする" -b "スキップ" -b "キャンセル" -db "チェックアウトする" -cb "キャンセル" -ds "キャンセル"`;

            if($result == "チェックアウトする")
            {
                // チェックアウト
                shr_p4Cmds_checkout($path);

                return 1;
            }
            else if($result == "スキップ")
            {
                return 2;
            }
            else
            {
                return 3;
            }
        }

        return true;
    }

    return true;
}

///////////////////////////////////////
// 一時フォルダパスを取得
///////////////////////////////////////
global proc string shr_pivotPainter2_getTempFolderPath()
{
    return `getenv "temp"` + "/shr_pivotPainter2";
}

///////////////////////////////////////
// texture フォルダパスを取得
///////////////////////////////////////
global proc string shr_pivotPainter2_getTextureFolderPath()
{
    // シーンファイルパス
    string $sceneFilePath = `file -q -sceneName`;

    // texture パス設定
    string $textureFolderPath = substituteAllString($sceneFilePath, "work/maya", "texture");
    $textureFolderPath = dirname($textureFolderPath);

    return $textureFolderPath;
}

///////////////////////////////////////
// テクスチャ名を取得
///////////////////////////////////////
global proc string[] shr_pivotPainter2_getTextureNames(string $asset_name)
{
    string $texture_names[] = {
        "t_" + $asset_name + "_pip.exr",
        "t_" + $asset_name + "_piv.tga"
    };

    return $texture_names;
}

///////////////////////////////////////
// テクスチャパスを取得
///////////////////////////////////////
global proc string shr_pivotPainter2_getTexturePath(string $texture_name)
{
    // アセットのテクスチャパス
    string $texture_folder_path = shr_pivotPainter2_getTextureFolderPath();
    string $texture_path = $texture_folder_path + "/" + $texture_name;

    return $texture_path;
}

/////////////////////////////////////////////////
// 対象のメッシュノードを取得
/////////////////////////////////////////////////
global proc string shr_pivotPainter2_getTargetNode(string $asset)
{
    string $lod0_node = $asset + "|mesh|lod0";

    if(`objExists $lod0_node` == false)
    {
        return "";
    }

    string $child_nodes[] = `listRelatives -f $lod0_node`;

    return $child_nodes[0];
}

/////////////////////////////////////////////////
// ロケータ作成
/////////////////////////////////////////////////
global proc string shr_pivotPainter2_createLocator(string $target_node, string $parent_node)
{
    // 対応するメッシュノードの移動値と回転値を取得
    float $translation[] = `xform -q -t -ws $target_node`;
    float $rotation[] = `xform -q -ro -ws $target_node`;

    string $locator_name = shr_rebuildHdaOutputMeshes_getNodeBasename($target_node);

    // ロケーターを作成
    string $temp[] = `spaceLocator -name $locator_name`;
    string $created_locator = $temp[0];
    xform -ws -t $translation[0] $translation[1] $translation[2] -ro $rotation[0] $rotation[1] $rotation[2] $created_locator;

    // 親ノードを指定していれば親子付け
    if($parent_node != "")
    {
        $temp = `parent $created_locator $parent_node`;
        $created_locator = longNameOf($temp[0]);
    }

    // 対応するメッシュノードの子ノードを取得
    string $child_nodes[] = `listRelatives -f -type "transform" $target_node`;

    string $child_node;

    // 子ノードが存在すれば再帰でロケーター作成
    for($child_node in $child_nodes)
    {
        shr_pivotPainter2_createLocator($child_node, $created_locator);
    }

    return $created_locator;
}

/////////////////////////////////////////////////
// ロケータ階層構造作成
/////////////////////////////////////////////////
global proc string shr_pivotPainter2_createLocatorHierarchy(string $target_node)
{
    string $created_locator = "";

    $created_locator = shr_pivotPainter2_createLocator($target_node, "");

    return $created_locator;
}

/////////////////////////////////////////////////
// Houdini Engine のUnset PYTHONPATH 設定をチェック
/////////////////////////////////////////////////
global proc shr_pivotPainter2_checkUnsetPythonpathPreference()
{
    // Houdini Engine Preferecnes の Unset PYTHONPATH の状態を取得
    int $state = `optionVar -q "houdiniEngineUnsetPP"`;

    if($state)
    {
        return;
    }

    // Houdini Engine Preferecnes の Unset PYTHONPATH をtrue に
    optionVar -intValue "houdiniEngineUnsetPP" true;

    // 変更を反映させるためにプラグインをリロード
    if (`pluginInfo -q -loaded houdiniEngine`)
    {
        int $engine_in_use = !`pluginInfo -q -unloadOk houdiniEngine`;

        if ($engine_in_use)
        {
            // Maya の再起動を促す
            confirmDialog
                -title "Houdini Engine Preferences"
                -icon "information"
                -message "Houdini Engine for Maya の設定を変更しました。\n\n変更を反映するためにMaya を再起動してください。"
                -button "OK";
        }
        else
        {
            unloadPlugin("houdiniEngine");
            loadPlugin("houdiniEngine");
        }
    }
}

//===============================================
// 出力先フォルダをエクスプローラで開く
//===============================================
global proc shr_pivotPainter2_openInExplorer()
{
    string $path = shr_pivotPainter2_getTextureFolderPath();

    if($path == "")
    {
        confirmDialog -title "確認" -message "出力先フォルダが特定できません。" -button "確認";
    }
    else if(`filetest -d $path` == false)
    {
        confirmDialog -title "確認" -message "出力先フォルダが存在しません。" -button "確認";
    }
    else
    {
        system("explorer " + `substituteAllString $path "/" "\\"`);
    }
}

// NOTE:
// shr_pivotPainter2_UI();