//===============================================
//
//  草メッシュのピボットをUV にベイク
//
//===============================================

/////////////////////////////////////////////////
// UI 作成
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV()
{
    source "shr_fixHierarchy";

    // TA ツールログ送信
    shr_toolLog("Bake Foliage Pivot to UV", "", "launched.");

    //プリファレンスに値が無ければデフォルト値を設定
    if (`optionVar -ex "ov_offsetY_shr_bakeFoliagePivotToUV"` == 0)
    {
        optionVar -fv "ov_offsetY_shr_bakeFoliagePivotToUV" 0;
    }

    // メニュー作成
    menuBarLayout;

    menu -label "リスト";
        menuItem
            -label "リストを更新"
            -image "refresh.png"
            -enable on
            -c "shr_bakeFoliagePivotToUV_updateAssetList"
            ;

    menu -l "ヘルプ" -helpMenu on;
        menuItem
            -l "Bake Foliage Pivot to UV のヘルプ"
            -image "help.png"
            -c "showHelp -absolute \"https://wisdom.cygames.jp/pages/viewpage.action?pageId=510358525\""
            ;

     frameLayout -lv off -mw 4 -mh 4;
        rowLayout -nc 7;
            iconTextButton
                -st "iconAndTextHorizontal"
                -i "shr_bakeFoliagePivotToUV/create_group.png"
                -l "Create Group"
                -c "shr_bakeFoliagePivotToUV_createGroupButtonClickedCallback"
                -ann "選択ノードをグループ化します。"
                ;

            separator -hr off -w 4 -h 20 uSep_shr_bakeFoliagePivotToUV;

            iconTextButton
                -st "iconAndTextHorizontal"
                -i "shr_bakeFoliagePivotToUV/add_prefix.png"
                -l "Add Prefix"
                -c "shr_bakeFoliagePivotToUV_addPrefixButtonClickedCallback"
                -ann "選択ノードにpvt_ プリフィックスを付けます。"
                ;

            setParent ..;

        paneLayout -configuration "horizontal2" -paneSize 1 100 35 -staticHeightPane 1;

            frameLayout -l "アセット";

                rowLayout -nc 1;

                    iconTextCheckBox
                        -en false
                        -st "iconAndTextHorizontal"
                        -i "shr_bakeFoliagePivotToUV/show_pivot.png"
                        -l "Show Pivot Point"
                        -ann "選択アセットのピボット位置を表示"
                        -cc "shr_bakeFoliagePivotToUV_showPivotButtonClickedCallback(#1)"
                        uItcb_shr_bakeFoliagePivotToUV_showPivot
                        ;

                    setParent ..;

                textScrollList
                    -allowMultiSelection on
                    -sc "shr_bakeFoliagePivotToUV_assetListSelectedCallback"
                    -dcc "shr_bakeFoliagePivotToUV_assetListDoubleClickedCallback"
                    uTsl_shr_bakeFoliagePivotToUV_asset;

                setParent ..;

            frameLayout -l "ピボット";

                rowLayout -nc 1;

                    iconTextCheckBox
                        -en true
                        -st "iconAndTextHorizontal"
                        -i "shr_bakeFoliagePivotToUV/isolate.png"
                        -l "Isolate Selected"
                        -ann "選択ピボットグループのみを表示"
                        -cc "shr_bakeFoliagePivotToUV_IsolateButtonClickedCallback(#1)"
                        uItcb_shr_bakeFoliagePivotToUV_isolate
                        ;

                    setParent ..;

                textScrollList
                    -allowMultiSelection on
                    -sc "shr_bakeFoliagePivotToUV_pivotListSelectedCallback"
                    -dcc "shr_bakeFoliagePivotToUV_pivotListDoubleClickedCallback"
                    uTsl_shr_bakeFoliagePivotToUV_pivot;

                rowLayout -nc 5;
                    button
                    // iconTextButton
                        // -st "iconAndTextHorizontal"
                        // -i "shr_bakeFoliagePivotToUV/auto_pivot.png"
                        -l "Auto Pivot"
                        -c "shr_bakeFoliagePivotToUV_autoPivotButtonClickedCallback"
                        -ann "選択ピボットグループのピボット位置を自動設定します。"
                        ;

                    separator -hr off -w 4 -h 20;

                    button
                    // iconTextButton
                        // -st "iconAndTextHorizontal"
                        // -i "shr_bakeFoliagePivotToUV/auto_pivot.png"
                        -l "Spherical Normal"
                        -c "shr_bakeFoliagePivotToUV_editNormalButtonClickedCallback"
                        -ann "選択ピボットグループにSpherical Normal Tool を実行します。"
                        ;

                    floatField
                        -pre 2
                        -cc "shr_bakeFoliagePivotToUV_offsetValueChangedCallback"
                        -enterCommand "setFocus uSep_shr_bakeFoliagePivotToUV"
                        -v `optionVar -q "ov_offsetY_shr_bakeFoliagePivotToUV"`
                        uFf_shr_bakeFoliagePivotToUV_offsetY;

                    setParent ..;

                setParent ..;
            setParent ..;

        separator -st "in";

        button
            -l "UV にピボット位置を格納"
            -bgc 0.5 0.6 0.5
            -c "shr_bakeFoliagePivotToUV_bakePivotButtonClickedCallback"
            -ann "ピボットノードの位置情報をUV（pivot_uv）に格納します。"
            ;

    // リストを更新
    shr_bakeFoliagePivotToUV_updateAssetList();

    // シーンオープン時にリストを更新
    scriptJob -event "SceneOpened" "shr_bakeFoliagePivotToUV_updateAssetList" -parent uWsc_shr_bakeFoliagePivotToUV;
}

///////////////////////////////////////
// Show Pivot ボタンの状態を更新
///////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_updateShowPivotButton()
{
    string $sel_assets[] = shr_bakeFoliagePivotToUV_getSelectedAssets();

    int $enabled = false;
    int $show_pivot = false;

    if(`size($sel_assets)` != 0)
    {
        $enabled = true;

        string $SHOW_PIVOT_ATTR = "shr_bakeFoliagePivotToUV_showPivot";

        if(`attributeExists $SHOW_PIVOT_ATTR $sel_assets[0]`)
        {
            string $attribute = $sel_assets[0] + "." + $SHOW_PIVOT_ATTR;
            $show_pivot = `getAttr $attribute`;
        }
    }

    iconTextCheckBox -e -en $enabled -v $show_pivot uItcb_shr_bakeFoliagePivotToUV_showPivot;
}

///////////////////////////////////////
// アセットリストを更新
///////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_updateAssetList()
{
    // アセットリストで選択しているアセットを取得
    string $sel_assets[] = shr_bakeFoliagePivotToUV_getSelectedAssets();

    // アセットリストをクリア
    textScrollList -e -removeAll uTsl_shr_bakeFoliagePivotToUV_asset;

    // シーン内のルートノードを取得
    string $root_nodes[] = `ls "|*"`;

    // vgt_ ノードを取得
    string $vgt_nodes[] = shr_bakeFoliagePivotToUV_getAllVgtNodes($root_nodes);

    string $elm;

    // アセットリストに項目を追加
    for($elm in $vgt_nodes)
    {
        textScrollList -e -a $elm uTsl_shr_bakeFoliagePivotToUV_asset;
    }

    string $sel_asset;

    // 選択していた項目があれば再選択
    for($sel_asset in $sel_assets)
    {
        if (stringArrayContains($sel_asset, $vgt_nodes))
        {
            textScrollList -e -si $sel_asset uTsl_shr_bakeFoliagePivotToUV_asset;
        }
    }

    // Show Pivot ボタンの状態を更新
    shr_bakeFoliagePivotToUV_updateShowPivotButton();

    // ピボットリストを更新
    shr_bakeFoliagePivotToUV_updatePivotList();
}

///////////////////////////////////////
// vgt_ ノードを取得
///////////////////////////////////////
global proc string[] shr_bakeFoliagePivotToUV_getAllVgtNodes(string $nodes[])
{
    string $vgt_nodes[];

    string $elm;

    for($elm in $nodes)
    {
        if(startsWith($elm, "vgt_"))
        {
            // 正しいアセット名の場合
            if(`shr_fixHierarchy_checkRootNodeName($elm)` == 1)
            {
                $vgt_nodes[`size($vgt_nodes)`] = $elm;
            }
        }
    }

    return $vgt_nodes;
}

/////////////////////////////////////////////////
// アセットリストで項目を選択した時のコールバック
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_assetListSelectedCallback()
{
    setFocus uSep_shr_bakeFoliagePivotToUV;

    string $sel_assets[] = shr_bakeFoliagePivotToUV_getSelectedAssets();

    int $enabled = false;
    int $show_pivot = false;

    if(`size($sel_assets)` == 0)
    {
        select -cl;
    }

    else
    {
        select -r $sel_assets;
    }

    // Show Pivot ボタンの状態を更新
    shr_bakeFoliagePivotToUV_updateShowPivotButton();

    // ピボットリストを更新
    shr_bakeFoliagePivotToUV_updatePivotList();
}

/////////////////////////////////////////////////
// アセットリストで項目をダブルクリックした時のコールバック
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_assetListDoubleClickedCallback()
{
    string $all_items[] = `textScrollList -q -ai uTsl_shr_bakeFoliagePivotToUV_asset`;

    string $item;

    for($item in $all_items)
    {
        textScrollList -e -si $item uTsl_shr_bakeFoliagePivotToUV_asset;
    }

    shr_bakeFoliagePivotToUV_assetListSelectedCallback();
}

/////////////////////////////////////////////////
// アセットリストで選択しているアセットを取得
/////////////////////////////////////////////////
global proc string[] shr_bakeFoliagePivotToUV_getSelectedAssets()
{
    string $sel_assets[] = `textScrollList -q -si uTsl_shr_bakeFoliagePivotToUV_asset`;

    return $sel_assets;
}

///////////////////////////////////////
// ピボットリストを更新
///////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_updatePivotList()
{
    // ピボットリストで選択している項目を取得
    string $sel_pivots[] = shr_bakeFoliagePivotToUV_getSelectedPivots();

    textScrollList -e -removeAll uTsl_shr_bakeFoliagePivotToUV_pivot;

    string $sel_assets[] = shr_bakeFoliagePivotToUV_getSelectedAssets();

    string $sel_asset;

    string $all_pivot_nodes[];

    for($sel_asset in $sel_assets)
    {
        string $pivot_nodes[] = shr_bakeFoliagePivotToUV_getAllPivotNodes($sel_asset);

        $all_pivot_nodes = stringArrayCatenate($all_pivot_nodes, $pivot_nodes);
    }

    string $pivot_node;

    // ピボットリストに項目を追加
    for($pivot_node in $all_pivot_nodes)
    {
        string $basename = shr_bakeFoliagePivotToUV_getNodeBasename($pivot_node);

        textScrollList -e -a $basename -utg $pivot_node uTsl_shr_bakeFoliagePivotToUV_pivot;
    }

    string $sel_pivot;

    // 選択していた項目があれば再選択
    for($sel_pivot in $sel_pivots)
    {
        if (stringArrayContains($sel_pivot, $all_pivot_nodes))
        {
            textScrollList -e -sut $sel_pivot uTsl_shr_bakeFoliagePivotToUV_pivot;
        }
    }
}

/////////////////////////////////////////////////
// ピボットリストで項目を選択した時のコールバック
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_pivotListSelectedCallback()
{
    setFocus uSep_shr_bakeFoliagePivotToUV;

    string $sel_pivots[] = shr_bakeFoliagePivotToUV_getSelectedPivots();

    if(`size($sel_pivots)` == 0)
    {
        select -cl;

        return;
    }

    select -r $sel_pivots;

    if(`iconTextCheckBox -q -v uItcb_shr_bakeFoliagePivotToUV_isolate` == true)
    {
        shr_bakeFoliagePivotToUV_IsolateButtonClickedCallback(false);
        shr_bakeFoliagePivotToUV_IsolateButtonClickedCallback(true);
    }
}

/////////////////////////////////////////////////
// ピボットリストで項目をダブルクリックした時のコールバック
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_pivotListDoubleClickedCallback()
{
    string $all_items[] = `textScrollList -q -ai uTsl_shr_bakeFoliagePivotToUV_pivot`;

    string $item;

    for($item in $all_items)
    {
        textScrollList -e -si $item uTsl_shr_bakeFoliagePivotToUV_pivot;
    }

    shr_bakeFoliagePivotToUV_pivotListSelectedCallback();
}

/////////////////////////////////////////////////
// ピボットリストで選択している項目を取得
/////////////////////////////////////////////////
global proc string[] shr_bakeFoliagePivotToUV_getSelectedPivots()
{
    string $sel_pivots[] = `textScrollList -q -sut uTsl_shr_bakeFoliagePivotToUV_pivot`;

    return $sel_pivots;
}

/////////////////////////////////////////////////
// Create Group ボタンをクリックしたときのコールバック
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_createGroupButtonClickedCallback()
{
    string $sel_nodes[] = `ls -sl -tr`;

    if(`size($sel_nodes)` ==0)
    {
        return;
    }

    string $all_button = "まとめてグループ化";
    string $each_button = "個別にグループ化";
    string $cancel_button = "キャンセル";

    string $result =
    `confirmDialog
        -title "確認"
        -message "選択ノードをグループ化する方法を選択してください。"
        -icon "question"
        -button $all_button
        -button $each_button
        -button $cancel_button
        -defaultButton $all_button
        -cancelButton $cancel_button
        -dismissString $cancel_button`;

    if($result == $cancel_button)
    {
        return;
    }
    else if($result == $all_button)
    {
        shr_bakeFoliagePivotToUV_createPvtGroup();
    }
    else
    {
        string $sel_node;

        for($sel_node in $sel_nodes)
        {
            select -r $sel_node;

            shr_bakeFoliagePivotToUV_createPvtGroup();
        }
    }

    // ピボットリストを更新
    shr_bakeFoliagePivotToUV_updatePivotList();
}

/////////////////////////////////////////////////
// pvt_ グループを作成
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_createPvtGroup()
{
    Group;

    string $created_node = `rename "pvt_00"`;

    // Auto Pivot を実行
    shr_bakeFoliagePivotToUV_autoPivot($created_node);

    // pivot の表示状態をルートノードの設定に合わせる
    shr_bakeFoliagePivotToUV_matchPivotVisibility($created_node);
}


/////////////////////////////////////////////////
// Add Prefix ボタンをクリックしたときのコールバック
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_addPrefixButtonClickedCallback()
{
    string $prefix = "pvt_";

    string $sel_nodes[] = `ls -sl -tr`;

    string $node;

    for($node in $sel_nodes)
    {
        // ノードのベースネームを取得
        string $basename = shr_bakeFoliagePivotToUV_getNodeBasename($node);

        if(startsWith($basename, $prefix))
        {
            return;
        }

        string $renamed_node = `rename $node ($prefix + $basename)`;

        // pivot の表示状態をルートノードの設定に合わせる
        shr_bakeFoliagePivotToUV_matchPivotVisibility($renamed_node);
    }

    // ピボットリストを更新
    shr_bakeFoliagePivotToUV_updatePivotList();
}

////////////////////////////////////
// ノードのベースネームを取得
///////////////////////////////////
global proc string shr_bakeFoliagePivotToUV_getNodeBasename(string $node_name)
{
    string $tokens[];

    tokenize $node_name "|" $tokens;

    return $tokens[`size($tokens)` - 1];
}

/////////////////////////////////////////////////
// Auto Pivot ボタンをクリックしたときのコールバック
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_autoPivotButtonClickedCallback()
{
    string $sel_pivots[] = shr_bakeFoliagePivotToUV_getSelectedPivots();

    if(`size($sel_pivots)` ==0)
    {
        return;
    }

    string $sel_pivot;

    for($sel_pivot in $sel_pivots)
    {
        shr_bakeFoliagePivotToUV_autoPivot($sel_pivot);
    }
}

/////////////////////////////////////////////////
// Auto Pivot を実行
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_autoPivot(string $target_node)
{
    string $all_meshes[] = `listRelatives -ad -pa -ni -type "mesh" $target_node`;

    if(`size($all_meshes)` == 0)
    {
        return;
    }

    string $node;

    vector $all_vtx_pos[];
    vector $vtx_pos;
    float $x = 0;
    float $z = 0;
    int $num_vtx;

    for($mesh in $all_meshes)
    {
        $all_vtx_pos = `xform -q -ws -t ($mesh + ".vtx[*]")`;

        for($vtx_pos in $all_vtx_pos)
        {
            if($vtx_pos.y < 10)
            {
                $x += $vtx_pos.x;
                $z += $vtx_pos.z;
                $num_vtx += 1;
            }
        }
    }

    if($num_vtx != 0)
    {
        $x = $x / $num_vtx;
        $z = $z / $num_vtx;
    }

    // ピボット位置を設定
    xform -ws -rp $x 0 $z $target_node;
    xform -ws -sp $x 0 $z $target_node;
}

/////////////////////////////////////////////////
// Show Pivot ボタンをクリックしたときのコールバック
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_showPivotButtonClickedCallback(int $checked)
{
    string $SHOW_PIVOT_ATTR = "shr_bakeFoliagePivotToUV_showPivot";

    string $sel_assets[] = shr_bakeFoliagePivotToUV_getSelectedAssets();

    string $sel_asset;

    // カスタムアトリビュートにピボット表示設定を格納
    for($sel_asset in $sel_assets)
    {
        if(`attributeExists $SHOW_PIVOT_ATTR $sel_asset`)
        {
            string $attr_name = $sel_asset + "." + $SHOW_PIVOT_ATTR;
            setAttr $attr_name $checked;
        }
        // カスタムアトリビュートが無ければ作成
        else
        {
            addAttr -longName $SHOW_PIVOT_ATTR -at bool -dv true $sel_asset;
        }

        shr_bakeFoliagePivotToUV_showPivot($sel_asset, $checked);
    }
}

/////////////////////////////////////////////////
// 指定アセットのピボットノードのピボットを表示
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_showPivot(string $root_node, int $show)
{
    // 指定アセットの全てのピボットノードを取得
    string $pivot_nodes[] = shr_bakeFoliagePivotToUV_getAllPivotNodes($root_node);

    if(`size($pivot_nodes)` == 0)
    {
        return;
    }

    for($pivot_node in $pivot_nodes)
    {
        setAttr ($pivot_node + ".displayRotatePivot") $show;
    }
}

/////////////////////////////////////////////////
// ピボットノードのピボット表示設定をルートノードの設定に合わせる
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_matchPivotVisibility(string $pivot_node)
{
    string $SHOW_PIVOT_ATTR = "shr_bakeFoliagePivotToUV_showPivot";

    $pivot_node = longNameOf($pivot_node);

    string $tokens[] = stringToStringArray($pivot_node, "|");

    string $root_node = $tokens[0];

    int $show;

    if(`attributeExists $SHOW_PIVOT_ATTR $root_node`)
    {
        $show = `getAttr ($root_node + "." + $SHOW_PIVOT_ATTR)`;
    }

    setAttr ($pivot_node + ".displayRotatePivot") $show;
}

/////////////////////////////////////////////////
// Edit Normal ボタンをクリックしたときのコールバック
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_editNormalButtonClickedCallback()
{
    string $sel_pivots[] = shr_bakeFoliagePivotToUV_getSelectedPivots();

    if(`size($sel_pivots)` ==0)
    {
        return;
    }

    string $sel[] = `ls -sl`;

    float $offset_y = `floatField -q -v uFf_shr_bakeFoliagePivotToUV_offsetY`;

    // spherical normal ツールをインポート
    python("import shr.model.spherical_normal");
    python("spherical_normal = shr.model.spherical_normal.SphericalNormal()");

    string $sherical_normal_window = "spherica_normal_tool_apiver_ui";

    int $ui_created = false;

    // spherical normal のUI がなければ非表示で作成
    if (`window -exists $sherical_normal_window` == false)
    {
        python("spherical_normal.create(visible=False)");

        $ui_created = true;
    }

    string $sel_pivot;

    for($sel_pivot in $sel_pivots)
    {
        // ピボット位置を取得
        float $pivot_pos[] = `xform -q -ws -rp $sel_pivot`;

        select -r $sel_pivot;

        // mesh を登録
        python("spherical_normal._registration_mesh()");

        // 作成された編集用ロケータを選択
        string $edit_locator[] = `ls -sl`;

        // ロケータを移動
        move -ws $pivot_pos[0] ($pivot_pos[1] + $offset_y) $pivot_pos[2] $edit_locator[0];

        // spherical normal を実行
        python("spherical_normal._spherical_normal()");
    }

    if($ui_created)
    {
        deleteUI $sherical_normal_window;
    }

    select -r $sel;
}

/////////////////////////////////////////////////
// offset 値が変更されたときのコールバック
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_offsetValueChangedCallback()
{
    setFocus uSep_shr_bakeFoliagePivotToUV;

    float $offset_y = `floatField -q -v uFf_shr_bakeFoliagePivotToUV_offsetY`;

    optionVar -fv "ov_offsetY_shr_bakeFoliagePivotToUV" $offset_y;
}


/////////////////////////////////////////////////
// Isolate ボタンをクリックしたときのコールバック
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_IsolateButtonClickedCallback(int $checked)
{
    if($checked)
    {
        string $sel_pivots[] = shr_bakeFoliagePivotToUV_getSelectedPivots();

        if(`size($sel_pivots)` == 0)
        {
            select -clear;
        }
        else
        {
            select -r $sel_pivots;
        }
    }

    string $model_panels[] = `getPanel -type modelPanel`;

    string $model_panel;

    for($model_panel in $model_panels)
    {
        // アイソレート表示をオン
        isolateSelect -state $checked $model_panel;

        // オートロードをオフ
        editor -edit -lockMainConnection $model_panel;
        // toggleAutoLoad $model_panel false;
        // setIsolateSelectAutoAdd $model_panel $checked;
    }
}

/////////////////////////////////////////////////
// ピボットベイクボタンをクリックしたときのコールバック
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_bakePivotButtonClickedCallback()
{
    string $sel_assets[] = shr_bakeFoliagePivotToUV_getSelectedAssets();

    if(`size($sel_assets)` == 0)
    {
        return;
    }

    string $message;
    $message += "UV（pivot_uv）にピボット位置情報を格納します。 \n\n";
    $message += "■ 対象アセット\n    ";
    $message += stringArrayToString($sel_assets, "\n    ");

    int $dialog_result = shr_bakeFoliagePivotToUV_showConfirmDialog("確認", $message, "実行");

    if($dialog_result == false)
    {
        return;
    }

    string $bake_result;
    string $result_message;

    string $sel_asset;

    for($sel_asset in $sel_assets)
    {
        $bake_result = shr_bakeFoliagePivotToUV_bakePivot($sel_asset);

        if($bake_result == "successed")
        {
            $result_message += "    " + $sel_asset + " : 完了\n";
        }
        else
        {
            $result_message += "    " + $sel_asset + " : スキップ\n";
        }
    }

    $message = "実行結果\n\n" + $result_message;

    confirmDialog -t "確認" -m $message -b "OK";
}

/////////////////////////////////////////////////
// UV にピボット位置を格納
/////////////////////////////////////////////////
global proc string shr_bakeFoliagePivotToUV_bakePivot(string $root_node)
{
    print "\n//=====================================";
    print ("\n// Bake Pivot to UV: " + $root_node);
    print "\n//=====================================\n";

    // アセットの全てのピボットノードを取得
    string $pivot_nodes[] = shr_bakeFoliagePivotToUV_getAllPivotNodes($root_node);

    if(`size($pivot_nodes)` == 0)
    {
        print "// No pivot nodes: skipped\n";

        return "skipped";
    }

    // UV を初期化
    shr_bakeFoliagePivotToUV_initializeUVsetForFoliagePivot($root_node);

    string $pivot_node;
    string $node;

    int $progress;

    progressWindow
        -t "実行中"
        -pr $progress
        -st ""
        -max `size($pivot_nodes)`
        ;

    for($pivot_node in $pivot_nodes)
    {
        progressWindow -e -st ($root_node + " : " + $pivot_node);

        // ピボット位置を取得
        float $pivot_pos[] = `xform -q -ws -rp $pivot_node`;
        float $x = $pivot_pos[0];
        float $z = $pivot_pos[2];

        // バウンディング情報を取得
        float $bounds[] = `exactWorldBoundingBox $pivot_node`;
        float $radius = `max ($bounds[3] - $bounds[0]) ($bounds[5] - $bounds[2])` / 2.0;
        float $height = $bounds[4];

        string $pivot_node_descendents[] = `listRelatives -ad -f -type "transform" $pivot_node`;

        for($node in $pivot_node_descendents)
        {
            if(shr_bakeFoliagePivotToUV_uvsetExists("pivot_uv", $node))
            {
                // ピボット位置をUV に格納
                shr_bakeFoliagePivotToUV_storeDataInUV($node, "pivot_uv", $x, $z);
            }
            // 高さと半径をUV 格納
            if(shr_bakeFoliagePivotToUV_uvsetExists("size_uv", $node))
            {
                // 高さと幅をUV に格納
                shr_bakeFoliagePivotToUV_storeDataInUV($node, "size_uv", $radius, $height);
            }
        }

        string $log = "// " + $pivot_node + ": ";
        $log += "pivot(" + $x + ", " + $z + "), ";
        $log += "radius(" + $radius + "), ";
        $log += "height(" + $height + ")\n";

        print($log);

        $progress += 1;

        progressWindow -e -pr $progress;
    }

    progressWindow -endProgress;

    return "successed";
}

/////////////////////////////////////////////////
// UV を初期化
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_initializeUVsetForFoliagePivot(string $root_node)
{
    // mesh ノード以下の全ての子孫を取得
    string $all_descendents[] = shr_bakeFoliagePivotToUV_getAllDescendentsOfMeshNode($root_node);

    string $node;

    int $progress;

    progressWindow
        -t "初期化中"
        -pr $progress
        -st ""
        -max `size($all_descendents)`
        ;

    string $uv_sets[] = {"pivot_uv", "size_uv"};
    string $uv_set;

    for($node in $all_descendents)
    {
        progressWindow -e -st ($root_node + " : " + $node) -pr $progress;
        $progress += 1;

        // 不要なUVset を削除
        shr_bakeFoliagePivotToUV_deleteGarbageUVset($node);

        for($uv_set in $uv_sets)
        {
            // UVset が無ければ作成
            if(shr_bakeFoliagePivotToUV_uvsetExists($uv_set, $node) == false)
            {
                string $result[] = `polyUVSet -cr -uvSet $uv_set $node`;

                // UVset を作成した場合
                if($result[0] != "")
                {
                    polyForceUV -cp -uvSetName $uv_set $node;
                }
                // UVset を作成できなかった場合（transform ノードの場合）
                else
                {
                    break;
                }
            }

            // uv の値を(0, 0) に
            shr_bakeFoliagePivotToUV_storeDataInUV($node, $uv_set, 0, 0);
        }
    }

    progressWindow -endProgress;
}

/////////////////////////////////////////////////
// 不要UVset を削除
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_deleteGarbageUVset(string $target_node)
{
    string $all_uv_sets[] = `polyUVSet -q -auv $target_node`;

    string $garbageUVsets[] = {"blend_ao", "LightMapUV"};
    string $garbageUVset;

    for($garbageUVset in $garbageUVsets)
    {
        if(stringArrayContains($garbageUVset, $all_uv_sets))
        {
            polyUVSet -d -uvSet $garbageUVset $target_node;
        }
    }
}

/////////////////////////////////////////////////
// 指定したuvset ノードに存在するか
/////////////////////////////////////////////////
global proc int shr_bakeFoliagePivotToUV_uvsetExists(string $uv_set, string $target_node)
{
    string $all_uv_sets[] = `polyUVSet -q -auv $target_node`;

    if(stringArrayContains($uv_set, $all_uv_sets))
    {
        return true;
    }

    return false;
}

/////////////////////////////////////////////////
// ノードの指定UV に情報を格納
/////////////////////////////////////////////////
global proc shr_bakeFoliagePivotToUV_storeDataInUV(string $target_node, string $uv_set, float $x, float $z)
{
    // カレントUVset を取得
    string $current_uv_set[] = `polyUVSet -q -cuv $target_node`;

    // 指定UV 情報を格納
    polyUVSet -cuv -uvSet $uv_set $target_node;
    polyEditUV -uvSetName $uv_set -r false -u $x -v $z ($target_node + ".map[*]");

    // カレント UVset を元に戻す
    polyUVSet -cuv -uvSet $current_uv_set[0] $target_node;
}

/////////////////////////////////////////////////
// 指定アセットの全てのピボットノードを取得
/////////////////////////////////////////////////
global proc string[] shr_bakeFoliagePivotToUV_getAllPivotNodes(string $root_node)
{
    // mesh ノード以下の子孫を取得
    string $all_descendents[] = shr_bakeFoliagePivotToUV_getAllDescendentsOfMeshNode($root_node);

    string $pivot_nodes[];

    string $node;

    // pvt_ で始まるノードを取得
    for($node in $all_descendents)
    {
        string $basename = shr_bakeFoliagePivotToUV_getNodeBasename($node);

        if(startsWith($basename, "pvt_"))
        {
            $pivot_nodes[`size($pivot_nodes)`] = $node;
        }
    }

    return $pivot_nodes;
}

/////////////////////////////////////////////////
// mesh ノード以下の子孫を取得
/////////////////////////////////////////////////
global proc string[] shr_bakeFoliagePivotToUV_getAllDescendentsOfMeshNode(string $root_node)
{
    string $all_descendents[];

    string $mesh_node = $root_node + "|mesh";

    if(`objExists $mesh_node` == false)
    {
        return $all_descendents;
    }

    $all_descendents = `listRelatives -ad -pa -type "transform" $mesh_node`;

    return $all_descendents;
}

/////////////////////////////////////////////////
// 確認ダイアログ
/////////////////////////////////////////////////
global proc int shr_bakeFoliagePivotToUV_showConfirmDialog(string $title, string $message, string $button_label)
{
    string $result =
    `confirmDialog
        -title $title
        -message $message
        -icon "question"
        -button $button_label
        -button "キャンセル"
        -defaultButton $button_label
        -cancelButton "キャンセル"
        -dismissString "キャンセル"`
        ;

    if ($result == "キャンセル")
    {
        return false;
    }

    return true;
}

// NOTE:
// shr_bakeFoliagePivotToUV_UI();