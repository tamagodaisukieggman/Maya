///////////////////////////////////////
// UI 作成
///////////////////////////////////////
global proc shr_exportFbx()
{
    // TA ツールログ送信
    shr_toolLog("Environment Exporter", "", "launched.");

    source "shr_p4Cmds";
    source "shr_fixHierarchy";
    source "shr_collisionUtils";
    source "shr_ueRemoteClient";

    //プリファレンスに値が無ければデフォルト値を設定
    if (`optionVar -ex "ov_parentMaterial_shr_exportFbx"` == 0)
    {
        optionVar -sv "ov_parentMaterial_shr_exportFbx" "mi_std01_01_base";
    }
    if (`optionVar -ex "ov_reassignMaterial_shr_exportFbx"` == 0)
    {
        optionVar -iv "ov_reassignMaterial_shr_exportFbx" 1;
    }
    if (`optionVar -ex "ov_enableNanite_shr_exportFbx"` == 0)
    {
        optionVar -iv "ov_enableNanite_shr_exportFbx" 1;
    }
    if (`optionVar -ex "ov_addToCollections_shr_exportFbx"` == 0)
    {
        optionVar -iv "ov_addToCollections_shr_exportFbx" 1;
    }

    menuBarLayout;

    // メニュー
    menu -label "リスト";
        menuItem
            -label "リストを更新"
            -enable on
            -c "shr_exportFbx_updateAssetList; shr_exportFbx_updateCollectionList"
            ;

    menu -label "ツール";
        menuItem
            -label "選択アセットの旧仕様の階層構造を修正..."
            -c "shr_exportFbx_fixHierarchyMenuCallback()"
            ;


        // NOTE: 一旦封印 2022/10/19
        // menuItem -d true;
        // menuItem
        //     -label "選択アセットのコリジョン用メッシュノードをリネーム"
        //     -c "shr_exportFbx_renameAllCollisionNodesMenuCallback()"
        //     ;

    menu -l "ヘルプ" -helpMenu on;
        menuItem
            -l "Environment Exporter : 背景用FBX 書き出しツールのヘルプ"
            -c "showHelp -absolute \"https://wisdom.cygames.jp/pages/viewpage.action?pageId=452511931\""
            ;

    frameLayout
        -lv off
        -mw 4 -mh 4
        ;

        // // NOTE: ひとまず背景だけ
        // optionMenu;
        //     menuItem -l "背景";

        textScrollList
            -allowMultiSelection on
            -sc "shr_exportFbx_selAssetItems"
            -dcc "shr_exportFbx_selAllAssetItems"
            uTsl_shr_exportFbx;

        columnLayout -adj on -cat "left" 8;

            checkBox
                -l "UE5 にインポート"
                -ann "出力したFBX ファイルをUE5 にインポートします"
                -v `optionVar -q ov_importAsset_shr_exportFbx`
                -cc "shr_exportFbx_onImportAssetCheckboxChanged"
                uCb_importAsset_shr_exportFbx;

            separator -st "none" -h 2;

            columnLayout
                -adj on
                -cat "left" 16
                -en `optionVar -q ov_importAsset_shr_exportFbx`
                uCl_importOptions_shr_exportFbx;

                checkBox
                    -l "Nanite を有効化"
                    -ann "Nanite を有効化してUE5 にインポートします"
                    -v `optionVar -q ov_enableNanite_shr_exportFbx`
                    -cc "shr_exportFbx_onEnableNaniteCheckboxChanged"
                    uCb_enableNanite_shr_exportFbx;

                separator -st "none" -h 2;

                checkBox
                    -l "マテリアルインスタンス作成・アサイン"
                    -ann "UE5 にインポート後、規約に沿ったマテリアルインスタンスを作成・アサインします"
                    -v `optionVar -q ov_createMaterials_shr_exportFbx`
                    -cc "shr_exportFbx_onCreateMaterialsCheckboxChanged"
                    uCb_createMaterials_shr_exportFbx;

                separator -st "none" -h 2;

                string $parentMaterials[] = shr_exportFbx_getParentMaterials();

                columnLayout
                    -adj on
                    -co "left" 16
                    -en (`optionVar -q ov_createMaterials_shr_exportFbx`)
                    uCl_parentMaterial_shr_exportFbx;

                    rowColumnLayout
                        -nc 2
                        -cal 1 "right"
                        -adj 2
                        -rs 1 4
                        uRl_parentMaterial_shr_exportFbx;

                        text -l "親マテリアル : ";

                        optionMenu
                        -ann "作成・アサインするマテリアルインスタンスの親マテリアル"
                        -cc "optionVar -sv ov_parentMaterial_shr_exportFbx #1"
                        uOm_parentMaterial_shr_exportFbx;

                        string $last_selected_item = `optionVar -q "ov_parentMaterial_shr_exportFbx"`;

                        string $elm;

                        for($elm in $parentMaterials)
                        {
                            menuItem -l $elm;

                            if($elm == $last_selected_item)
                            {
                                optionMenu -e -v $elm uOm_parentMaterial_shr_exportFbx;
                            }
                        }

                        // optionMenu -e -v `optionVar -q "ov_parentMaterial_shr_exportFbx"` uOm_parentMaterial_shr_exportFbx;

                        text -l "存在する場合 : " -ann "マテリアルインスタンスが既に存在する場合の処理";

                        radioButtonGrp
                            -nrb 2
                            -la2 "スキップ" "再アサイン"
                            -an1 "マテリアルインスタンスの作成・アサインをスキップします"
                            -an2 "マテリアルインスタンスを規約に沿って再アサインします"
                            -cw 1 65
                            -sl `optionVar -q "ov_reassignMaterial_shr_exportFbx"`
                            -cc1 "shr_exportFbx_onRadioButtonChanged(1)"
                            -cc2 "shr_exportFbx_onRadioButtonChanged(2)"
                            uRbg_reassignMaterial_shr_exportFbx;

                        setParent ..;
                    setParent ..;

                rowLayout -nc 2 -adj 2;
                    checkBox
                        -l "コレクションに登録 :"
                        -ann "UE5 にインポート後、共有コレクションに登録します"
                        -v `optionVar -q ov_addToCollections_shr_exportFbx`
                        -cc "shr_exportFbx_onAddToCollectionsCheckboxChanged"
                        uCb_addCollection_shr_exportFbx;

                    frameLayout
                        -lv off
                        -en (`optionVar -q ov_addToCollections_shr_exportFbx`)
                        uFL_collectionList_shr_exportFbx;

                        textScrollList
                            -h 50
                            -allowMultiSelection on
                            uTsl_collections_shr_exportFbx;

                        setParent ..;
                    setParent ..;

                setParent ..;
            setParent ..;

        separator -st "in";

        rowLayout -nc 2 -adj 1;

            button
                -l "FBX 出力"
                -c "shr_exportFbx_onExportButtonCallback"
                -bgc 0.5 0.6 0.5
                ;

            symbolButton
                -image "fileOpen.png"
                -ann "FBX 出力先フォルダをエクスプローラで開く"
                -c "shr_exportFbx_openInExplorer"
                ;

            setParent ..;

    // リスト更新
    shr_exportFbx_updateAssetList;
    shr_exportFbx_updateCollectionList;

    // シーンオープン時にリストを更新
    scriptJob -event "SceneOpened" "shr_exportFbx_updateAssetList" -parent uWsc_shr_exportFbx;
}

///////////////////////////////////////
// アセットリストを更新
///////////////////////////////////////
global proc shr_exportFbx_updateAssetList()
{
    // リストをクリア
    textScrollList -e -removeAll uTsl_shr_exportFbx;

    // アセット階層構造をチェック
    shr_fixHierarchy({});

    // 現在シーンにある全ての ルートノードを取得
    string $rootNodes[] = `ls "|*"`;

    // 対象ノードリストを取得
    string $targetNodes[] = shr_exportFbx_getAllTargetNodes($rootNodes);

    string $elm;

    for($elm in $targetNodes)
    {
        textScrollList -e -a $elm uTsl_shr_exportFbx;
    }

    // コレクションリストの選択状態を更新
    shr_exportFbx_updateCollectionListSelection();
}

///////////////////////////////////////
// アセットリスト項目選択コールバック
///////////////////////////////////////
global proc shr_exportFbx_selAssetItems()
{
    string $selItems[] = `textScrollList -q -si uTsl_shr_exportFbx`;

    // コレクションリストの選択状態を更新
    shr_exportFbx_updateCollectionListSelection();

    select -r $selItems;
}

///////////////////////////////////////
// アセットリスト項目選択ダブルクリックコールバック
///////////////////////////////////////
global proc shr_exportFbx_selAllAssetItems()
{
    string $allItems[] = `textScrollList -q -ai uTsl_shr_exportFbx`;

    string $item;

    for($item in $allItems)
    {
        textScrollList -e -si $item uTsl_shr_exportFbx;
    }

    shr_exportFbx_selAssetItems;
}

////////////////////////////////////////
// アセットインポートチェックボックス コールバック
///////////////////////////////////////
global proc shr_exportFbx_onImportAssetCheckboxChanged()
{
    int $importAsset = `checkBox -q -v uCb_importAsset_shr_exportFbx`;

    optionVar -iv "ov_importAsset_shr_exportFbx" $importAsset;

    columnLayout -e -en $importAsset uCl_importOptions_shr_exportFbx;
}

////////////////////////////////////////
// Nanite 有効化チェックボックス コールバック
///////////////////////////////////////
global proc shr_exportFbx_onEnableNaniteCheckboxChanged()
{
    int $enableNanite = `checkBox -q -v uCb_enableNanite_shr_exportFbx`;

    optionVar -iv "ov_enableNanite_shr_exportFbx" $enableNanite;
}

///////////////////////////////////////
// マテリアル作成・アサインチェックボックス コールバック
///////////////////////////////////////
global proc shr_exportFbx_onCreateMaterialsCheckboxChanged()
{
    int $createMaterials = `checkBox -q -v uCb_createMaterials_shr_exportFbx`;

    columnLayout -e -en $createMaterials uCl_parentMaterial_shr_exportFbx;

    optionVar -iv "ov_createMaterials_shr_exportFbx" $createMaterials;
}

////////////////////////////////////////
// 親マテリアルリストを取得
///////////////////////////////////////
global proc string[] shr_exportFbx_getParentMaterials()
{
    string $parentMaterials[];

    string $baseMaterialsPath = "C:/cygames/shrdev/shr/project/ShenronProto/Content/shr/Resources/Environments/BaseMaterials";

    string $fileList[] = `getFileList -fs "mi_*.uasset" -fld $baseMaterialsPath`;

    string $file;

    for($file in $fileList)
    {
        $parentMaterials[`size($parentMaterials)`] = basenameEx($file);
    }

    return $parentMaterials;
}

////////////////////////////////////////
// ラジオボタン コールバック
///////////////////////////////////////
global proc shr_exportFbx_onRadioButtonChanged(int $num)
{
    int $selIndex = `radioButtonGrp -q -sl uRbg_reassignMaterial_shr_exportFbx`;

    optionVar -iv "ov_reassignMaterial_shr_exportFbx" $selIndex;
}

///////////////////////////////////////
// コレクションリストを更新
///////////////////////////////////////
global proc shr_exportFbx_updateCollectionList()
{
    // リストをクリア
    textScrollList -e -ra uTsl_collections_shr_exportFbx;

    // UE5 が起動していない場合
    if(shr_ueRemoteClient_isUE5Running() == false)
    {
        print "// UE5 が起動していないため、コレクションリストを取得できませんでした。\n";

        return;
    }

    // jon_info を設定
    string $job_info_list[];
    $job_info_list = shr_ueRemoteClient_appendIntValueToJobInfoList($job_info_list, "collection_group", 2);

    // コレクションリストを取得
    // [Name("Env_Test"), Name("Env_Test2")]
    string $remote_result[] = shr_ueRemoteClient_runFile("get_collections_by_group", $job_info_list, 0);

    // 成否
    if(shr_ueRemoteClient_isSuccess($remote_result) == false)
    {
        warning "コレクションリストを取得できませんでした。";

        return;
    }

    // output 結果からコレクション名を取得
    string $collections[] = shr_exportFbx_getCollectionsFromOutputStr($remote_result[2]);

    // リストに追加
    for($elm in $collections)
    {
        textScrollList -e -a $elm uTsl_collections_shr_exportFbx;
    }

    // リストサイズ変更
    int $num = `textScrollList -q -ni uTsl_collections_shr_exportFbx`;
    int $height = `min 200 ($num * 13 + 10)`;
    $height = `max 49 $height`;
    textScrollList -e -h $height uTsl_collections_shr_exportFbx;
}

///////////////////////////////////////
// output 結果からコレクション名を取得
///////////////////////////////////////
global proc string[] shr_exportFbx_getCollectionsFromOutputStr(string $output)
{
    string $tokens[] = stringToStringArray($output, ",");

    string $elm;

    string $collections[];

    // コレクション名を取得
    for($elm in $tokens)
    {
        string $collection = substituteAllString(`match "\".*\"" $elm`, "\"", "");

        if($collection != "")
        {
            $collections[`size($collections)`] = substituteAllString(`match "\".*\"" $elm`, "\"", "");
        }
    }

    return $collections;
}

///////////////////////////////////////
// コレクションリストの選択状態を更新
///////////////////////////////////////
global proc shr_exportFbx_updateCollectionListSelection()
{
    string $selItems[] = `textScrollList -q -si uTsl_shr_exportFbx`;

    string $elm;

    string $collections[];

    // コレクションカスタムアトリビュートがあれば取得
    for($elm in $selItems)
    {
        if(`attributeExists "shr_collections" $elm`)
        {
            string $temp[] = `getAttr ($elm + ".shr_collections")`;

            $collections = stringArrayCatenate($collections, $temp);
        }
    }

    // 重複を削除
    $collections = stringArrayRemoveDuplicates($collections);

    // コレクションリストの選択を解除
    textScrollList -e -deselectAll uTsl_collections_shr_exportFbx;

    if(`size($collections)` == 0)
    {
        return;
    }

    string $allItems[] = `textScrollList -q -allItems uTsl_collections_shr_exportFbx`;

    // コレクションリストに項目があれば選択
    for($elm in $collections)
    {
        if(stringArrayContains($elm, $allItems))
        {
            textScrollList -e -selectItem $elm uTsl_collections_shr_exportFbx;
        }
    }
}

////////////////////////////////////////
// コレクションに追加チェックボックス コールバック
///////////////////////////////////////
global proc shr_exportFbx_onAddToCollectionsCheckboxChanged()
{
    int $addToCollections = `checkBox -q -v uCb_addCollection_shr_exportFbx`;

    frameLayout -e -en $addToCollections uFL_collectionList_shr_exportFbx;

    optionVar -iv "ov_addToCollections_shr_exportFbx" $addToCollections;
}

///////////////////////////////////////
// FBX 出力ボタンコールバック
///////////////////////////////////////
global proc shr_exportFbx_onExportButtonCallback()
{
    // シーン名取得
    string $sceneName = `file -q -sceneName -shortName`;

    // ファイルがまだ一度も保存されていなければ終了
    if($sceneName == "")
    {
        confirmDialog
            -title "確認" -message "シーンがまだ保存されていません。" -button "確認";

        return;
    }

    // リストで項目が選択されていなければ終了
    string $selItems[] = `textScrollList -q -si uTsl_shr_exportFbx`;

    if(`size($selItems)` == 0)
    {
        confirmDialog -title "確認" -message "リストで項目を選択してから実行してください。" -button "確認";

        return;
    }

    // 出力パス設定
    string $exportFolderPath = `shr_exportFbx_getExportFolderPath`;

    if($exportFolderPath == "")
    {
        confirmDialog -title "確認" -message "出力先フォルダが特定できません。" -button "確認";

        return;
    }

    // 階層構造チェック（修正キャンセルの場合は終了）
    if(`shr_fixHierarchy($selItems)` == -1)
    {
        return;
    }

    // 出力確認ダイアログ
    if(shr_exportFbx_exportConfirmDialog($exportFolderPath, $selItems) == false)
    {
        print "// FBX 出力をキャンセルしました。\n";
        return;
    }

    // 現在の選択リストを取得
    string $sel[] = `ls -sl`;

    //FBX 出力設定
    shr_exportFbx_setFbxExportSettings;

    // FBX 出力
    int $exportResults[] = shr_exportFbx_exportFbx($exportFolderPath, $selItems);

    // UE5 FBX インポート結果
    int $importResults[];

    // UE5 インポートアセットチェックボックスがオンの場合
    if(`optionVar -q "ov_importAsset_shr_exportFbx"`)
    {
        // UE5 にインポート
        $importResults = shr_exportFbx_importFbxInUE5($selItems, $exportResults);
    }


    select -clear;

    string $elm;

    // 選択を復元
    for($elm in $sel)
    {
        if(`objExists $elm`)
        {
            select -add $elm;
        }
    }

    // 結果ダイアログ
    shr_exportFbx_resultDialog($exportResults, $importResults, $exportFolderPath, $selItems);
}

///////////////////////////////////////
// 出力フォルダパスを取得
///////////////////////////////////////
global proc string shr_exportFbx_getExportFolderPath()
{
    // シーンファイルパス
    string $sceneFilePath = `file -q -sceneName`;

    // 出力パス設定
    string $exportFolderPath = substituteAllString($sceneFilePath, "work/maya", "mesh");
    $exportFolderPath = dirname($exportFolderPath);

    return $exportFolderPath;
}

///////////////////////////////////////
// 出力確認ダイアログ
///////////////////////////////////////
global proc int shr_exportFbx_exportConfirmDialog(string $exportFolderPath, string $selItems[])
{
    string $elm;

    string $message = "FBX を出力します。よろしいですか？\n\n";

    $message = $message + "■ 出力先フォルダ\n";
    $message = $message + "    " + $exportFolderPath + "\n\n";

    $message = $message + "■ 出力FBX 名";

    for($elm in $selItems)
    {
        $message = $message + "\n    " + $elm + ".fbx";
    }

    string $result =
    `confirmDialog
        -title "確認"
        -message $message
        -button "実行"
        -button "キャンセル"
        -defaultButton "実行"
        -cancelButton "キャンセル"
        -dismissString "キャンセル"`
        ;

    // キャンセルボタン
    if ($result == "キャンセル")
    {
        return false;
    }

    return true;
}

///////////////////////////////////////
// FBX 出力設定
///////////////////////////////////////
global proc shr_exportFbx_setFbxExportSettings()
{
    //FBX 出力設定をリセット
    FBXResetExport;

    // アニメーション出力オフ
    FBXProperty Export|IncludeGrp|Animation -v false;

    // オーディオ出力オフ
    FBXProperty Export|IncludeGrp|Audio -v false;

    // カメラ出力オフ
    FBXExportCameras -v false;

    // ライト出力オフ
    FBXExportLights -v false;

    // スムージンググループ
    FBXExportSmoothingGroups -v true;
}

///////////////////////////////////////
// FBX 出力
///////////////////////////////////////
global proc int[] shr_exportFbx_exportFbx(string $exportFolderPath, string $targetNodes[])
{
     // 出力結果
    int $exportResults[];

    string $elm;

    if(endsWith($exportFolderPath, "/") == false)
    {
        $exportFolderPath = $exportFolderPath + "/";
    }

    // フォルダがなければ作成
    if (`filetest -d $exportFolderPath` == 0)
    {
        sysFile -md $exportFolderPath;
    }

    int $isCanceled;

    // FBX 出力
    for($elm in $targetNodes)
    {
        select -r $elm;

        string $fileName = shr_exportFbx_getStaticMeshNames($elm) + ".fbx";

        // 出力FBXパス
        string $exportFilePath = $exportFolderPath + $fileName;

        if($isCanceled == false)
        {
            // perforce チェック
            $result = `shr_exportFbx_confirmChackout($exportFilePath)`;

            // 出力
            if($result == 1)
            {
                // NOTE: 一旦封印 2022/10/19
                // コリジョンメッシュノードのリネーム
                // shr_collisionUtils_renameAllCollisionNodes($elm);

                // 選択オブジェクトを出力
                FBXExport -f  $exportFilePath -s;

                print ("// Export:  \"" + $exportFilePath + "\" //\n");
            }
            // キャンセル
            else if($result == 3)
            {
                $isCanceled = true;
            }

            $exportResults[`size($exportResults)`] = $result;
        }
        // キャンセル
        else
        {
            $exportResults[`size($exportResults)`] = 3;
        }

    }

    return $exportResults;
}

///////////////////////////////////////
// UE5 FBX インポート
///////////////////////////////////////
global proc int[] shr_exportFbx_importFbxInUE5(string $assetNames[], int $exportResults[])
{
    // UE5 マテリアル作成・アサインをするかどうか
    int $createMaterials = `optionVar -q "ov_createMaterials_shr_exportFbx"`;

    // マテリアルが既に存在する場合、再アサイン処理を行うかどうか
    int $reassignMaterials = (`optionVar -q "ov_reassignMaterial_shr_exportFbx"` == 2);

    int $importResults[];

    // UE5 が起動していない場合
    if(shr_ueRemoteClient_isUE5Running() == false)
    {
        confirmDialog -t "確認" -m "UE5 が起動していません。\n\nインポートをスキップします。"-b "確認";

        return $importResults;
    }

    // ShenronProto プロジェクトじゃない場合
    if(shr_ueRemoteClient_isValidProject() == false)
    {
        string $dialog_result =
        `confirmDialog
            -title "確認"
            -message "現在UE5 で開いているプロジェクトが 'ShenronProto' ではありません。\n\nUE5 プロジェクトへのインポートを実行しますか？"
            -button "実行"
            -button "キャンセル"
            -defaultButton "キャンセル"
            -cancelButton "キャンセル"
            -dismissString "キャンセル"`
            ;

        // キャンセルボタン
        if ($dialog_result == "キャンセル")
        {
            return $importResults;
        }
    }

    // メインプログレスバー
    global string $gMainProgressBar;

    // プログレスバー
    progressBar -e -bp -max `size($assetNames)` -st "" -isInterruptable false $gMainProgressBar;

    string $assetName;

    int $index;

    int $isCanceled;

    for($assetName in $assetNames)
    {
        // アセット名からスタティックメッシュ名を取得
        string $staticMeshName = shr_exportFbx_getStaticMeshNames($assetName);

        progressBar -e -pr ($index + 1) -st ("UE5 にインポート中: " + $staticMeshName) $gMainProgressBar;

        int $success;

        // FBX エクスポートが失敗、スキップ、キャンセルの場合はFBX インポートを行わない
        if($exportResults[$index] != 1)
        {
            $importResults[$index] = $exportResults[$index];
        }
        // インポートをキャンセルした場合
        else if($isCanceled)
        {
            $importResults[$index] = 3;
        }
        else
        {
            string $parentMaterialName = `optionMenu -q -v uOm_parentMaterial_shr_exportFbx`;

            // fbx パス、UE5 パスを取得
            python("import sys");
            python("import os");
            python("sys.path.append('C:/cygames/shrdev/shr/tools/in/ext/unrealengine/5.1/python')");
            python("from shr_ue_utils.asset import AssetNameUtils");
            python("asset_name_utils = AssetNameUtils('" + $staticMeshName + "')");
            string $job_name = python("asset_name_utils.fbx_import_template_name");
            string $fbx_path = python("asset_name_utils.asset_file_source_path");
            string $ue_path = python("os.path.dirname(asset_name_utils.asset_file_game_path)");
            string $asset_category = python("asset_name_utils.asset_category");

            if(`optionVar -q "ov_enableNanite_shr_exportFbx"`)
            {
                $job_name = "static_mesh_env_asset_nanite";
            }

            // jon_info を設定
            string $job_info_list[];
            $job_info_list = shr_ueRemoteClient_appendStrValueToJobInfoList($job_info_list, "job_name", $job_name);
            $job_info_list = shr_ueRemoteClient_appendStrValueToJobInfoList($job_info_list, "fbx_path", $fbx_path);
            $job_info_list = shr_ueRemoteClient_appendStrValueToJobInfoList($job_info_list, "ue_path", $ue_path);
            $job_info_list = shr_ueRemoteClient_appendIntValueToJobInfoList($job_info_list, "create_materials", $createMaterials);
            $job_info_list = shr_ueRemoteClient_appendIntValueToJobInfoList($job_info_list, "reassign_materials", $reassignMaterials);
            $job_info_list = shr_ueRemoteClient_appendStrValueToJobInfoList($job_info_list, "parent_material_name", $parentMaterialName);
            $job_info_list = shr_ueRemoteClient_appendStrValueToJobInfoList($job_info_list, "asset_name", $staticMeshName);

            // UE5 にインポート（リモート）
            string $remote_result[] = shr_ueRemoteClient_runFile("import_asset", $job_info_list, 0);

            // UE5 インポートの成否
            $importResults[$index] = shr_ueRemoteClient_isSuccess($remote_result);

            // インポート失敗なら次へ
            if($importResults[$index] == false)
            {
                $index += 1;

                continue;
            }

            // コレクションに登録する場合
            if(`optionVar -q "ov_addToCollections_shr_exportFbx"`)
            {
                // アセットのゲームパス
                string $asset_path = python("asset_name_utils.asset_file_game_path");

                // 登録先コレクションを取得
                string $selected_collections[] = `textScrollList -q -si uTsl_collections_shr_exportFbx`;

                if(`size($selected_collections)` != 0)
                {
                    // 現在のコレクションの状態を取得
                    string $current_collections[] = shr_exportFbx_getCollectionsContainingAsset($asset_path);

                    // 文字列配列をインターセクト（選択コレクションと現在のコレクションの共通部分を取得）
                    string $intersector = `stringArrayIntersector`;
                    stringArrayIntersector -edit -intersect $selected_collections $intersector;
                    stringArrayIntersector -edit -intersect $current_collections $intersector;
                    string $intersected_collections[] = `stringArrayIntersector -q $intersector`;

                    // インターセクターをリセット
                    stringArrayIntersector -edit -reset $intersector;
                    deleteUI $intersector;

                    // コレクションに変化がある場合
                    if(`size($selected_collections)` != `size($intersected_collections)` || `size($current_collections)` != `size($intersected_collections)`)
                    {
                        // コレクション設定を変更しないフラグ
                        int $doNotChangeCollections = 0;

                        if(`size($current_collections)` != 0)
                        {
                            string $message = $assetName + " のコレクション登録を変更しますか？\n\n";
                            $message += "■ 現在登録されているコレクション\n    ";
                            $message += stringArrayToString($current_collections, "\n    ");
                            $message += "\n\n■ 新しく登録されるコレクション\n    ";
                            $message += stringArrayToString($selected_collections, "\n    ");

                            // 確認ダイアログ
                            string $dialog_result =
                            `confirmDialog
                                -title "確認"
                                -message $message
                                -button "変更する"
                                -button "変更しない"
                                -button "キャンセル"
                                -defaultButton "キャンセル"
                                -cancelButton "キャンセル"
                                -dismissString "キャンセル"`
                                ;

                            // キャンセルボタン
                            if ($dialog_result == "キャンセル")
                            {
                                $importResults[$index] = 3;

                                $isCanceled = true;

                                $index += 1;

                                continue;
                            }
                            else if ($dialog_result == "変更しない")
                            {
                                $doNotChangeCollections = 1;
                            }
                        }

                        // コレクション設定を変更する場合
                        if($doNotChangeCollections == 0)
                        {
                            // 追加するコレクションを取得
                            string $collections_to_add[] = stringArrayRemove($intersected_collections, $selected_collections);

                            // 削除するコレクションを取得
                            string $collections_to_remove[] = stringArrayRemove($intersected_collections, $current_collections);

                            if(`size($collections_to_add)` != 0)
                            {
                                // コレクションに追加
                                $importResults[$index] = shr_exportFbx_addAssetToCollections($asset_path, $collections_to_add);

                                // 失敗なら次へ
                                if($importResults[$index] == false)
                                {
                                    $index += 1;

                                    continue;
                                }
                            }

                            if(`size($collections_to_remove)` != 0)
                            {
                                // コレクションから削除
                                $importResults[$index] = shr_exportFbx_removeAssetFromCollections($asset_path, $collections_to_remove);

                                // 失敗なら次へ
                                if($importResults[$index] == false)
                                {
                                    $index += 1;

                                    continue;
                                }
                            }

                            // ノードにコレクションアトリビュートを追加
                            shr_exportFbx_setCollectionAttr($assetName, $selected_collections);
                        }
                        // コレクション設定を変更しない場合
                        else
                        {
                            // ノードにコレクションアトリビュートを追加
                            shr_exportFbx_setCollectionAttr($assetName, $current_collections);
                        }
                    }
                    else
                    {
                        // ノードにコレクションアトリビュートを追加
                        shr_exportFbx_setCollectionAttr($assetName, $selected_collections);
                    }
                }
            }
        }

        $index += 1;
    }

    if($isCanceled == false)
    {
        // コレクションリストの選択状態を更新
        shr_exportFbx_updateCollectionListSelection();
    }

    progressBar -e -ep $gMainProgressBar;

    return $importResults;
}

///////////////////////////////////////
// ノードにコレクションアトリビュートを追加
///////////////////////////////////////
global proc shr_exportFbx_setCollectionAttr(string $node, string $collections[])
{
    // カスタムアトリビュートが無ければ作成
    if(`attributeExists "shr_collections" $node` == false)
    {
        addAttr -longName "shr_collections" -dataType stringArray $node;
    }
    // 存在すれば内容を比較
    else
    {
        string $current_values[] = `getAttr ($node + ".shr_collections")`;

        // 文字列配列をインターセクト
        string $intersector = `stringArrayIntersector`;
        stringArrayIntersector -edit -intersect $current_values $intersector;
        stringArrayIntersector -edit -intersect $collections $intersector;
        string $intersected_collections[] = `stringArrayIntersector -q $intersector`;

        // インターセクターをリセット
        stringArrayIntersector -edit -reset $intersector;
        deleteUI $intersector;

        // コレクションに変化がない場合はアトリビュートを変更しない
        if(`size($current_values)` == `size($intersected_collections)` && `size($collections)` == `size($intersected_collections)`)
        {
            return;
        }
    }

    string $cmd = "setAttr " + $node + ".shr_collections -type stringArray " + `size($collections)`;

    string $collection;

    for($collection in $collections)
    {
        $cmd += " \"" + $collection + "\"";
    }

    eval($cmd);
}

///////////////////////////////////////
// アセットをコレクションに追加
///////////////////////////////////////
global proc int shr_exportFbx_addAssetToCollections(string $asset_path, string $collections[])
{
    // jon_info を設定
    string $job_info_list[];
    $job_info_list = shr_ueRemoteClient_appendStrValueToJobInfoList($job_info_list, "asset_path", $asset_path);
    $job_info_list = shr_ueRemoteClient_appendStrArrayToJobInfoList($job_info_list, "collections", $collections);

    // リモート実行結果
    string $remote_result[] = shr_ueRemoteClient_runFile("add_asset_to_collections", $job_info_list, 0);

    // 成否
    return shr_ueRemoteClient_isSuccess($remote_result);
}

///////////////////////////////////////
// アセットをコレクションから削除
///////////////////////////////////////
global proc int shr_exportFbx_removeAssetFromCollections(string $asset_path, string $collections[])
{
    // jon_info を設定
    string $job_info_list[];
    $job_info_list = shr_ueRemoteClient_appendStrValueToJobInfoList($job_info_list, "asset_path", $asset_path);
    $job_info_list = shr_ueRemoteClient_appendStrArrayToJobInfoList($job_info_list, "collections", $collections);

    // リモート実行結果
    string $remote_result[] = shr_ueRemoteClient_runFile("remove_asset_from_collections", $job_info_list, 0);

    // 成否
    return shr_ueRemoteClient_isSuccess($remote_result);
}

///////////////////////////////////////
// アセットが含まれるコレクションを取得
///////////////////////////////////////
global proc string[] shr_exportFbx_getCollectionsContainingAsset(string $asset_path)
{
    // jon_info を設定
    string $job_info_list[];
    $job_info_list = shr_ueRemoteClient_appendStrValueToJobInfoList($job_info_list, "asset_path", $asset_path);

    // リモート実行結果
    string $remote_result[] = shr_ueRemoteClient_runFile("get_collections_containing_asset", $job_info_list, 0);

    // output 結果からコレクション名を取得
    string $collections[] = shr_exportFbx_getCollectionsFromOutputStr($remote_result[2]);

    return $collections;
}

///////////////////////////////////////
// 結果ダイアログ
///////////////////////////////////////
global proc shr_exportFbx_resultDialog(int $exportResults[], int $importResults[], string $exportFolderPath, string $selItems[])
{
    string $resultMark[];
    $resultMark[0] = "×";
    $resultMark[1] = "〇";
    $resultMark[2] = "×";
    $resultMark[3] = "×";

    string $exportResultString[];
    $exportResultString[0] = " : 失敗";
    $exportResultString[1] = "";
    $exportResultString[2] = " : スキップ";
    $exportResultString[3] = " : キャンセル";

    string $message = "出力結果\n\n";

    $message = $message + "■ 出力先フォルダ\n";
    $message = $message + "    " + $exportFolderPath + "\n\n";

    $message = $message + "■ 出力FBX 名";

    string $selItem;
    int $index;

    for($selItem in $selItems)
    {
        $message = $message + `format -s $resultMark[$exportResults[$index]] -s $selItem -s $exportResultString[$exportResults[$index]] "\n    ^1s  ^2s.fbx^3s"`;

        $index += 1;
    }

    $index = 0;

    if(`size($importResults)` != 0)
    {
        $message = $message + "\n\n■ UE5 インポート";

        for($selItem in $selItems)
        {
            string $staticMeshName = shr_exportFbx_getStaticMeshNames($selItem);

            $message = $message + `format -s $resultMark[$importResults[$index]] -s $staticMeshName -s $exportResultString[$importResults[$index]] "\n    ^1s  ^2s^3s"`;

            $index += 1;
        }
    }

    // ダイアログ表示
    confirmDialog -title "確認" -message $message -button "確認";
}

///////////////////////////////////////
// 対象アセットリスト取得
///////////////////////////////////////
global proc string[] shr_exportFbx_getAllTargetNodes(string $allNodes[])
{
    string $TargetNodes[];

    string $elm;

    for($elm in $allNodes)
    {
        // 正しいルートノード名の場合
        if(`shr_fixHierarchy_checkRootNodeName($elm)` == 1)
        {
            $TargetNodes[`size($TargetNodes)`] = $elm;
        }
    }

    return $TargetNodes;
}

///////////////////////////////////////
// チェックアウト確認ダイアログ
///////////////////////////////////////
global proc int shr_exportFbx_confirmChackout(string $path)
{
    // p4v ファイル情報取得
    string $fstat[] = `shr_p4Cmds_getFileStatusFlags($path)`;

    // print $fstat;

    // perforce 登録ファイルの場合
    if(`size($fstat)` != 0)
    {
        // コンフリクトしている場合
        if(stringArrayContains("CONFLICTED", $fstat))
        {
            string $message = $path + "\n\n コンフリクトしているため、FBX 出力できません。";

            string $result = `confirmDialog -t "Export FBX" -icn "warning" -m $message -b "スキップ" -b "キャンセル" -db "スキップ" -cb "キャンセル" -ds "キャンセル"`;

            if($result == "スキップ")
            {
                return 2;
            }
            else
            {
                return 3;
            }
        }

        // 他にチェックアウトしているユーザーがいる場合
        if(stringArrayContains("OTHER_OPENED", $fstat))
        {
            string $users[] = shr_p4Cmds_getOtherCheckoutUser($path);
            string $user;

            string $buttonLabel;

            string $message = $path + "\n\n他にチェックアウトしているユーザーがいます。";

            // チェックアウトしている場合
            if(stringArrayContains("CHECKED_OUT", $fstat))
            {
                $message = $message + "\n\nFBX 出力をしますか？";

                $buttonLabel = "FBX 出力";
            }
            // チェックアウトしていない場合
            else
            {
                $message = $message + "\n\nチェックアウトしてFBX 出力をしますか？";

                $buttonLabel = "チェックアウトしてFBX 出力";
            }

            $message = $message + "\n\n\n【 現在チェックアウトしているユーザー 】\n\n";

            for($user in $users)
            {
                $message = $message + $user + ", ";
            }

            string $result = `confirmDialog -t "Export FBX" -m $message -b $buttonLabel -b "スキップ" -b "キャンセル" -db $buttonLabel -cb "キャンセル" -ds "キャンセル"`;

            if($result == "FBX 出力")
            {
                return 1;
            }
            else if($result == "チェックアウトしてFBX 出力")
            {
                // チェックアウト
                shr_p4Cmds_checkout($path);

                return 1;
            }
            else if($result == "スキップ")
            {
                return 2;
            }
            else
            {
                return 3;
            }
        }

        // 最新リビジョンじゃない場合
        else if(stringArrayContains("UNCURRENT", $fstat))
        {
            // チェックアウトしている場合
            if(stringArrayContains("CHECKED_OUT", $fstat))
            {
                // リバートして最新リビジョンを取得してチェックアウトするか確認
                string $message = $path + "\n\n最新リビジョンではない状態でチェックアウトされています。\n\n最新リビジョンを取得してチェックアウトし直しますか？";

                string $result = `confirmDialog -t "Export FBX" -m $message -b "最新リビジョンを取得してチェックアウト" -b "このまま続行" -b "スキップ" -b "キャンセル" -db "最新リビジョンを取得してチェックアウト" -cb "キャンセル" -ds "キャンセル"`;

                if($result == "最新リビジョンを取得してチェックアウト")
                {
                    // リバート
                    shr_p4Cmds_revert($path);

                    // 最新リビジョンを取得
                    shr_p4Cmds_sync($path);

                    // チェックアウト
                    shr_p4Cmds_checkout($path);

                    return 1;
                }
                else if($result == "このまま続行")
                {
                    return 1;
                }
                else if($result == "スキップ")
                {
                    return 2;
                }
                else
                {
                    return 3;
                }
            }
            // チェックアウトしていない場合
            else
            {
                // 最新リビジョンを取得するか確認
                string $message = $path + "\n\n最新リビジョンではありません。\n\n最新リビジョンを取得してチェックアウトしますか？";

                string $result = `confirmDialog -t "Export FBX" -m $message -b "最新リビジョンを取得してチェックアウト" -b "このままチェックアウト" -b "スキップ" -b "キャンセル" -db "最新リビジョンを取得してチェックアウト" -cb "キャンセル" -ds "キャンセル"`;

                if($result == "最新リビジョンを取得してチェックアウト")
                {
                    // 最新リビジョンを取得
                    shr_p4Cmds_sync($path);

                    // チェックアウト
                    shr_p4Cmds_checkout($path);

                    return 1;
                }
                else if($result == "このままチェックアウト")
                {
                    // チェックアウト
                    shr_p4Cmds_checkout($path);

                    return 1;
                }
                else if($result == "スキップ")
                {
                    return 2;
                }
                else
                {
                    return 3;
                }
            }
        }
        // 最新リビジョンでチェックアウトしていない場合
        else if(stringArrayContains("REGISTERED", $fstat) && stringArrayContains("CHECKED_OUT", $fstat) == false)
        {
            // チェックアウトするか確認
            string $message = $path + "\n\nチェックアウトしますか？";

            string $result = `confirmDialog -t "Export FBX" -m $message -b "チェックアウトする" -b "スキップ" -b "キャンセル" -db "チェックアウトする" -cb "キャンセル" -ds "キャンセル"`;

            if($result == "チェックアウトする")
            {
                // チェックアウト
                shr_p4Cmds_checkout($path);

                return 1;
            }
            else if($result == "スキップ")
            {
                return 2;
            }
            else
            {
                return 3;
            }
        }

        return true;
    }

    return true;
}

//===============================================
// アセット名 からスタティックメッシュ名を取得
//===============================================
global proc string shr_exportFbx_getStaticMeshNames(string $assetName)
{
    return ("s_" + $assetName + "_");
}

//===============================================
// 出力先フォルダをエクスプローラで開く
//===============================================
global proc shr_exportFbx_openInExplorer()
{
    string $path = shr_exportFbx_getExportFolderPath();

    if($path == "")
    {
        confirmDialog -title "確認" -message "出力先フォルダが特定できません。" -button "確認";
    }
    else if(`filetest -d $path` == false)
    {
        confirmDialog -title "確認" -message "出力先フォルダが存在しません。" -button "確認";
    }
    else
    {
        system("explorer " + `substituteAllString $path "/" "\\"`);
    }
}

//===============================================
// 旧仕様の階層構造を修正
//===============================================
global proc shr_exportFbx_fixHierarchyMenuCallback()
{
    // リストで選択しているアセットを取得
    string $selItems[] = `textScrollList -q -si uTsl_shr_exportFbx`;

    if(`size($selItems)` == 0)
    {
        confirmDialog
            -title "確認"
            -icon "information"
            -message "リストでアセットを選択してから実行してください。"
            -button "確認";

        return;
    }

    // 階層構造チェック
    int $fix_hierarchy_result = `shr_fixHierarchy($selItems)`;

    if($fix_hierarchy_result == 0)
    {
        string $message;

        string $selItem;

        for($selItem in $selItems)
        {
            $message += $selItem + "\n";
        }

        $message += "\n修正が必要な内容はありません。";

        confirmDialog
            -title "確認"
            -icon "information"
            -message $message
            -button "確認";

        return;
    }
    else if($fix_hierarchy_result == 1)
    {
        shr_exportFbx_updateAssetList;
    }
}

//===============================================
// 選択アセットのコリジョン用メッシュノードをリネーム コールバック
//===============================================
global proc shr_exportFbx_renameAllCollisionNodesMenuCallback()
{
    //  リストで選択しているアセット名を取得
    string $selItems[] = `textScrollList -q -si uTsl_shr_exportFbx`;

    if(`size($selItems)` == 0)
    {
        confirmDialog
            -title "確認"
            -icon "information"
            -message "リストでアセットを選択してから実行してください。"
            -button "確認";

        return;
    }

    string $itemsRenamed[];
    string $itemsSkipped[];
    string $itemsErrored[];

    string $selItem;

    for($selItem in $selItems)
    {
        int $result = shr_collisionUtils_renameAllCollisionNodes($selItem);

        if($result == 1)
        {
            $itemsRenamed[`size($itemsRenamed)`] = $selItem;
        }
        else if($result == 0)
        {
            $itemsSkipped[`size($itemsSkipped)`] = $selItem;
        }
        else if($result == -1)
        {
            $itemsErrored[`size($itemsErrored)`] = $selItem;
        }
    }

    string $message = "処理結果";

    if(`size($itemsRenamed)` != 0)
    {
        $message += "\n\n■ リネーム完了しました\n    ";
        $message += stringArrayToString($itemsRenamed, "\n    ");
    }

    if(`size($itemsSkipped)` != 0)
    {
        $message += "\n\n■ リネームの必要がないためスキップしました\n    ";
        $message += stringArrayToString($itemsSkipped, "\n    ");
    }

    if(`size($itemsErrored)` != 0)
    {
        $message += "\n\n■ リネームできませんでした\n    ";
        $message += stringArrayToString($itemsErrored, "\n    ");
    }

    confirmDialog
        -title "確認"
        -icon "information"
        -message $message
        -button "確認";

    return;
}

// NOTE:
// shr_exportFbx_UI;
