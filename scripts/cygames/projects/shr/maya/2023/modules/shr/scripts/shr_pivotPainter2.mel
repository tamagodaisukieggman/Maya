//===============================================
//
// Pivot Painter 2 for Shenron
//
//===============================================

/////////////////////////////////////////////////
// UI 作成
/////////////////////////////////////////////////
global proc shr_pivotPainter2()
{
    source "shr_rebuildHdaOutputMeshes";
    source "shr_p4Cmds";
    source "shr_fixHierarchy";
    source "shr_ueRemoteClient";
    source "shr_bakeFoliagePivotToUV";

    // ツールログ送信
    shr_toolLog("Pivot Painter 2", "", "launched.");

    // Houdini 環境が有効か
    int $houdiniEngineEnabled = python("import shr.utils.hda_loader.houdini_util as houdini_util; houdini_util.main()");

    // Houdini Engine Preferences の Unset PYTHONPATH をTrue に
    // ライブラリの競合が発生を回避するため
    shr_pivotPainter2_checkUnsetPythonpathPreference();

    // メニュー作成
    menuBarLayout;

    menu -label "リスト";
        menuItem
            -label "リストを更新"
            -image "refresh.png"
            -enable on
            -c "shr_pivotPainter2_updateAssetList"
            ;

    menu -l "ヘルプ" -helpMenu on;
        menuItem
            -l "Pivot Painter 2 のヘルプ"
            -image "help.png"
            -c "showHelp -absolute \"https://wisdom.cygames.jp/pages/viewpage.action?pageId=530194726\""
            ;

     frameLayout -lv off -mw 4 -mh 4;

        rowLayout -nc 2;
            button
                -l "Bake Pivot Ex"
                -ann "ロックされた法線を維持したままBake Pivot を実行"
                -c "shr_bakePivotEx"
                ;

            button
                -l "Vegetation Normal Smooth"
                -c "shr_vegetationNormalSmooth"
                ;

            setParent ..;

        textScrollList
            -allowMultiSelection on
            -sc "shr_pivotPainter2_assetListSelectedCallback"
            -dcc "shr_pivotPainter2_assetListDoubleClickedCallback"
            TSL_shr_pivotPainter2_asset;

        columnLayout -adj on -cat "left" 8;

            checkBox
                -l "1枚のテクスチャにまとめる"
                -ann "複数アセットの場合、ひとつの_pip, _piv マップにまとめて出力します。"
                -en off
                -v `optionVar -q ov_mergeTextures_shr_pivotPainter2`
                -onc "optionVar -iv ov_mergeTextures_shr_pivotPainter2 true"
                -ofc "optionVar -iv ov_mergeTextures_shr_pivotPainter2 false"
                uCB_shr_pivotPainter2_mergeTextures;

            checkBox
                -l "テクスチャをUE5 にインポート"
                -ann "出力した_pip, _piv マップをUE5 にインポートします"
                -v `optionVar -q ov_importTextures_shr_pivotPainter2`
                -onc "optionVar -iv ov_importTextures_shr_pivotPainter2 true"
                -ofc "optionVar -iv ov_importTextures_shr_pivotPainter2 false"
                uCB_shr_pivotPainter2_importTexture;

        setParent ..;

        separator -st "in" SEP_shr_pivotPainter2;

        rowLayout -nc 2 -adj 1;

            button
                -l "Pivot Painter 2 データ作成"
                -bgc 0.5 0.6 0.5
                -c "shr_pivotPainter2_pivotPainter2ButtonClickedCallback"
                ;

            symbolButton
                -image "fileOpen.png"
                -ann "テクスチャ出力先フォルダをエクスプローラで開く"
                -c "shr_pivotPainter2_openInExplorer"
                ;

            setParent ..;

    // リストを更新
    shr_pivotPainter2_updateAssetList();

    // シーンオープン時にリストを更新
    scriptJob -event "SceneOpened" "shr_pivotPainter2_updateAssetList" -parent WSC_shr_pivotPainter2;
}

/////////////////////////////////////////////////
// アセットリストで選択しているアセットを取得
/////////////////////////////////////////////////
global proc string[] shr_pivotPainter2_getSelectedAssets()
{
    string $selAssets[] = `textScrollList -q -si TSL_shr_pivotPainter2_asset`;

    return $selAssets;
}

///////////////////////////////////////
// シーン内のvgt_ ノードを取得
///////////////////////////////////////
global proc string[] shr_pivotPainter2_getAllVgtNodes()
{
    // シーン内のルートノードを取得
    string $rootNodes[] = `ls "|*"`;

    string $vgtNodes[];

    string $elm;

    for($elm in $rootNodes)
    {
        if(startsWith($elm, "vgt_"))
        {
            // 正しいアセット名の場合
            if(`shr_fixHierarchy_checkRootNodeName($elm)` == 1)
            {
                $vgtNodes[`size($vgtNodes)`] = $elm;
            }
        }
    }

    return $vgtNodes;
}

///////////////////////////////////////
// アセットリストを更新
///////////////////////////////////////
global proc shr_pivotPainter2_updateAssetList()
{
    // アセットリストで選択しているアセットを取得
    string $selAssets[] = shr_pivotPainter2_getSelectedAssets();

    // アセットリストをクリア
    textScrollList -e -removeAll TSL_shr_pivotPainter2_asset;

    // vgt_ ノードを取得
    string $vgtNodes[] = shr_pivotPainter2_getAllVgtNodes();

    string $elm;

    // アセットリストに項目を追加
    for($elm in $vgtNodes)
    {
        textScrollList -e -a $elm TSL_shr_pivotPainter2_asset;
    }

    string $selAsset;

    // 選択していた項目があれば再選択
    for($selAsset in $selAssets)
    {
        if (stringArrayContains($selAsset, $vgtNodes))
        {
            textScrollList -e -si $selAsset TSL_shr_pivotPainter2_asset;
        }
    }
}

/////////////////////////////////////////////////
// アセットリストで項目を選択した時のコールバック
/////////////////////////////////////////////////
global proc shr_pivotPainter2_assetListSelectedCallback()
{
    setFocus SEP_shr_pivotPainter2;

    string $selAssets[] = shr_pivotPainter2_getSelectedAssets();

    int $numOfSelItems = `size($selAssets)`;

    if($numOfSelItems == 0)
    {
        select -cl;
    }
    else
    {
        select -r $selAssets;
    }

    // 複数アセット選択の場合はテクスチャマージのチェックボックスを有効に
    checkBox -e -en ($numOfSelItems >= 2) uCB_shr_pivotPainter2_mergeTextures;
}

/////////////////////////////////////////////////
// アセットリストで項目をダブルクリックした時のコールバック
/////////////////////////////////////////////////
global proc shr_pivotPainter2_assetListDoubleClickedCallback()
{
    string $allItems[] = `textScrollList -q -ai TSL_shr_pivotPainter2_asset`;

    string $item;

    for($item in $allItems)
    {
        textScrollList -e -si $item TSL_shr_pivotPainter2_asset;
    }

    shr_pivotPainter2_assetListSelectedCallback();
}

/////////////////////////////////////////////////
// Pivot Painter 2 ボタンを押したときのコールバック
/////////////////////////////////////////////////
global proc shr_pivotPainter2_pivotPainter2ButtonClickedCallback()
{
    // シーン名取得
    string $sceneName = `file -q -sceneName -shortName`;

    // ファイルがまだ一度も保存されていなければ終了
    if($sceneName == "")
    {
        confirmDialog
            -title "確認" -message "シーンがまだ保存されていません。" -button "確認";

        return;
    }

    // アセットリストで選択しているアセットを取得
    string $selAssets[] = shr_pivotPainter2_getSelectedAssets();

    if(`size($selAssets)` == 0)
    {
        confirmDialog -title "確認" -message "リストで項目を選択してから実行してください。" -button "確認";

        return;
    }

    // 出力パス
    string $textureFolderPath = `shr_pivotPainter2_getTextureFolderPath`;

    if($textureFolderPath == "")
    {
        confirmDialog -title "確認" -message "出力先フォルダが特定できません。" -button "確認";

        return;
    }

    // 出力確認ダイアログ
    if(shr_pivotPainter2_exportConfirmDialog($textureFolderPath, $selAssets) == false)
    {
        print "// テクスチャ出力をキャンセルしました。\n";
        return;
    }

    // 現在の選択を取得
    string $sel[] = `ls -sl`;

    // テクスチャ出力結果
    int $exportResults[];

    // 対象ノードを取得
    string $targetNodes[] = shr_pivotPainter2_getTargetNodes($selAssets);

    // テクスチャをマージするかどうか（複数選択かつチェックボックスがオンの場合）
    int $mergeTextures = (`size($targetNodes)` >= 2) && `checkBox -q -v uCB_shr_pivotPainter2_mergeTextures`;

    if($mergeTextures)
    {
        // 2次配列に出来ないので、改行挟んだ文字列にして後で配列に復元する
         string $targetNodesStr = stringArrayToString($targetNodes, "\n");

         $targetNodes = {$targetNodesStr};
    }

    // メインプログレスバー
    global string $gMainProgressBar;

    int $step = 3;
    int $progressMax;

    if($mergeTextures)
    {
        $progressMax = $step;
    }
    else
    {
        $progressMax = `size($selAssets)` * $step;
    }

    // プログレスバー
    progressBar -e -bp -max $progressMax -st "" -isInterruptable false $gMainProgressBar;

    int $progress;

    int $counter;

    string $targetNode;

    for($targetNode in $targetNodes)
    {
        string $inputNodes[] = stringToStringArray($targetNode, "\n");

        // 対象ノード以下のノードをユニークなベース名に
        $inputNodes = shr_pivotPainter2_renameToUniqueName($inputNodes);

        // 対象ノードが存在しない場合
        if(stringArrayContains("", $inputNodes))
        {
            intArrayInsertAtIndex(`size($exportResults)`, $exportResults, 0);
            intArrayInsertAtIndex(`size($exportResults)`, $exportResults, 0);

            $progress += $step;

            $counter += 1;

            continue;
        }

        // キャンセルの場合
        if(intArrayContains(3, $exportResults))
        {
            intArrayInsertAtIndex(`size($exportResults)`, $exportResults, 3);
            intArrayInsertAtIndex(`size($exportResults)`, $exportResults, 3);

            $progress += $step;

            $counter += 1;

            continue;
        }

        string $asset = $selAssets[$counter];

        progressBar -e -pr $progress -st ($asset + ": Houdini Asset 作成中...") $gMainProgressBar;
        $progress += 1;

        // ロケーター階層構造を作成
        string $createdLocators[] = shr_pivotPainter2_createLocatorHierarchy($inputNodes);

        // 不要UVset を削除
        shr_pivotPainter2_deleteGarbageUVsetPre($inputNodes);

        // hda ノード作成
        string $houdiniAssetNode = shr_pivotPainter2_createHoudiniAsset($inputNodes, $createdLocators);

        progressBar -e -pr $progress -st ($asset + ": テクスチャ出力中...") $gMainProgressBar;
        $progress += 1;

        // テクスチャを出力
        int $currentResults[] = shr_pivotPainter2_exportTextures($houdiniAssetNode, $asset);

        intArrayInsertAtIndex(`size($exportResults)`, $exportResults, $currentResults[0]);
        intArrayInsertAtIndex(`size($exportResults)`, $exportResults, $currentResults[1]);

        progressBar -e -pr $progress -st ($asset + ": ノード階層を再構築中...") $gMainProgressBar;
        $progress += 1;

        // HDA から出力されたメッシュをベイクし再構築する
        string $generatedNodes[] = shr_rebuildHdaOutputMeshes($houdiniAssetNode);

        // hda ノードを削除
        delete $houdiniAssetNode;

        // ロケーターを削除
        delete $createdLocators;

        $counter += 1;
    }

    progressBar -e -ep $gMainProgressBar;

    // UE5 テクスチャインポート結果
    int $importResults[];

    string $targetAssets[];

    if($mergeTextures)
    {
        $targetAssets = {$selAssets[0]};
    }
    else
    {
        $targetAssets = $selAssets;
    }

    // UE5 インポートアセットチェックボックスがオンの場合
    if(`optionVar -q "ov_importTextures_shr_pivotPainter2"`)
    {
        // UE5 にインポート
        $importResults = shr_pivotPainter2_importTexturesInUE5($targetAssets, $exportResults);
    }

    select -clear;

    string $i;

    // 選択を復元
    for($i in $sel)
    {
        if(`objExists $i`)
        {
            select -add $i;
        }
    }

    refresh;

    // 結果ダイアログ
    shr_pivotPainter2_resultDialog($exportResults, $importResults, $textureFolderPath, $targetAssets);
}

///////////////////////////////////////
// 不要UVset を削除 生成前
///////////////////////////////////////
global proc shr_pivotPainter2_deleteGarbageUVsetPre(string $inputNodes[])
{
    string $inputNode;

    for($inputNode in $inputNodes)
    {
        string $allDescendents[] = `listRelatives -ad -pa -type "transform" $inputNode`;

        stringArrayInsertAtIndex(0, $allDescendents, $inputNode);

        string $descendent;

        for($descendent in $allDescendents)
        {
            shr_bakeFoliagePivotToUV_deleteGarbageUVset($descendent);
        }
    }
}

///////////////////////////////////////
// 不要UVset を削除 生成後
///////////////////////////////////////
global proc shr_pivotPainter2_deleteGarbageUVsetPost(string $targetNodes[])
{
    string $validUvsets[] = {"map1", "uv2"};

    string $targetNode;

    for($targetNode in $targetNodes)
    {
        string $all_uv_sets[] = `polyUVSet -q -auv $targetNode`;

        string $uv_set;

        for($uv_set in $all_uv_sets)
        {
            if(stringArrayContains($uv_set, $validUvsets) == false)
            {
                polyUVSet -d -uvSet $uv_set $targetNode;
            }
        }
    }
}

///////////////////////////////////////
// UE5 テクスチャインポート
///////////////////////////////////////
global proc int[] shr_pivotPainter2_importTexturesInUE5(string $assetNames[], int $exportResults[])
{
    int $importResults[];

    // UE5 が起動していない場合
    if(shr_ueRemoteClient_isUE5Running() == false)
    {
        confirmDialog -t "確認" -m "UE5 が起動していません。\n\nインポートをスキップします。"-b "確認";

        return $importResults;
    }

    // ShenronProto プロジェクトじゃない場合
    if(shr_ueRemoteClient_isValidProject() == false)
    {
        string $dialog_result =
        `confirmDialog
            -title "確認"
            -message "現在UE5 で開いているプロジェクトが 'ShenronProto' ではありません。\n\nUE5 プロジェクトへのインポートを実行しますか？"
            -button "実行"
            -button "キャンセル"
            -defaultButton "キャンセル"
            -cancelButton "キャンセル"
            -dismissString "キャンセル"`
            ;

        // キャンセルボタン
        if ($dialog_result == "キャンセル")
        {
            return $importResults;
        }
    }

    // メインプログレスバー
    global string $gMainProgressBar;

    // プログレスバー
    progressBar -e -bp -max (`size($assetNames)` * 2) -st "" -isInterruptable false $gMainProgressBar;

    string $assetName;

    int $index;

    for($assetName in $assetNames)
    {
        // アセット名からテクスチャ名を取得
        string $textureNames[] = shr_pivotPainter2_getTextureNames($assetName);

        string $textureName;

        for($textureName in $textureNames)
        {
            string $textureBasename = basenameEx($textureName);

            progressBar -e -pr ($index + 1) -st ("UE5 にインポート中: " + $textureBasename) $gMainProgressBar;

            int $success;

            // テクスチャエクスポートが失敗、スキップ、キャンセルの場合はテクスチャインポートを行わない
            if($exportResults[$index] != 1)
            {
                $importResults[$index] = $exportResults[$index];
            }
            else
            {
                // テクスチャパス、UE5 パスを取得
                python("import sys");
                python("import os");
                python("sys.path.append('C:/cygames/shrdev/shr/tools/in/ext/unrealengine/5.1/python')");
                python("from shr_ue_utils.asset import AssetNameUtils");
                python("asset_name_utils = AssetNameUtils('" + $textureBasename + "')");

                string $texturePath = shr_pivotPainter2_getTexturePath($textureName);
                string $uePath = python("os.path.dirname(asset_name_utils.asset_file_game_path)");

                // jon_info を設定
                string $jobInfoList[];
                $jobInfoList = shr_ueRemoteClient_appendStrValueToJobInfoList($jobInfoList, "tga_path", $texturePath);
                $jobInfoList = shr_ueRemoteClient_appendStrValueToJobInfoList($jobInfoList, "ue_path", $uePath);

                // UE5 にインポート（リモート）
                string $remoteResult[] = shr_ueRemoteClient_runFile("import_texture", $jobInfoList, 0);

                // UE5 インポートの成否
                $importResults[$index] = shr_ueRemoteClient_isSuccess($remoteResult);

                // インポート失敗なら次へ
                if($importResults[$index] == false)
                {
                    $index += 1;

                    continue;
                }
            }

            $index += 1;
        }
    }

    progressBar -e -ep $gMainProgressBar;

    return $importResults;
}

///////////////////////////////////////
//  出力確認ダイアログ
///////////////////////////////////////
global proc int shr_pivotPainter2_exportConfirmDialog(string $exportFolderPath, string $selAssets[])
{
    string $message = "テクスチャを出力します。よろしいですか？\n\n";

    $message = $message + "■ 出力先フォルダ\n";
    $message = $message + "    " + $exportFolderPath + "\n\n";

    $message = $message + "■ 出力テクスチャ名";

    string $asset;

    for($asset in $selAssets)
    {
        string $textureNames[] = shr_pivotPainter2_getTextureNames($asset);

        $message = $message + "\n    " + $textureNames[0];
        $message = $message + "\n    " + $textureNames[1];

        // 1枚のテクスチャにまとめる場合
        if(`checkBox -q -v uCB_shr_pivotPainter2_mergeTextures`)
        {
            break;
        }
    }

    string $result =
    `confirmDialog
        -title "確認"
        -message $message
        -button "実行"
        -button "キャンセル"
        -defaultButton "実行"
        -cancelButton "キャンセル"
        -dismissString "キャンセル"`
        ;

    // キャンセルボタン
    if ($result == "キャンセル")
    {
        return false;
    }

    return true;
}

///////////////////////////////////////
// 結果ダイアログ
///////////////////////////////////////
global proc shr_pivotPainter2_resultDialog(int $exportResults[], int $importResults[], string $exportFolderPath, string $selAssets[])
{
    string $resultMark[];
    $resultMark[0] = "×";
    $resultMark[1] = "〇";
    $resultMark[2] = "×";
    $resultMark[3] = "×";

    string $exportResultString[];
    $exportResultString[0] = " : 失敗";
    $exportResultString[1] = "";
    $exportResultString[2] = " : スキップ";
    $exportResultString[3] = " : キャンセル";

    string $message = "出力結果\n\n";

    $message = $message + "■ 出力先フォルダ\n";
    $message = $message + "    " + $exportFolderPath + "\n\n";

    $message = $message + "■ 出力テクスチャ名";

    string $selItem;
    int $index;

    for($asset in $selAssets)
    {
        string $textureNames[] = shr_pivotPainter2_getTextureNames($asset);

        $message = $message + `format -s $resultMark[$exportResults[$index * 2]] -s $textureNames[0] -s $exportResultString[$exportResults[$index * 2]] "\n    ^1s  ^2s^3s"`;
        $message = $message + `format -s $resultMark[$exportResults[$index * 2 + 1]] -s $textureNames[1] -s $exportResultString[$exportResults[$index * 2 + 1]] "\n    ^1s  ^2s^3s"`;

        $index += 1;
    }

    $index = 0;

    if(`size($importResults)` != 0)
    {
        $message = $message + "\n\n■ UE5 インポート";

        for($asset in $selAssets)
        {
            string $textureNames[] = shr_pivotPainter2_getTextureNames($asset);

            $message = $message + `format -s $resultMark[$importResults[$index * 2]] -s (basenameEx($textureNames[0])) -s $exportResultString[$importResults[$index * 2]] "\n    ^1s  ^2s^3s"`;
            $message = $message + `format -s $resultMark[$importResults[$index * 2 + 1]] -s (basenameEx($textureNames[1])) -s $exportResultString[$importResults[$index * 2 + 1]] "\n    ^1s  ^2s^3s"`;

            $index += 1;
        }
    }

    // ダイアログ表示
    confirmDialog -title "確認" -message $message -button "確認";
}

///////////////////////////////////////
// Houdini Asset Node を作成
///////////////////////////////////////
global proc string shr_pivotPainter2_createHoudiniAsset(string $meshInputNodes[], string $locatorInputNodes[])
{
    // hda ノード作成
    string $houdiniAssetNode = houdiniEngine_loadAsset("C:/cygames/shrdev/shr/tools/in/ext/maya/share/hda/shr_pivot_painter.hda", "Sop/shr_pivot_painter");

    setAttr ($houdiniAssetNode + ".syncWhenInputConnects") false;

    // 出力メッシュをグループで分割
    setAttr ($houdiniAssetNode + ".splitGeosByGroup") true;
    setAttr ($houdiniAssetNode + ".outputGeometryGroups") false;

    // Mesh インプットとLocator インプットに入力
    houdiniEngine_setAssetInput(($houdiniAssetNode + ".input[0].inputNodeId"), $meshInputNodes);
    houdiniEngine_setAssetInput(($houdiniAssetNode + ".input[1].inputNodeId"), $locatorInputNodes);

    // Sync Asset
    houdiniEngine_syncAssetOutput $houdiniAssetNode;

    // ファイル出力先フォルダを指定
    string $output_folder = shr_pivotPainter2_getTempFolderPath();
    setAttr -type "string" ($houdiniAssetNode + ".houdiniAssetParm.houdiniAssetParm_outputdir") $output_folder;

    return $houdiniAssetNode;
}

///////////////////////////////////////
// テクスチャを出力
///////////////////////////////////////
global proc int[] shr_pivotPainter2_exportTextures(string $houdiniAssetNode, string $assetName)
{
    int $exportResults[];

    // FBX とテクスチャを一時フォルダに出力
    setAttr ($houdiniAssetNode + ".houdiniAssetParm.houdiniAssetParm_execute__button") true;

    refresh;

    // 一時ファイルパス
    string $tempFolderPath = shr_pivotPainter2_getTempFolderPath();
    string $tempPipTexturePath = $tempFolderPath + "/temp_RGB_PivotPos_A_ParentIndexInt_UV2.exr";
    string $tempPivTexturePath = $tempFolderPath + "/temp_RGB_XVector_A_XExtentDividedbyRange_UV2.tga";

    // テクスチャ名
    string $textureNames[] = shr_pivotPainter2_getTextureNames($assetName);

    // アセットのテクスチャパス
    string $textureFolderPath = shr_pivotPainter2_getTextureFolderPath();
    string $pipTexturePath = shr_pivotPainter2_getTexturePath($textureNames[0]);
    string $pivTexturePath = shr_pivotPainter2_getTexturePath($textureNames[1]);

    // アセットのtexture フォルダがなければ作成
    if(`filetest -d $textureFolderPath` == false)
    {
        sysFile -md $textureFolderPath;
    }

    int $isCanceled;

    // テクスチャファイルを移動
    if(`filetest -f $tempPipTexturePath`)
    {
        // perforce チェック処理
        string $result = `shr_pivotPainter2_confirmChackout($pipTexturePath)`;

        if($result == 1)
        {
            sysFile -rename $pipTexturePath $tempPipTexturePath;
        }
        // キャンセル
        else if($result == 3)
        {
            $isCanceled = true;
        }

        $exportResults[0] = $result;
    }

    if($isCanceled)
    {
        $exportResults[1] = 3;
    }
    else
    {
        if(`filetest -f $tempPivTexturePath`)
        {
            // perforce チェック処理
            string $result = `shr_pivotPainter2_confirmChackout($pivTexturePath)`;

            if($result == 1)
            {
                sysFile -rename $pivTexturePath $tempPivTexturePath;
            }

            $exportResults[1] = $result;
        }
    }

    return $exportResults;
}

///////////////////////////////////////
// チェックアウト確認ダイアログ
///////////////////////////////////////
global proc int shr_pivotPainter2_confirmChackout(string $path)
{
    // p4v ファイル情報取得
    string $fstat[] = `shr_p4Cmds_getFileStatusFlags($path)`;

    // print $fstat;

    // perforce 登録ファイルの場合
    if(`size($fstat)` != 0)
    {
        // コンフリクトしている場合
        if(stringArrayContains("CONFLICTED", $fstat))
        {
            string $message = $path + "\n\n コンフリクトしているため、テクスチャ出力できません。";

            string $result = `confirmDialog -t "Pivot Painter 2" -icn "warning" -m $message -b "スキップ" -b "キャンセル" -db "スキップ" -cb "キャンセル" -ds "キャンセル"`;

            if($result == "スキップ")
            {
                return 2;
            }
            else
            {
                return 3;
            }
        }

        // 他にチェックアウトしているユーザーがいる場合
        if(stringArrayContains("OTHER_OPENED", $fstat))
        {
            string $users[] = shr_p4Cmds_getOtherCheckoutUser($path);
            string $user;

            string $buttonLabel;

            string $message = $path + "\n\n他にチェックアウトしているユーザーがいます。";

            // チェックアウトしている場合
            if(stringArrayContains("CHECKED_OUT", $fstat))
            {
                $message = $message + "\n\nテクスチャ出力を行いますか？";

                $buttonLabel = "テクスチャ出力";
            }
            // チェックアウトしていない場合
            else
            {
                $message = $message + "\n\nチェックアウトしてテクスチャ出力を行いますか？";

                $buttonLabel = "チェックアウトしてテクスチャ出力";
            }

            $message = $message + "\n\n\n【 現在チェックアウトしているユーザー 】\n\n";

            for($user in $users)
            {
                $message = $message + $user + ", ";
            }

            string $result = `confirmDialog -t "Pivot Painter 2" -m $message -b $buttonLabel -b "スキップ" -b "キャンセル" -db $buttonLabel -cb "キャンセル" -ds "キャンセル"`;

            if($result == "テクスチャ出力")
            {
                return 1;
            }
            else if($result == "チェックアウトしてテクスチャ出力")
            {
                // チェックアウト
                shr_p4Cmds_checkout($path);

                return 1;
            }
            else if($result == "スキップ")
            {
                return 2;
            }
            else
            {
                return 3;
            }
        }

        // 最新リビジョンじゃない場合
        else if(stringArrayContains("UNCURRENT", $fstat))
        {
            // チェックアウトしている場合
            if(stringArrayContains("CHECKED_OUT", $fstat))
            {
                // リバートして最新リビジョンを取得してチェックアウトするか確認
                string $message = $path + "\n\n最新リビジョンではない状態でチェックアウトされています。\n\n最新リビジョンを取得してチェックアウトし直しますか？";

                string $result = `confirmDialog -t "Pivot Painter 2" -m $message -b "最新リビジョンを取得してチェックアウト" -b "このまま続行" -b "スキップ" -b "キャンセル" -db "最新リビジョンを取得してチェックアウト" -cb "キャンセル" -ds "キャンセル"`;

                if($result == "最新リビジョンを取得してチェックアウト")
                {
                    // リバート
                    shr_p4Cmds_revert($path);

                    // 最新リビジョンを取得
                    shr_p4Cmds_sync($path);

                    // チェックアウト
                    shr_p4Cmds_checkout($path);

                    return 1;
                }
                else if($result == "このまま続行")
                {
                    return 1;
                }
                else if($result == "スキップ")
                {
                    return 2;
                }
                else
                {
                    return 3;
                }
            }
            // チェックアウトしていない場合
            else
            {
                // 最新リビジョンを取得するか確認
                string $message = $path + "\n\n最新リビジョンではありません。\n\n最新リビジョンを取得してチェックアウトしますか？";

                string $result = `confirmDialog -t "Pivot Painter 2" -m $message -b "最新リビジョンを取得してチェックアウト" -b "このままチェックアウト" -b "スキップ" -b "キャンセル" -db "最新リビジョンを取得してチェックアウト" -cb "キャンセル" -ds "キャンセル"`;

                if($result == "最新リビジョンを取得してチェックアウト")
                {
                    // 最新リビジョンを取得
                    shr_p4Cmds_sync($path);

                    // チェックアウト
                    shr_p4Cmds_checkout($path);

                    return 1;
                }
                else if($result == "このままチェックアウト")
                {
                    // チェックアウト
                    shr_p4Cmds_checkout($path);

                    return 1;
                }
                else if($result == "スキップ")
                {
                    return 2;
                }
                else
                {
                    return 3;
                }
            }
        }
        // 最新リビジョンでチェックアウトしていない場合
        else if(stringArrayContains("REGISTERED", $fstat) && stringArrayContains("CHECKED_OUT", $fstat) == false)
        {
            // チェックアウトするか確認
            string $message = $path + "\n\nチェックアウトしますか？";

            string $result = `confirmDialog -t "Pivot Painter 2" -m $message -b "チェックアウトする" -b "スキップ" -b "キャンセル" -db "チェックアウトする" -cb "キャンセル" -ds "キャンセル"`;

            if($result == "チェックアウトする")
            {
                // チェックアウト
                shr_p4Cmds_checkout($path);

                return 1;
            }
            else if($result == "スキップ")
            {
                return 2;
            }
            else
            {
                return 3;
            }
        }

        return true;
    }

    return true;
}

///////////////////////////////////////
// 一時フォルダパスを取得
///////////////////////////////////////
global proc string shr_pivotPainter2_getTempFolderPath()
{
    return `getenv "temp"` + "/shr_pivotPainter2";
}

///////////////////////////////////////
// texture フォルダパスを取得
///////////////////////////////////////
global proc string shr_pivotPainter2_getTextureFolderPath()
{
    // シーンファイルパス
    string $sceneFilePath = `file -q -sceneName`;

    // texture パス設定
    string $textureFolderPath = substituteAllString($sceneFilePath, "work/maya", "texture");
    $textureFolderPath = dirname($textureFolderPath);

    return $textureFolderPath;
}

///////////////////////////////////////
// テクスチャ名を取得
///////////////////////////////////////
global proc string[] shr_pivotPainter2_getTextureNames(string $assetName)
{
    string $textureNames[] = {
        "t_" + $assetName + "_pip.exr",
        "t_" + $assetName + "_piv.tga"
    };

    return $textureNames;
}

///////////////////////////////////////
// テクスチャパスを取得
///////////////////////////////////////
global proc string shr_pivotPainter2_getTexturePath(string $textureName)
{
    // アセットのテクスチャパス
    string $textureFolderPath = shr_pivotPainter2_getTextureFolderPath();
    string $texturePath = $textureFolderPath + "/" + $textureName;

    return $texturePath;
}

/////////////////////////////////////////////////
// 対象ノードを取得
/////////////////////////////////////////////////
global proc string[] shr_pivotPainter2_getTargetNodes(string $assets[])
{
    string $targetNodes[];

    string $asset;

    for($asset in $assets)
    {
        string $lod0Node = $asset + "|mesh|lod0";

        string $targetNodesStr = "";

        if(`objExists $lod0Node`)
        {
            string $childNodes[] = `listRelatives -type "transform" -f $lod0Node`;

            // 2次配列に出来ないので、改行挟んだ文字列にして後で配列に復元する
            $targetNodesStr = stringArrayToString($childNodes, "\n");
        }

        $targetNodes[`size($targetNodes)`] = $targetNodesStr;
    }

    return $targetNodes;
}

/////////////////////////////////////////////////
// 対象ノード以下のノードをユニーク名にリネーム
/////////////////////////////////////////////////
global proc string[] shr_pivotPainter2_renameToUniqueName(string $inputNodes[])
{
    string $result[];

    int $arraySize = `size($inputNodes)`;

    int $i;

    for($i = $arraySize - 1; $i >= 0; $i--)
    {
        string $inputNode = $inputNodes[$i];

        // ユニークネームじゃなければリネーム
        if(`shr_pivotPainter2_isUniqueBaseName($inputNodes[$i])` == false)
        {
            string $basename = shr_rebuildHdaOutputMeshes_getNodeBasename($inputNodes[$i]);

            string $newName = `rename $inputNodes[$i] ($basename + "_#")`;

            print ("// Renamed: " + $inputNodes[$i] + " -> " + longNameOf($newName) + "\n");

            $inputNodes[$i] = longNameOf($newName);
        }

        string $childNodes[] = `listRelatives -type "transform" -f $inputNodes[$i]`;

        // 再帰呼び出し
        shr_pivotPainter2_renameToUniqueName($childNodes);
    }

    return $inputNodes;
}

/////////////////////////////////////////////////
// ユニーク名なベース名かどうか
/////////////////////////////////////////////////
global proc int shr_pivotPainter2_isUniqueBaseName(string $nodeName)
{
    string $basename = shr_rebuildHdaOutputMeshes_getNodeBasename($nodeName);

    string $lsResult[] = `ls -tr $basename`;

    if(`size($lsResult)` == 1)
    {
        return true;
    }

    return false;
}

/////////////////////////////////////////////////
// ロケータ作成
/////////////////////////////////////////////////
global proc string shr_pivotPainter2_createLocator(string $targetNode, string $parentNode)
{
    // 対応するメッシュノードの移動値と回転値を取得
    float $translation[] = `xform -q -t -ws $targetNode`;
    float $rotation[] = `xform -q -ro -ws $targetNode`;

    string $locatorName = shr_rebuildHdaOutputMeshes_getNodeBasename($targetNode);

    // 既に存在すれば削除
    if(`objExists("|" + $locatorName)`)
    {
        delete ("|" + $locatorName);
    }

    // ロケーターを作成
    string $temp[] = `spaceLocator -name $locatorName`;
    string $createdLocator = $temp[0];
    xform -ws -t $translation[0] $translation[1] $translation[2] -ro $rotation[0] $rotation[1] $rotation[2] $createdLocator;

    // 親ノードを指定していれば親子付け
    if($parentNode != "")
    {
        $temp = `parent $createdLocator $parentNode`;
        $createdLocator = longNameOf($temp[0]);
    }

    // 対応するメッシュノードの子ノードを取得
    string $childNodes[] = `listRelatives -f -type "transform" $targetNode`;

    string $childNode;

    // 子ノードが存在すれば再帰でロケーター作成
    for($childNode in $childNodes)
    {
        shr_pivotPainter2_createLocator($childNode, $createdLocator);
    }

    return $createdLocator;
}

/////////////////////////////////////////////////
// ロケータ階層構造作成
/////////////////////////////////////////////////
global proc string[] shr_pivotPainter2_createLocatorHierarchy(string $inputNodes[])
{
    string $createdLocators[];

    string $inputNode;

    for($inputNode in $inputNodes)
    {
        string $createdLocator = shr_pivotPainter2_createLocator($inputNode, "");

        $createdLocators[`size($createdLocators)`] = $createdLocator;
    }

    return $createdLocators;
}

/////////////////////////////////////////////////
// Houdini Engine のUnset PYTHONPATH 設定をチェック
/////////////////////////////////////////////////
global proc shr_pivotPainter2_checkUnsetPythonpathPreference()
{
    // Houdini Engine Preferecnes の Unset PYTHONPATH の状態を取得
    int $state = `optionVar -q "houdiniEngineUnsetPP"`;

    if($state)
    {
        return;
    }

    // Houdini Engine Preferecnes の Unset PYTHONPATH をtrue に
    optionVar -intValue "houdiniEngineUnsetPP" true;

    // 変更を反映させるためにプラグインをリロード
    if (`pluginInfo -q -loaded houdiniEngine`)
    {
        int $engineInUse = !`pluginInfo -q -unloadOk houdiniEngine`;

        if ($engineInUse)
        {
            // Maya の再起動を促す
            confirmDialog
                -title "Houdini Engine Preferences"
                -icon "information"
                -message "Houdini Engine for Maya の設定を変更しました。\n\n変更を反映するためにMaya を再起動してください。"
                -button "OK";
        }
        else
        {
            unloadPlugin("houdiniEngine");
            loadPlugin("houdiniEngine");
        }
    }
}

//===============================================
// 出力先フォルダをエクスプローラで開く
//===============================================
global proc shr_pivotPainter2_openInExplorer()
{
    string $path = shr_pivotPainter2_getTextureFolderPath();

    if($path == "")
    {
        confirmDialog -title "確認" -message "出力先フォルダが特定できません。" -button "確認";
    }
    else if(`filetest -d $path` == false)
    {
        confirmDialog -title "確認" -message "出力先フォルダが存在しません。" -button "確認";
    }
    else
    {
        system("explorer " + `substituteAllString $path "/" "\\"`);
    }
}

// NOTE:
// shr_pivotPainter2_UI();