//===============================================
//
// p4 コマンド実行
//
//===============================================

//===============================================
// p4 コマンドを取得
//===============================================
global proc string shr_p4Cmds_getP4Command(string $command, string $filePath)
{
    $filePath = substituteAllString($filePath, "/", "\\");

    // フォルダパスを取得
    string $folderPath = dirname($filePath);

    string $tokens[];

    // パス分割数
    int $num = `tokenize $folderPath "\\" $tokens`;

    int $i;

    // フォルダが存在するところまでパスを取得し、存在すれば実行コマンドにcd コマンドを追加
    while($i < $num)
    {
        if(`filetest -d $folderPath`)
        {
            $command = "cd /d \"" + $folderPath + "\" & " + $command;

            break;
        }

        $folderPath = dirname($filePath);

        $i += 1;
    }

    return $command;
}

//===============================================
// ファイル情報取得
//===============================================
global proc string[] shr_p4Cmds_getFileStatusFlags(string $filePath)
{
    string $result[];

    // Perforce 管理フォルダ以下に存在しない場合
    if(`shr_p4Cmds_isInPerforceFolder($filePath)` == false)
    {
        $result[`size($result)`] = "NOT_EXIST";
        return $result;
    }

    // p4 コマンド
    string $command = shr_p4Cmds_getP4Command("p4 fstat " + $filePath, $filePath);

    // ファイル情報取得
    string $fstat = system($command);

    if(gmatch($fstat, "*- file(s) not in client view.\r\n"))
    {
        return $result;
    }

    // perforce 未登録の場合
    if(gmatch($fstat, "*- no such file(s).\r\n"))
    {
        if(`filetest -f $filePath`)
        {
            $result[`size($result)`] = "NONE";
        }
        else
        {
            $result[`size($result)`] = "NOT_EXIST";
        }
    }

    // 追加マーキング状態の場合
    else if(gmatch($fstat, "*... action add\r\n*"))
    {
        $result[`size($result)`] = "ADDED";
    }
    // 削除マーキング状態の場合
    else if(gmatch($fstat, "*... action delete\r\n*"))
    {
        $result[`size($result)`] = "DELETED";
        $result[`size($result)`] = "REGISTERED";
    }
    // 削除済みの場合
    else if(gmatch($fstat, "*... headAction delete\r\n*"))
    {
        $result[`size($result)`] = "DELETED";
    }
    else
    {
        $result[`size($result)`] = "REGISTERED";

        // チェックアウト中の場合
        if(gmatch($fstat, "*... action edit\r\n*"))
        {
            $result[`size($result)`] = "CHECKED_OUT";
        }

        // 他の人がチェックアウト中の場合
        if(gmatch($fstat, "*... ... otherOpen *"))
        {
            $result[`size($result)`] = "OTHER_OPENED";
        }

        // コンフリクト状態の場合
        if(gmatch($fstat, "*... unresolved*"))
        {
            $result[`size($result)`] = "CONFLICTED";
        }
        // 最新リビジョンか確認
        else
        {
            string $lines[] = stringToStringArray($fstat, "\r\n");

            int $headRev;
            int $haveRev;

            string $line;

            for($line in $lines)
            {
                // 最新のリビジョン番号を取得
                if(startsWith($line, "... headRev"))
                {
                    string $tokens[] = stringToStringArray($line, " ");
                    $headRev = $tokens[`size($tokens)` - 1];
                }

                // ローカルのリビジョン番号を取得
                if(startsWith($line, "... haveRev"))
                {
                    string $tokens[] = stringToStringArray($line, " ");
                    $haveRev = $tokens[`size($tokens)` - 1];
                }
            }

            if($headRev > $haveRev)
            {
                if(`filetest -f $filePath`)
                {
                    $result[`size($result)`] = "UNCURRENT";
                }
                else
                {
                    $result[`size($result)`] = "UNSYNCED";
                }
            }
        }
    }

    // 重複項目を削除
    $result = `stringArrayRemoveDuplicates($result)`;

    return $result;
}

//===============================================
// perforce の各種ファイル操作が可能かどうかを取得
//===============================================
global proc string[] shr_p4Cmds_getFileOperationAvailability(string $filePath)
{
    string $result[];

    // p4v ファイル情報取得
    string $fstat[] = `shr_p4Cmds_getFileStatusFlags($filePath)`;

    // ローカルにもperforce にも存在しない場合
    if(stringArrayContains("NOT_EXIST", $fstat))
    {

    }
    // perforce 未登録の場合
    else if(stringArrayContains("NONE", $fstat))
    {
        $result[`size($result)`] = "add_enabled";

    }
    // perforce 未取得の場合
    else if(stringArrayContains("UNSYNCED", $fstat))
    {
        $result[`size($result)`] = "sync_enabled";

    }
    //  削除済みの場合
    else if(stringArrayContains("DELETED", $fstat) && `size($fstat)` == 1)
    {
        $result[`size($result)`] = "add_enabled";

    }
    else
    {
        //  追加フラグが付いている場合
        if(stringArrayContains("ADDED", $fstat))
        {
            $result[`size($result)`] = "submit_enabled";
            $result[`size($result)`] = "revert_enabled";
        }
        // perforce 登録済みの場合
        else if(stringArrayContains("REGISTERED", $fstat))
        {
            // コンフリクトしている場合
            if(stringArrayContains("CONFLICTED", $fstat))
            {

            }
            // コンフリクトしていない場合
            else
            {
                // 最新リビジョンではない場合
                if(stringArrayContains("UNCURRENT", $fstat))
                {
                    $result[`size($result)`] = "sync_enabled";
                }
                // 最新リビジョンの場合
                else
                {

                }
            }

            // チェックアウトしている場合
            if(stringArrayContains("CHECKED_OUT", $fstat))
            {
                $result[`size($result)`] = "submit_enabled";
                $result[`size($result)`] = "revert_enabled";
            }
            // チェックアウトしていない場合
            else
            {
                $result[`size($result)`] = "checkout_enabled";
            }
        }
    }

    // 重複項目を削除
    $result = `stringArrayRemoveDuplicates($result)`;

    return $result;
}

//===============================================
// Perforce 管理フォルダ以下に存在するか
//===============================================
global proc int shr_p4Cmds_isInPerforceFolder(string $filePath)
{
    // p4 情報を取得コマンド
    string $command = shr_p4Cmds_getP4Command("p4 -F %clientRoot% -ztag info ", $filePath);

    // p4 コマンド実行
    string $clientRoot = system($command);

    // 改行削除
    $clientRoot = substituteAllString($clientRoot, "\r\n", "");

    $filePath = substituteAllString($filePath, "/", "\\");

    if(startsWith(capitalizeString($filePath), capitalizeString($clientRoot)))
    {
        return true;
    }
    else
    {
        return false;
    }
}

//===============================================
// 追加マーキング
//===============================================
global proc shr_p4Cmds_add(string $filePath)
{
    string $typeOption;

    // mel, py ファイルの場合ファイルタイプをtext に
    if(endsWith($filePath, ".mel") || endsWith($filePath, ".py"))
    {
        $typeOption = "-t text ";
    }

    // p4 コマンド
    string $command = shr_p4Cmds_getP4Command("p4 add " + $typeOption + $filePath, $filePath);

    // p4 コマンド実行
    string $result = system($command);

    print $result;
}

//===============================================
// 最新リビジョンを取得
//===============================================
global proc shr_p4Cmds_sync(string $filePath)
{
    // p4 コマンド
    string $command = shr_p4Cmds_getP4Command("p4 sync " + $filePath, $filePath);

    // p4 コマンド実行
    string $result = system($command);

    print $result;
}

//===============================================
// チェックアウト
//===============================================
global proc shr_p4Cmds_checkout(string $filePath)
{
    // p4 コマンド
    string $command = shr_p4Cmds_getP4Command("p4 edit " + $filePath, $filePath);

    // p4 コマンド実行
    string $result = system($command);

    print $result;
}

//===============================================
// リバート
//===============================================
global proc shr_p4Cmds_revert(string $filePath)
{
    // p4 コマンド
    string $command = shr_p4Cmds_getP4Command("p4 revert " + $filePath, $filePath);

    // p4 コマンド実行
    string $result = system($command);

    print $result;
}

//===============================================
// サブミット
//===============================================
global proc int shr_p4Cmds_submit(string $filePath, string $comment, int $reopen)
{
    // コメントが空の場合
    if($comment == "")
    {
        confirmDialog -t "サブミット" -icon "warning" -m "コメントが入力されていません。 処理を中止します。" -b "OK";

        return false;
    }

    // Maya からだと、コメントにマルチバイト文字含まれているとうまくいかないので日本語は禁止に）
    // if(containsMultibyte($comment))
    // {
    //     confirmDialog -t "サブミット" -m "コメントに日本語が含まれています。処理を中止します。" -b "OK";

    //     return false;
    // }

    string $baseCommand;

    if($reopen)
    {
        $baseCommand = "p4 submit -r -d \"";
    }
    else
    {
        $baseCommand = "p4 submit -d \"";
    }

    // p4 コマンド
    string $command = shr_p4Cmds_getP4Command($baseCommand + $comment + "\" " + $filePath, $filePath);

    // p4 コマンド実行
    string $result = system($command);

    print $result;

    return true;
}

//===============================================
// 編集中ファイルに変更があるか
//===============================================
global proc int shr_p4Cmds_isModified(string $filePath)
{
    // p4 コマンド
    string $command = shr_p4Cmds_getP4Command("p4 diff -sa " + $filePath, $filePath);

    // p4 コマンド実行
    string $result = system($command);

    // 編集中ファイルに変更なし
    if($result == "")
    {
        return false;
    }
    // 編集中ファイルに変更あり
    else if($result == (substituteAllString($filePath, "/", "\\") + "\r\n"))
    {
        return true;
    }

    // それ以外の場合、編集中ファイルではない
    print $result;

    return false;
}

//===============================================
// 他にチェックアウトしているユーザーを取得
//===============================================
global proc string[] shr_p4Cmds_getOtherCheckoutUser(string $filePath)
{
    string $users[];

    // p4 コマンド
    string $command = shr_p4Cmds_getP4Command("p4 fstat -T otherOpen " + $filePath, $filePath);

    // p4 コマンド実行
    string $result = system($command);

    if(startsWith($result, "... ... otherOpen"))
    {
        string $tokens[] = stringToStringArray($result, " ");

        int $num = int($tokens[`size($tokens)` - 1]);

        int $i;

        for($i = 0; $i < $num; $i++)
        {
            // p4 コマンド
            string $cmd = shr_p4Cmds_getP4Command("p4 fstat -T otherOpen" + $i + " " + $filePath, $filePath);

            // p4 コマンド実行
             $result = system($cmd);

            $tokens = stringToStringArray($result, " ");
            $tokens = stringToStringArray($tokens[3], "@");

            $users[`size($users)`] = $tokens[0];
        }
    }

    return $users;
}

//===============================================
// Perforce 操作を実行
//===============================================
global proc int shr_p4Cmds_performCommand(string $operation, string $filePath)
{
    // 0: 失敗
    // 1: 成功
    // 2: 成功（ファイル更新あり）
    int $result = 0;

    if($filePath == "")
    {
        error "// ファイルパスが取得できないため実行できません。\n";

        return $result;
    }

    if(`filetest -f $filePath` == false)
    {
        error "// ファイルが存在しないため実行できません。\n";

        return $result;
    }

    // 追加
    if($operation == "add")
    {
        shr_p4Cmds_add($filePath);

        $result = 1;
    }
    // 最新リビジョンを取得
    else if($operation == "sync")
    {
        $result = shr_p4Cmds_performSync($filePath);
    }
    // チェックアウト
    else if($operation == "checkout")
    {
        $result = shr_p4Cmds_performCheckout($filePath);
    }
    // サブミット
    else if($operation == "submit")
    {
        $result = shr_p4Cmds_performSubmit($filePath);
    }
    // リバート
    else if($operation == "revert")
    {
        $result = shr_p4Cmds_performRevert($filePath);
    }

    return $result;
}

//===============================================
// 最新リビジョンを取得
//===============================================
global proc int shr_p4Cmds_performSync(string $filePath)
{
    // ファイル情報取得
    string $fstat[] = `shr_p4Cmds_getFileStatusFlags($filePath)`;

    // チェックアウトしている場合
    if(stringArrayContains("CHECKED_OUT", $fstat))
    {
        string $message = $filePath;
        $message += "\n\n最新リビジョンではない状態でチェックアウトされています。";
        $message += "\n\nリバートして最新リビジョンを取得しますか？";

        string $result = `confirmDialog
            -t "確認"
            -icn "question"
            -m $message
            -b "リバートして最新リビジョンを取得"
            -b "キャンセル"
            -db "リバートして最新リビジョンを取得"
            -cb "キャンセル"
            -ds "キャンセル"`;

        if($result == "リバートして最新リビジョンを取得")
        {
            // リバート
            shr_p4Cmds_revert($filePath);
        }
        else
        {
            return false;
        }
    }

    // 最新リビジョンを取得
    shr_p4Cmds_sync($filePath);

    return 2;
}

//===============================================
// チェックアウト
//===============================================
global proc int shr_p4Cmds_performCheckout(string $filePath)
{
    // ファイル情報取得
    string $fstat[] = `shr_p4Cmds_getFileStatusFlags($filePath)`;

    // 他にチェックアウトしているユーザーがいる場合
    if(stringArrayContains("OTHER_OPENED", $fstat))
    {
        string $users[] = shr_p4Cmds_getOtherCheckoutUser($filePath);
        string $user;

        string $message = $filePath;
        $message += "\n\n他にチェックアウトしているユーザーがいます。";
        $message += "チェックアウトしますか？\n\n\n";
        $message += "【 現在チェックアウトしているユーザー 】\n\n";

        for($user in $users)
        {
            $message = $message + $user + ", ";
        }

        string $result = `confirmDialog
            -t "確認" -m $message
            -icn "question"
            -b "チェックアウト"
            -b "キャンセル"
            -db "チェックアウト"
            -cb "キャンセル"
            -ds "キャンセル"`;

        if($result == "キャンセル")
        {
            return false;
        }
    }

    int $isSynced = 0;

    // 最新リビジョンじゃない場合
    if(stringArrayContains("UNCURRENT", $fstat))
    {
        string $message = $filePath;
        $message += "\n\n最新リビジョンではありません。";
        $message += "\n\n最新リビジョンを取得してチェックアウトしますか？";

        string $result = `confirmDialog
            -t "確認"
            -icn "question"
            -m $message
            -b "最新リビジョンを取得してチェックアウト"
            -b "最新リビジョンを取得せずチェックアウト"
            -b "キャンセル"
            -db "最新リビジョンを取得してチェックアウト"
            -cb "キャンセル"
            -ds "キャンセル"`;

        if($result == "最新リビジョンを取得してチェックアウト")
        {
            // 最新リビジョンを取得
            shr_p4Cmds_sync($filePath);

            $isSynced = 1;
        }
        else if($result == "キャンセル")
        {
            return false;
        }
    }

    // チェックアウト
    shr_p4Cmds_checkout($filePath);

    return (1 + $isSynced);
}

//===============================================
// サブミット
//===============================================
global proc int shr_p4Cmds_performSubmit(string $filePath)
{
    // ファイル情報取得
    string $fstat[] = `shr_p4Cmds_getFileStatusFlags($filePath)`;

    // コンフリクト状態の場合
    if(stringArrayContains("CONFLICTED", $fstat))
    {
        string $message = $filePath;
        $message += "\n\nコンフリクトしています。 コンフリクトを解決してからサブミットを行ってください。";

        confirmDialog -t "確認" -icn "warning" -m $message -b "OK";

        return false;
    }

    // 最新リビジョンじゃない場合
    if(stringArrayContains("UNCURRENT", $fstat))
    {
        string $message = $filePath;
        $message += "\n\n最新リビジョンではありません。 コンフリクトを回避してからサブミットを行ってください。";

        confirmDialog -t "確認" -icn "warning"  -m $message -b "OK";

        return false;
    }

    string $result = `promptDialog
        -title "サブミット"
        -message "サブミットコメントを入力してください。\n"
        -button "サブミット"
        -button "サブミット（チェックアウト継続）"
        -button "キャンセル"
        -defaultButton "サブミット"
        -cancelButton "キャンセル"
        -dismissString "キャンセル"`;

    if($result == "キャンセル")
    {
        return false;
    }

    string $comment = `promptDialog -query -text`;

    int $reopen = ($result == "サブミット（チェックアウト継続）");

    // サブミット
    int $isDone = shr_p4Cmds_submit($filePath, $comment, $reopen);

    return $isDone;
}

//===============================================
// リバートを実行
//===============================================
global proc int shr_p4Cmds_performRevert(string $filePath)
{
    // ファイル情報取得
    string $fstat[] = `shr_p4Cmds_getFileStatusFlags($filePath)`;

    // ファイルが変更されているか
    int $isModified = 0;

    // チェックアウト状態の場合
    if(stringArrayContains("CHECKED_OUT", $fstat))
    {
        $isModified = `shr_p4Cmds_isModified($filePath)`;

        // ファイルが変更されている場合
        if($isModified)
        {
            string $message = $filePath;
            $message += "\n\nファイルの変更が破棄されます。リバートしますか？";

            string $result = `confirmDialog
                -t "確認"
                -icn "question"
                -m $message
                -b "リバート"
                -b "キャンセル"
                -db "リバート"
                -cb "キャンセル"
                -ds "キャンセル"`;

            if($result == "キャンセル")
            {
                return false;
            }
        }
    }

    // リバート
    shr_p4Cmds_revert($filePath);

    return (1 + $isModified);
}
