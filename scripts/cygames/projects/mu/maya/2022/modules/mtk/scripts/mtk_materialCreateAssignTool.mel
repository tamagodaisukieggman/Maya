//===============================================
//
// マテリアルアサインツール
//
//===============================================

global proc mtk_materialCreateAssignTool()
{
    //すでにウィンドウがあれば終了
    if (`window -exists WND_mtk_materialCreateAssignTool` == 1)
    {
        deleteUI WND_mtk_materialCreateAssignTool;
        //return;
    }

    window
        -title "Material Create & Assign Tool"
        -resizeToFitChildren on
        -sizeable off
        -maximizeButton off
        -mb on
        WND_mtk_materialCreateAssignTool;

        string $helpCmd = "python(\"import webbrowser\\nwebbrowser.open('https://wisdom.cygames.jp/pages/viewpage.action?pageId=124855011')\")";

        menu -l "Help" -helpMenu on;
            menuItem
                -l "Material Create & Assign Tool のヘルプ"
                -c $helpCmd
               ;

    frameLayout -mw 8 -mh 4 -lv off;
        columnLayout -adj on;

    		rowColumnLayout -nc 2 -columnAlign 1 right -rowSpacing 1 8;
    			text -label "マテリアル名 : ";

                rowLayout -nc 2;
        			textField
        			    -text ""
        			    -w 210
        			    TF_mtk_materialCreateAssignTool;

        			columnLayout -adj on -rowSpacing 2;
        			    button
        			        -l "シーン名から設定"
        			        -ann "シーン名からマテリアル名を設定します。"
        			        -h 18
        			        -c "mtk_materialCreateAssignTool_getMatNameFromSceneName(0)"
        			        ;
        			    button
        			        -l "ルートノード名から設定"
        			        -ann "選択ノードのルートノード名からマテリアル名を設定します。"
        			        -h 18
        			        -c "mtk_materialCreateAssignTool_getMatNameFromSelection(0)"
        			        ;

        			    setParent ..;
                    setParent ..;
                text -l "種類 : ";

                columnLayout;
                    optionMenu
                        -ann "作成するマテリアルの種類を選択します。"
                        -cc "mtk_materialCreateAssignTool_optionMenuCallback"
                        OM_mtk_materialCreateAssignTool;
                        menuItem -l "Lambert";
                        menuItem -l "Phong";
                        menuItem -l "Blinn";

                    optionMenu -e -sl (`optionVar -q "mtk_materialCreateAssignTool_materialType"` + 1) OM_mtk_materialCreateAssignTool;

                    setParent ..;

                text -l "カラー : ";
                colorSliderGrp
                    -rgb 0.5 0.5 0.5
                    CSG_mtk_materialCreateAssignTool;

                setParent ..;

            separator -h 16 -st "in" SP_mtk_materialCreateAssignTool;

            rowLayout -nc 2;
                button
                    -l "マテリアルを作成"
                    -bgc 0.5 0.6 0.5
                    -w 190
                    -c "mtk_materialCreateAssignTool_assignMaterial(0)"
                    ;
                button
                    -l "マテリアルを作成して選択に割り当て"
                    -bgc 0.5 0.6 0.5
                    -w 190
                    -c "mtk_materialCreateAssignTool_assignMaterial(1)"
                    ;
            setParent ..;
        setParent ..;

    setFocus SP_mtk_materialCreateAssignTool;

    string $sel[] = `ls -sl -tr`;

    if(`size($sel)` != 0)
    {
        mtk_materialCreateAssignTool_getMatNameFromSelection(1);
    }

    if(`textField -q -tx TF_mtk_materialCreateAssignTool` == "")
    {
        mtk_materialCreateAssignTool_getMatNameFromSceneName(1);
    }

    showWindow;
}

////////////////////////////////////
// シーン名からマテリアル名を生成
///////////////////////////////////
global proc mtk_materialCreateAssignTool_getMatNameFromSceneName(int $isSilent)
{
    // シーン名を取得（拡張子なし）
    string $sceneName = basenameEx(`python("from mtk.utils import getCurrentSceneFilePath; getCurrentSceneFilePath()")`);
    // string $sceneName = basenameEx(`file -q -shortName -sceneName`);

    // シーン名が取得できなければ
    if(startsWith($sceneName, "mdl_"))
    {
        // シーン名の "mdl_" を"mtl_" に置き換え
        $sceneName = substituteAllString($sceneName, "mdl_", "mtl_");

        textField -e -text $sceneName TF_mtk_materialCreateAssignTool;
    }
    else
    {
        if($isSilent == false)
        {
            print "// シーン名からマテリアル名を生成できません。\n";
        }
    }
}

////////////////////////////////////
// 選択ノードからマテリアル名を生成
///////////////////////////////////
global proc mtk_materialCreateAssignTool_getMatNameFromSelection(int $isSilent)
{
    string $sel[] = `ls -sl -tr`;
    // ルートノードを取得
    string $rootNode = `mtk_materialCreateAssignTool_getRootNodeName($sel[0])`;

    // "mdl_" で始まるルートノード名の場合
    if(startsWith($rootNode, "mdl_"))
    {
        // シーン名の "mdl_" を"mtl_" に置き換え
        $sceneName = substituteAllString($rootNode, "mdl_", "mtl_");

        textField -e -text $sceneName TF_mtk_materialCreateAssignTool;
    }
    else
    {
        if($isSilent == false)
        {
            print "// ルートノード名からマテリアル名を生成できません。\n";
        }
    }
}

////////////////////////////////////
// 最上位ノードを取得
///////////////////////////////////
global proc string mtk_materialCreateAssignTool_getRootNodeName(string $nodeName)
{
    // ノードネームが空なら終了
    if($nodeName == "")
    {
        return "";
    }

    // ノードが存在しなければ終了
    if(`objExists $nodeName` == false)
    {
        print("// " + $nodeName + " が見つかりません。");

        return "";
    }

    // ノードのフルパス名を取得
    string $fullPathName[] = `ls -long $nodeName`;

    // フルパス名を分割
    string $tokens[] = stringToStringArray($fullPathName[0], "|");

    // ワールドの子の場合
    if($nodeName == $tokens[0])
    {
        return $nodeName;
    }
    else
    {
        return $tokens[0];
    }
}


////////////////////////////////////
// マテリアルを作成・割り当て
///////////////////////////////////
global proc mtk_materialCreateAssignTool_assignMaterial(int $mode)
{
    // マテリアル名取得
    string $matName = `textField -q -text TF_mtk_materialCreateAssignTool`;

    // マテリアル名が入力されていなければ終了
    if($matName == "")
    {
        confirmDialog -t "確認" -icon "warning" -m "マテリアル名が入力されていません。" -b "確認";
        return;
    }

    string $matExists[] = `ls -mat $matName`;

    // マテリアルが既にシーンに存在する場合
    if(`size($matExists)` != 0)
    {
        string $message = $matName + " はすでにシーンに存在します。";

        // マテリアルの候補名を取得
        string $newMatName = `mtk_materialCreateAssignTool_createNewMatName($matName)`;

        if($newMatName == "")
        {
            confirmDialog -m $message -t "確認"  -button "確認";
            return;
        }
        else
        {
            $message = $message + "\n\n" + $newMatName + " を作成しますか？";

            // 確認ダイアログ
            string $result =
            `confirmDialog
                -title "確認"
                -message $message
                -button "はい"
                -button "いいえ"
                -defaultButton "はい"
                -cancelButton "いいえ"
                -dismissString "いいえ"`
                ;

            // キャンセルしたら終了
            if ($result == "いいえ")
            {
                return;
            }

            $matName = $newMatName;

            textField -e -text $newMatName TF_mtk_materialCreateAssignTool;
        }
    }

    // 選択ノード取得
    string $sel[] = `ls -sl`;

    if($mode == 1)
    {
        if (`size($sel)` == 0)
        {
            confirmDialog -t "確認" -icon "warning" -m "割り当てるオブジェクトが選択されていません。" -b "確認";
            return;
        }
    }

    // 割り当てるマテリアルの種類を取得
    string $matType = `optionMenu -q -v OM_mtk_materialCreateAssignTool`;

    // 小文字に
    $matType = `tolower $matType`;

    // マテリアル作成
    string $newMat = `shadingNode -asShader $matType -name $matName`;

    // カラー設定
    float $rgb[] = `colorSliderGrp -q -rgb CSG_mtk_materialCreateAssignTool`;

    setAttr ($newMat + ".color") -type double3 $rgb[0] $rgb[1] $rgb[2];

    print ("// " + $newMat + " を作成しました。\n");

    select $sel;

    if($mode == 1)
    {
        // マテリアルをアサイン
        hyperShade -assign $newMat;

        print ("// " + $newMat + " を選択に割り当てました。\n");
    }
}

////////////////////////////////////
// マテリアル種類の選択を保存
///////////////////////////////////
global proc mtk_materialCreateAssignTool_optionMenuCallback()
{
    optionVar -iv "mtk_materialCreateAssignTool_materialType" (`optionMenu -q -sl OM_mtk_materialCreateAssignTool` - 1);
}

////////////////////////////////////
// 新しいマテリアル名 候補作成
///////////////////////////////////
global proc string mtk_materialCreateAssignTool_createNewMatName(string $matName)
{
    string $tokens[];

    // マテリアル名を分解
    int $numTokens = `tokenize $matName "_" $tokens`;

    // トークン数がひとつなら終了
    if($numTokens == 1)
    {
        return "";
    }

    // 最後のトークンが数字3桁なら
    if(`gmatch $tokens[$numTokens - 1] "[0-9][0-9][0-9]"`)
    {
        while(`objExists ($matName)`)
        {
            // int にキャスト
            int $varNum = (int) $tokens[$numTokens - 1];

            // バリエーション番号をカウントアップ
            $varNum += 1;

            // バリエーション番号をstring にキャストしてトークンの最後に入れる
            $tokens[$numTokens - 1] = (string) $varNum;

            // バリエーション番号の桁数
            int $wordCount = `size($tokens[$numTokens - 1])`;

            // 桁数に応じて、前に"0"を追加
            if($wordCount == 1)
            {
                $tokens[$numTokens - 1] = "00" + $tokens[$numTokens - 1];
            }
            else if($wordCount == 2)
            {
                $tokens[$numTokens - 1] = "0" + $tokens[$numTokens - 1];
            }

            // トークンを結合してアセットID に
            $matName = stringArrayToString($tokens, "_");
        }

    }

    return $matName;
}

