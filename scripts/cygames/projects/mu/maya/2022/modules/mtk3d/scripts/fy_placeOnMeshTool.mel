//===============================================
//
// メッシュ上に配置ツール
//
// Fujita Yukihiro
//
//===============================================

global proc fy_placeOnMeshTool()
{
    // MASH プラグインがロードされていなければロード
    if(`pluginInfo -q -l "MASH.mll"` == false)
    {
        loadPlugin "MASH.mll";
    }

    global string $MASH_FY_PLACEONMESHTOOL;

    if(`objExists $MASH_FY_PLACEONMESHTOOL` == false)
    {
        $MASH_FY_PLACEONMESHTOOL = "";
    }

    // すでにウィンドウが出ていたら
    if (`window -exists uWnd_fy_placeOnMeshTool` == 1)
    {
        deleteUI uWnd_fy_placeOnMeshTool;
    }

    window
        -title "Place On Mesh Tool"
        -resizeToFitChildren on
        -sizeable on
        -toolbox off
        -maximizeButton off
        -mb on
        uWnd_fy_placeOnMeshTool;

    string $helpCmd = "python(\"import webbrowser\\nwebbrowser.open('https://wisdom.cygames.jp/pages/viewpage.action?pageId=159649113')\")";

    menu -label "ヘルプ" ;
        menuItem
            -label "Place On Mesh Tool のヘルプ"
            -enable on
            -image "help.png"
            -c $helpCmd
            ;

    formLayout uFl_fy_placeOnMeshTool;

        frameLayout
            -p uFl_fy_placeOnMeshTool
            -l "MASH ネットワーク"
            -collapsable false
            -lv off
            -mw 8 -mh 4
            uFl_mashNetwork_fy_placeOnMeshTool;

        // MASH ネットワーク フレーム作成
        fy_placeOnMeshTool_createMashNetworkUI;

        setParent uFl_fy_placeOnMeshTool;

    scrollLayout -childResizable true -w 432 -bv true uSl_fy_placeOnMeshTool;

        // インスタンスフレーム作成
        frameLayout
            -p uSl_fy_placeOnMeshTool
            -l "インスタンス設定"
            -collapsable true
            -mw 8 -mh 4
            uFl_instance_fy_placeOnMeshTool;

        // 配置フレーム作成
        frameLayout
            -p uSl_fy_placeOnMeshTool
            -l "配置設定"
            -collapsable true
            -mw 8 -mh 4
            uFl_distribute_fy_placeOnMeshTool;

        // オフセットフレーム作成
        frameLayout
            -p uSl_fy_placeOnMeshTool
            -l "オフセット設定"
            -collapsable true
            -mw 8 -mh 4
            uFl_offset_fy_placeOnMeshTool;

        // ランダムフレーム作成
        frameLayout
            -p uSl_fy_placeOnMeshTool
            -l "ランダム設定"
            -collapsable true
            -mw 8 -mh 4
            uFl_random_fy_placeOnMeshTool;

        setParent uFl_fy_placeOnMeshTool;

        button -l "オブジェクト化" -bgc 0.5 0.6 0.5 -c "fy_placeOnMeshTool_bakeInstancerToObjects" uBtn_bakeInstancer_fy_placeOnMeshTool;

    int $sw = 4;

    formLayout -e
        -attachForm uFl_mashNetwork_fy_placeOnMeshTool "top"    $sw
        -attachForm uFl_mashNetwork_fy_placeOnMeshTool "left"   $sw
        -attachNone uFl_mashNetwork_fy_placeOnMeshTool "bottom"
        -attachForm uFl_mashNetwork_fy_placeOnMeshTool "right"  $sw

        -attachControl uSl_fy_placeOnMeshTool "top"    $sw uFl_mashNetwork_fy_placeOnMeshTool
        -attachForm    uSl_fy_placeOnMeshTool "left"   $sw
        -attachControl uSl_fy_placeOnMeshTool "bottom" $sw uBtn_bakeInstancer_fy_placeOnMeshTool
        -attachForm    uSl_fy_placeOnMeshTool "right"  $sw

        -attachNone uBtn_bakeInstancer_fy_placeOnMeshTool "top"
        -attachForm uBtn_bakeInstancer_fy_placeOnMeshTool "left"   $sw
        -attachForm uBtn_bakeInstancer_fy_placeOnMeshTool "bottom" $sw
        -attachForm uBtn_bakeInstancer_fy_placeOnMeshTool "right"  $sw

        uFl_fy_placeOnMeshTool;


    // MASH ネットワークリストを更新
    fy_placeOnMeshTool_refreshMashNetworkList;

    // スクリプトジョブを作成
    fy_placeOnMeshTool_createScriptJob;

    showWindow;
}

///////////////////////////////////////////////////////
// scriptJob 作成
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_createScriptJob()
{
    // シーンオープン
    scriptJob -event "SceneOpened" "fy_placeOnMeshTool" -parent uWnd_fy_placeOnMeshTool;

    // 対象MASH ネットワークを取得
    string $mashNetworks[] = `fy_placeOnMeshTool_getMashNetworks`;

    string $mashNetwork;

    for($mashNetwork in $mashNetworks)
    {
        // 削除した場合に リストを更新するスクリプトジョブ
        scriptJob
            -parent uWnd_fy_placeOnMeshTool
            -nodeDeleted $mashNetwork "fy_placeOnMeshTool_refreshMashNetworkList"
            ;
    }

    // リネームした場合に インスタンスオブジェクトリストを更新
    scriptJob
        -parent uWnd_fy_placeOnMeshTool
        -event "NameChanged" "fy_placeOnMeshTool_refreshMashNetworkList;  fy_placeOnMeshTool_refreshInstancedObjectsList"
        ;

    // 選択が変化した場合に インスタンスオブジェクトリストを更新
    scriptJob
        -parent uWnd_fy_placeOnMeshTool
        -event "SelectionChanged" "fy_placeOnMeshTool_refreshInstancedObjectsList"
        ;
}

///////////////////////////////////////////////////////
// MASH ネットワーク設定フレームを作成
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_createMashNetworkUI()
{
    int $buttonWidth = 100;
    int $buttonHeight = 20;

    columnLayout -p uFl_mashNetwork_fy_placeOnMeshTool -adj on -rs 0;

        rowColumnLayout -nc 2 -adj 1 -rs 1 2 -cs 2 2;
            text -l "▼ MASH ネットワーク" -bgc 0.51 0.51 0.51;
            text -l "";

            textScrollList
                -h 50
                -sc "fy_placeOnMeshTool_selectMashNetworkCallback"
                uTsl_mashNetwork_fy_placeOnMeshTool;

            columnLayout -adj on -rs 2;
                button -l "新規追加" -w $buttonWidth -h $buttonHeight -c "fy_placeOnMeshTool_importMashNetwork";
                button -l "リネーム" -w $buttonWidth -h $buttonHeight -c "fy_placeOnMeshTool_renameMashNetwork";
                button -l "削除" -w $buttonWidth -h $buttonHeight -c "fy_placeOnMeshTool_deleteMashNetwork";

                rowLayout -nc 2;
                    text -l "  ";
                    checkBox
                        -l "有効"
                        -ann "選択したMASH ネットワークを有効にします"
                        -w $buttonWidth
                        -h $buttonHeight
                        -onc "fy_placeOnMeshTool_enableMashNetwork(1); fy_placeOnMeshTool_enableUI(1)"
                        -ofc "fy_placeOnMeshTool_enableMashNetwork(0); fy_placeOnMeshTool_enableUI(0)"
                        uCb_enableMash_fy_placeOnMeshTool;
}

///////////////////////////////////////////////////////
// インスタンス設定フレームを作成
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_createInstanceUI()
{
    if(`columnLayout -ex uCl_instance_fy_placeOnMeshTool`)
    {
        deleteUI uCl_instance_fy_placeOnMeshTool;
    }

    global string $MASH_FY_PLACEONMESHTOOL;

    int $buttonWidth = 100;
    int $buttonHeight = 20;

    if($MASH_FY_PLACEONMESHTOOL == "")
    {
        return;
    }

    columnLayout
        -adj on
        -rs 0
        -p uFl_instance_fy_placeOnMeshTool
        uCl_instance_fy_placeOnMeshTool;

        rowColumnLayout -nc 2 -adj 1 -rs 1 2 -cs 2 2;
            text -l "▼ 配置オブジェクト"  -bgc 0.51 0.51 0.51;
            text -l "";

            textScrollList -h 50 -allowMultiSelection true uTsl_instancedObjects_fy_placeOnMeshTool;

            columnLayout -adj on -rs 2;
                button -l "リストに追加" -w $buttonWidth -h $buttonHeight -c "fy_placeOnMeshTool_addInstancedObjects";
                button -l "上に移動" -w $buttonWidth -h $buttonHeight -c "fy_placeOnMeshTool_moveUpInstancedObjects";
                button -l "下に移動" -w $buttonWidth -h $buttonHeight -c "fy_placeOnMeshTool_moveDownInstancedObjects";
                button -l "リストから削除" -w $buttonWidth -h $buttonHeight -c "fy_placeOnMeshTool_removeInstancedObjects";

                setParent ..;
            setParent ..;

        optionMenuGrp  -l "出現" -cc "fy_placeOnMeshTool_changeIdType(\"#1\")" uOm_idtype_fy_placeOnMeshTool;
            menuItem -l "ランダム";
            menuItem -l "リスト順";
            menuItem -l "パーセンテージ" -en off;

        attrControlGrp -attribute ($MASH_FY_PLACEONMESHTOOL + "_Id.seed") -l "ランダムシード" uAcg_idSeed_fy_placeOnMeshTool;
        popupMenu;

     // スクリプトジョブ インスタンスオブジェクト接続数に変化があった場合にインスタンスオブジェクトリスト更新
    scriptJob
        -parent uCl_instance_fy_placeOnMeshTool
        -attributeChange ($MASH_FY_PLACEONMESHTOOL + "_instancer.hierarchyCount") "fy_placeOnMeshTool_refreshInstancedObjectsList; fy_placeOnMeshTool_setIdCount"
        ;

    // 出現 オプションメニューを更新
    fy_placeOnMeshTool_refreshIdtypeOptionMenu;

    // インスタンスオブジェクトリストを更新
    fy_placeOnMeshTool_refreshInstancedObjectsList;
}

///////////////////////////////////////////////////////
// 配置設定フレームを作成
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_createDistributeUI()
{
    if(`columnLayout -ex uCl_distribute_fy_placeOnMeshTool`)
    {
        deleteUI uCl_distribute_fy_placeOnMeshTool;
    }

    global string $MASH_FY_PLACEONMESHTOOL;

    int $buttonWidth = 100;

    if($MASH_FY_PLACEONMESHTOOL == "")
    {
        return;
    }

    columnLayout
        -adj on
        -rs 0
        -p uFl_distribute_fy_placeOnMeshTool
        uCl_distribute_fy_placeOnMeshTool;

        optionMenuGrp -l "配置方法" -cc "fy_placeOnMeshTool_changeDistributeMethod(\"#1\")" uOm_distributeMethod_fy_placeOnMeshTool;
            menuItem -l "サーフェス（ランダム）";
            menuItem -d true;
            menuItem -l "頂点（ランダム）";
            menuItem -l "頂点（番号順）";
            menuItem -l "頂点（全て）";
            menuItem -d true;
            menuItem -l "エッジ（ランダム）";
            menuItem -l "エッジ（番号順）";
            menuItem -l "エッジ（全て）";
            menuItem -d true;
            menuItem -l "フェースの中心（ランダム）";
            menuItem -l "フェースの中心（番号順）";
            menuItem -l "フェースの中心（全て）";
            menuItem -d true;
            menuItem -l "指定コンポーネント（番号順）";
            menuItem -l "指定コンポーネント（全て）";
            menuItem -d true;
            menuItem -en false -l "ボクセル";

        rowLayout
            -nc 3
            -cw 1 140 -cat 1 "right" 0
            -cw 2 100
            -cw 3 100
            -adj 2
            uRl_baseMesh_fy_placeOnMeshTool;
            text -l "対象メッシュ";
            nameField uTf_baseMesh_fy_placeOnMeshTool;
            button -l "選択をセット" -h 20 -w $buttonWidth -c "fy_placeOnMeshTool_setBaseMesh";
            setParent ..;

        rowLayout
            -nc 3
            -cw 1 140 -cat 1 "right" 0
            -cw 2 100
            -cw 3 100
            //-rowAttach 3 "top" 0
            -adj 2
            uRl_components_fy_placeOnMeshTool;
            text -l "対象コンポーネント";
            textScrollList -h 100 -allowMultiSelection true -sc "fy_placeOnMeshTool_selectTargetComponents" uTsl_components_fy_placeOnMeshTool;

            columnLayout -adj on -rs 2;
                button -l "リストに追加" -h 20 -w $buttonWidth -c "fy_placeOnMeshTool_addTargetComponents";
                button -l "リストから削除" -h 20 -w $buttonWidth -c "fy_placeOnMeshTool_removeTargetComponents";
                setParent ..;
            setParent ..;

        attrControlGrp -attribute ($MASH_FY_PLACEONMESHTOOL + "_Distribute.pointCount") -l "配置数" uAcg_numOfPoints_fy_placeOnMeshTool;
        popupMenu;
        attrControlGrp -attribute ($MASH_FY_PLACEONMESHTOOL + "_Distribute.seed") -l "ランダムシード" uAcg_distributeSeed_fy_placeOnMeshTool;
        popupMenu;
        attrControlGrp -attribute ($MASH_FY_PLACEONMESHTOOL + "_Distribute.areaBasedScatter") -l "領域ベースの散乱" uAcg_areaBasedScatter_fy_placeOnMeshTool;
        popupMenu;
        attrControlGrp -attribute ($MASH_FY_PLACEONMESHTOOL + "_Distribute.distanceAlongNormal") -l "メッシュ法線方向にオフセット";
        popupMenu;
        attrControlGrp -attribute ($MASH_FY_PLACEONMESHTOOL + "_Distribute.calcRotation") -l "メッシュ法線に従って回転";
        popupMenu;
        attrControlGrp -attribute ($MASH_FY_PLACEONMESHTOOL + "_Distribute.useUpVector") -l "アップベクトルを指定" -cc "fy_placeOnMeshTool_useUpVectorCheckboxCallback";
        popupMenu;
        attrFieldGrp  -attribute ($MASH_FY_PLACEONMESHTOOL + "_Distribute.upVector") -l "アップベクトル" uAcg_upVector_fy_placeOnMeshTool;
        popupMenu;

    // スクリプトジョブ ベースメッシュを変更した場合にベースメッシュフィールドを更新
    scriptJob
        -parent uCl_distribute_fy_placeOnMeshTool
        -attributeChange ($MASH_FY_PLACEONMESHTOOL + "_Distribute.inputMesh") "fy_placeOnMeshTool_refreshBaseMeshField"
        ;

    // いずれかのセット内容に変更があった場合に対象コンポーネントリストを更新
    scriptJob
        -parent uCl_distribute_fy_placeOnMeshTool
        -event "SetModified" "fy_placeOnMeshTool_refreshTargetComponentsList"
        ;


    // 配置方法オプションメニューを更新
    fy_placeOnMeshTool_refreshDistributeMethodOptionMenu;

    // ベースメッシュフィールドを更新
    fy_placeOnMeshTool_refreshBaseMeshField;

    // 対象コンポーネントリストを更新
    fy_placeOnMeshTool_refreshTargetComponentsList;

    // アップベクトルフィールド更新
    fy_placeOnMeshTool_useUpVectorCheckboxCallback;
}

///////////////////////////////////////////////////////
// MASH オフセット設定フレームを作成
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_createOffsetUI()
{
    if(`columnLayout -ex uCl_offset_fy_placeOnMeshTool`)
    {
        deleteUI uCl_offset_fy_placeOnMeshTool;
    }

    global string $MASH_FY_PLACEONMESHTOOL;

    if($MASH_FY_PLACEONMESHTOOL == "")
    {
        return;
    }

    columnLayout
        -adj on
        -rs 0
        -p uFl_offset_fy_placeOnMeshTool
        uCl_offset_fy_placeOnMeshTool;

        attrEnumOptionMenuGrp
            -label "座標系"
            -attribute ($MASH_FY_PLACEONMESHTOOL + "_Offset.transformationSpace")
            -ei 2 "ローカル"
            -ei 1 "ワールド"
            ;

        attrFieldGrp  -attribute ($MASH_FY_PLACEONMESHTOOL + "_Offset.positionOffset") -l "位置オフセット";
        popupMenu;
        attrFieldGrp  -attribute ($MASH_FY_PLACEONMESHTOOL + "_Offset.rotationOffset") -l "回転オフセット";
        popupMenu;
        attrFieldGrp  -attribute ($MASH_FY_PLACEONMESHTOOL + "_Offset.scaleOffset") -l "スケールオフセット";
        popupMenu;
}

///////////////////////////////////////////////////////
// MASH ランダム設定フレームを作成
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_createRandomUI()
{
    if(`columnLayout -ex uCl_random_fy_placeOnMeshTool`)
    {
        deleteUI uCl_random_fy_placeOnMeshTool;
    }

    global string $MASH_FY_PLACEONMESHTOOL;

    if($MASH_FY_PLACEONMESHTOOL == "")
    {
        return;
    }

    columnLayout
        -adj on
        -rs 0
        -p uFl_random_fy_placeOnMeshTool
        uCl_random_fy_placeOnMeshTool;

        attrEnumOptionMenuGrp
            -label "座標系"
            -attribute ($MASH_FY_PLACEONMESHTOOL + "_Random.transformationSpace")
            -ei 2 "ローカル"
            -ei 1 "ワールド"
            ;

        attrControlGrp  -attribute ($MASH_FY_PLACEONMESHTOOL + "_Random.randomSeed") -l "ランダムシード";
        popupMenu;

        text -l "" -h 4;

        attrControlGrp  -attribute ($MASH_FY_PLACEONMESHTOOL + "_Random.positionX") -l "位置 X";
        popupMenu;
        attrControlGrp  -attribute ($MASH_FY_PLACEONMESHTOOL + "_Random.positionY") -l "位置 Y";
        popupMenu;
        attrControlGrp  -attribute ($MASH_FY_PLACEONMESHTOOL + "_Random.positionZ") -l "位置 Z";
        popupMenu;
        text -l "" -h 4;
        attrControlGrp  -attribute ($MASH_FY_PLACEONMESHTOOL + "_Random.rotationX") -l "回転 X";
        popupMenu;
        attrControlGrp  -attribute ($MASH_FY_PLACEONMESHTOOL + "_Random.rotationY") -l "回転 Y";
        popupMenu;
        attrControlGrp  -attribute ($MASH_FY_PLACEONMESHTOOL + "_Random.rotationZ") -l "回転 Z";
        popupMenu;
        text -l "" -h 4;
        attrControlGrp  -attribute ($MASH_FY_PLACEONMESHTOOL + "_Random.scaleX") -l "スケール X";
        popupMenu;
        attrControlGrp  -attribute ($MASH_FY_PLACEONMESHTOOL + "_Random.scaleY") -l "スケール Y" uAcg_randScaleY_fy_placeOnMeshTool;
        popupMenu;
        attrControlGrp  -attribute ($MASH_FY_PLACEONMESHTOOL + "_Random.scaleZ") -l "スケール Z" uAcg_randScaleZ_fy_placeOnMeshTool;
        popupMenu;

        attrControlGrp  -attribute ($MASH_FY_PLACEONMESHTOOL + "_Random.uniformRandom") -l "均一スケール" -cc "fy_placeOnMeshTool_uniformScaleCheckboxCallback";
        popupMenu;
        attrControlGrp  -attribute ($MASH_FY_PLACEONMESHTOOL + "_Random.absoluteScale") -l "拡大のみ";
        popupMenu;

    // 均一スケール 更新
    fy_placeOnMeshTool_uniformScaleCheckboxCallback;
}

///////////////////////////////////////////////////////
// MASH ネットワークリストを更新
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_refreshMashNetworkList()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    // 対象MASH ネットワークを取得
    string $mashNetworks[] = `fy_placeOnMeshTool_getMashNetworks`;

    // リストの内容を一旦クリア
    textScrollList -e -removeAll uTsl_mashNetwork_fy_placeOnMeshTool;

    string $mashNetwork;

    for($mashNetwork in $mashNetworks)
    {
        // テキストスクロールリストに追加
        textScrollList -e -a $mashNetwork uTsl_mashNetwork_fy_placeOnMeshTool;
    }

    if(stringArrayContains($MASH_FY_PLACEONMESHTOOL, $mashNetworks))
    {
        // 項目を選択
        textScrollList -e -si $MASH_FY_PLACEONMESHTOOL uTsl_mashNetwork_fy_placeOnMeshTool;
    }

    fy_placeOnMeshTool_selectMashNetworkCallback;

}

///////////////////////////////////////////////////////
// インスタンスオブジェクトリストを更新
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_refreshInstancedObjectsList()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    if($MASH_FY_PLACEONMESHTOOL == "")
    {
        return;
    }

    // リストで現在選択しているインデックス
    string $selItems[] = `textScrollList -q -si uTsl_instancedObjects_fy_placeOnMeshTool`;

    // リストの内容を一旦クリア
    textScrollList -e -removeAll uTsl_instancedObjects_fy_placeOnMeshTool;

    // inputHierarchy への接続を取得
    string $instancedObjects[] = `listConnections -s true -d false ($MASH_FY_PLACEONMESHTOOL + "_instancer.inputHierarchy")`;

    string $instancedObject;

    for($instancedObject in $instancedObjects)
    {
        // テキストスクロールリストに追加
        textScrollList -e -a $instancedObject uTsl_instancedObjects_fy_placeOnMeshTool;
    }

    if(`size($selItems)` == 0)
    {
        return;
    }

    string $allItems[] = `textScrollList -q -allItems uTsl_instancedObjects_fy_placeOnMeshTool`;
    string $selItem;

    for($selItem in $selItems)
    {
        if(stringArrayContains($selItem, $allItems))
        {
            // 項目を選択
            textScrollList -e -si $selItem uTsl_instancedObjects_fy_placeOnMeshTool;
        }
    }
}

///////////////////////////////////////////////////////
// ベースメッシュフィールドを更新
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_refreshBaseMeshField()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    if($MASH_FY_PLACEONMESHTOOL == "")
    {
        return;
    }

    string $baseMesh[] = `listConnections -s true -d false -shapes true ($MASH_FY_PLACEONMESHTOOL + "_Distribute.inputMesh")`;

    nameField -e -object $baseMesh[0] uTf_baseMesh_fy_placeOnMeshTool;
}

///////////////////////////////////////////////////////
// 対象コンポーネントリストを更新
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_refreshTargetComponentsList()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    if($MASH_FY_PLACEONMESHTOOL == "")
    {
        return;
    }

    // リストで現在選択しているインデックス
    string $selItems[] = `textScrollList -q -si uTsl_components_fy_placeOnMeshTool`;

    // リストを一旦クリア
    textScrollList -e -removeAll uTsl_components_fy_placeOnMeshTool;

    // sets の名前
    string $setsName = $MASH_FY_PLACEONMESHTOOL + "_sets";

    if(`objExists $setsName` == false)
    {
        return;
    }

    // sets のメンバーを取得
    string $setsMembers[] = `sets -q $setsName`;

    // コンポーネントだけ取得
    $setsMembers = `filterExpand -sm 31 -sm 32 -sm 34 $setsMembers`;

    string $setsMember;

    for($setsMember in $setsMembers)
    {
        textScrollList -e -a $setsMember uTsl_components_fy_placeOnMeshTool;
    }

    string $value = `optionMenuGrp -q -v uOm_distributeMethod_fy_placeOnMeshTool`;

    // リアルタイムで反映されないので
    if(startsWith($value, "指定コンポーネント"))
    {
        fy_placeOnMeshTool_changeDistributeMethod($value);
    }

    if(`size($selItems)` == 0)
    {
        return;
    }

    string $allItems[] = `textScrollList -q -allItems uTsl_components_fy_placeOnMeshTool`;
    string $selItem;

    for($selItem in $selItems)
    {
        if(stringArrayContains($selItem, $allItems))
        {
            // 項目を選択
            textScrollList -e -si $selItem uTsl_components_fy_placeOnMeshTool;
        }
    }
}

///////////////////////////////////////////////////////
// 出現順（idtype） オプションメニューを現在のアトリビュート値に合わせて更新
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_refreshIdtypeOptionMenu()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    if($MASH_FY_PLACEONMESHTOOL == "")
    {
        return;
    }

    // idtype アトリビュートを取得
    int $value = `getAttr ($MASH_FY_PLACEONMESHTOOL + "_Id.idtype")`;

    // 出現順オプションメニューを更新
    switch($value)
    {
        case 1:
            optionMenuGrp -e -v "リスト順" uOm_idtype_fy_placeOnMeshTool;
            attrControlGrp -e -en false uAcg_idSeed_fy_placeOnMeshTool;
            break;

        case 2:
            optionMenuGrp -e -v "ランダム" uOm_idtype_fy_placeOnMeshTool;
            attrControlGrp -e -en true uAcg_idSeed_fy_placeOnMeshTool;
            break;
    }
}

///////////////////////////////////////////////////////
// 配置方法 オプションメニューを現在のアトリビュート値に合わせて更新
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_refreshDistributeMethodOptionMenu()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    if($MASH_FY_PLACEONMESHTOOL == "")
    {
        return;
    }

    // 配置方法 アトリビュートを取得
    int $method = `getAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.meshType")`;

    // flood アトリビュートを取得
    int $flood = `getAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.floodMesh")`;

    // 配置方法オプションメニューを更新
    if( $method == 1 )
    {
        optionMenuGrp -e -v "サーフェス（ランダム）" uOm_distributeMethod_fy_placeOnMeshTool;
    }
    else if( $method == 3 && $flood == false )
    {
        optionMenuGrp -e -v "頂点（ランダム）" uOm_distributeMethod_fy_placeOnMeshTool;
    }
    else if( $method == 2 && $flood == false )
    {
        optionMenuGrp -e -v "頂点（番号順）" uOm_distributeMethod_fy_placeOnMeshTool;
    }
    else if( ($method == 2 || $method == 3) && $flood == true )
    {
        optionMenuGrp -e -v "頂点（全て）" uOm_distributeMethod_fy_placeOnMeshTool;
    }
    else if( $method == 9 && $flood == false )
    {
        optionMenuGrp -e -v "エッジ（ランダム）" uOm_distributeMethod_fy_placeOnMeshTool;
    }
    else if( $method == 8 && $flood == false )
    {
        optionMenuGrp -e -v "エッジ（番号順）" uOm_distributeMethod_fy_placeOnMeshTool;
    }
    else if( ($method == 8 || $method == 9) && $flood == true )
    {
        optionMenuGrp -e -v "エッジ（全て）" uOm_distributeMethod_fy_placeOnMeshTool;
    }
    else if( $method == 5 && $flood == false )
    {
        optionMenuGrp -e -v "フェースの中心（ランダム）" uOm_distributeMethod_fy_placeOnMeshTool;
    }
    else if( $method == 4 && $flood == false )
    {
        optionMenuGrp -e -v "フェースの中心（番号順）" uOm_distributeMethod_fy_placeOnMeshTool;
    }
    else if( ($method == 4 || $method == 5) && $flood == true )
    {
        optionMenuGrp -e -v "フェースの中心（全て）" uOm_distributeMethod_fy_placeOnMeshTool;
    }
    else if( $method == 7 && $flood == false )
    {
        optionMenuGrp -e -v "指定コンポーネント（番号順）" uOm_distributeMethod_fy_placeOnMeshTool;
    }
    else if( $method == 7 && $flood == true )
    {
        optionMenuGrp -e -v "指定コンポーネント（全て）" uOm_distributeMethod_fy_placeOnMeshTool;
    }
    //else if( $method == 6 )
    //{
        //optionMenuGrp -e -v "ボクセル" uOm_distributeMethod_fy_placeOnMeshTool;
    //}

    string $selItem = `optionMenuGrp -q -v uOm_distributeMethod_fy_placeOnMeshTool`;

    rowLayout -e -vis (startsWith($selItem, "指定コンポーネント") == false) uRl_baseMesh_fy_placeOnMeshTool;
    rowLayout -e -vis (startsWith($selItem, "指定コンポーネント") == true) uRl_components_fy_placeOnMeshTool;

    attrControlGrp -e -en ($selItem == "サーフェス（ランダム）") uAcg_areaBasedScatter_fy_placeOnMeshTool;

    attrControlGrp -e -en (endsWith($selItem, "（ランダム）")||endsWith($selItem, "（全て）")) uAcg_distributeSeed_fy_placeOnMeshTool;

    attrControlGrp -e -en (endsWith($selItem, "（全て）")==false) uAcg_numOfPoints_fy_placeOnMeshTool;

}


///////////////////////////////////////////////////////
// インスタンスオブジェクトを追加
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_addInstancedObjects()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    // インスタンスオブジェクトの接続を修正
    fy_placeOnMeshTool_fixInstanceConnections;

    // 選択しているオブジェクト
    string $selNodes[] = `ls -sl -o`;

    string $selNode;

    for($selNode in $selNodes)
    {
        // matrix アトリビュートが存在すれば
        if(`attributeExists "matrix" $selNode`)
        {
            // 現在instancer に接続されているオブジェクトを取得
            string $connections[] = `listConnections -s true -d false ($MASH_FY_PLACEONMESHTOOL + "_instancer.inputHierarchy")`;

            // すでに接続されているか
            if(stringArrayContains($selNode, $connections))
            {
                continue;
            }

            // inputHierarchy 配列アトリビュートのサイズを取得
            int $index = `getAttr -size ($MASH_FY_PLACEONMESHTOOL + "_instancer.inputHierarchy")`;

            // アトリビュート接続
            connectAttr -f ($selNode + ".matrix") ($MASH_FY_PLACEONMESHTOOL + "_instancer.inputHierarchy[" + $index + "]");
        }
    }
}

///////////////////////////////////////////////////////
// インスタンスオブジェクトを削除
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_removeInstancedObjects()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    // リストで選択しているオブジェクト
    string $selItems[] = `textScrollList -q -si uTsl_instancedObjects_fy_placeOnMeshTool`;

    string $selItem;

    for($selItem in $selItems)
    {
        string $connections[] = `listConnections -s false -d true -p true -type "instancer" ($selItem + ".matrix")`;

        string $connection;

        for($connection in $connections)
        {
            if(startsWith($connection, ($MASH_FY_PLACEONMESHTOOL + "_instancer")))
            {
                // アトリビュート切断
                disconnectAttr ($selItem + ".matrix") $connection;
            }
        }
    }

    // インスタンスオブジェクトの接続を修正
    fy_placeOnMeshTool_fixInstanceConnections;
}

///////////////////////////////////////////////////////
// インスタンスオブジェクトの順番を変更（上へ）
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_moveUpInstancedObjects()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    // インスタンスオブジェクトの接続を修正
    fy_placeOnMeshTool_fixInstanceConnections;

    // リストで選択している項目のインデックス
    int $indexList[] = `textScrollList -q -sii uTsl_instancedObjects_fy_placeOnMeshTool`;

    int $index;

    // 最上位インデックス
    int $limitIndex = 0;

    for($index in $indexList)
    {
        $index -= 1;

        // 最上位に来たら、最上位インデックスを増やす
        if($index == $limitIndex)
        {
            $limitIndex += 1;

            continue;
        }

        // 1つ上の接続を取得
        string $upperConnection[] = `listConnections -s true -d false -p true ($MASH_FY_PLACEONMESHTOOL + "_instancer.inputHierarchy[" + ($index - 1) + "]")`;

        // 現在の接続を取得
        string $currentConnection[] = `listConnections -s true -d false -p true ($MASH_FY_PLACEONMESHTOOL + "_instancer.inputHierarchy[" + $index + "]")`;

        // 1つ上に接続
        connectAttr -f $currentConnection[0] ($MASH_FY_PLACEONMESHTOOL + "_instancer.inputHierarchy[" + ($index - 1) + "]");

        // 1つ上に接続されていたものを選択していた位置に接続
        connectAttr -f $upperConnection[0] ($MASH_FY_PLACEONMESHTOOL + "_instancer.inputHierarchy[" + $index + "]");
    }
}

///////////////////////////////////////////////////////
// インスタンスオブジェクトの順番を変更（下へ）
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_moveDownInstancedObjects()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    // インスタンスオブジェクトの接続を修正
    fy_placeOnMeshTool_fixInstanceConnections;

    // リストで選択している項目のインデックス
    int $indexList[] = `textScrollList -q -sii uTsl_instancedObjects_fy_placeOnMeshTool`;

    int $reversedIndexList[];
 	int $size = `size $indexList`;
 	int $i;

 	// 配列の順序を反転
 	for($i = 0; $i < $size; $i++)
 	{
 	    $reversedIndexList[( $size - 1 - $i )] = $indexList[$i];
 	}

    // 接続数
    int $hierarchyCount = `getAttr ($MASH_FY_PLACEONMESHTOOL + "_instancer.hierarchyCount")`;

    int $index;

    // 最下位インデックス
    int $limitIndex = $hierarchyCount - 1;

    for($index in $reversedIndexList)
    {
        $index -= 1;

        // 最下位に来たら最下位インデックスを減らす
        if($index == $limitIndex)
        {
            $limitIndex -= 1;

            continue;
        }

        // 現在の接続を取得
        string $currentConnection[] = `listConnections -s true -d false -p true ($MASH_FY_PLACEONMESHTOOL + "_instancer.inputHierarchy[" + $index + "]")`;

        // 1つ下の接続を取得
        string $lowerConnection[] = `listConnections -s true -d false -p true ($MASH_FY_PLACEONMESHTOOL + "_instancer.inputHierarchy[" + ($index + 1) + "]")`;

        // 1つ下に接続
        connectAttr -f $currentConnection[0] ($MASH_FY_PLACEONMESHTOOL + "_instancer.inputHierarchy[" + ($index + 1) + "]");

        // 1つ下に接続されていたものを選択していた位置に接続
        connectAttr -f $lowerConnection[0] ($MASH_FY_PLACEONMESHTOOL + "_instancer.inputHierarchy[" + $index + "]");

    }
}

///////////////////////////////////////////////////////
// インスタンスオブジェクトの接続を修正（inputHierarchy のインデックスが飛ぶのを修正する）
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_fixInstanceConnections()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    // 現在instancer に接続されているオブジェクトのmatrix プラグを取得
    string $objects[] = `listConnections -s true -d false -p true ($MASH_FY_PLACEONMESHTOOL + "_instancer.inputHierarchy")`;

    int $index;

    for($index = 0; $index < `size($objects)`; $index += 1)
    {
        // 接続されるべきinputHierarchy プラグ
        string $inputHierarchy = $MASH_FY_PLACEONMESHTOOL + "_instancer.inputHierarchy[" + $index + "]";

        // 接続されるべきinputHierarchy プラグの現在の接続を取得
        string $connections[] = `listConnections -s true -d false -p true $inputHierarchy`;

        // 接続が正しくなければ
        if($objects[$index] != $connections[0])
        {
            string $distination[] = `listConnections -s false -d true -p true $objects[$index]`;

            // 現在の接続を解除
            disconnectAttr $objects[$index] $distination;

            // 正しく再接続
            connectAttr -f $objects[$index] $inputHierarchy;
        }
    }
}

///////////////////////////////////////////////////////
// ID タイプをセット
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_changeIdType(string $type)
{
    global string $MASH_FY_PLACEONMESHTOOL;

    switch($type)
    {
        case "リスト順":
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Id.idtype") 1;
            attrControlGrp -e -en false uAcg_idSeed_fy_placeOnMeshTool;
            break;

        case "ランダム":
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Id.idtype") 2;
            attrControlGrp -e -en true uAcg_idSeed_fy_placeOnMeshTool;
            break;
    }
}

///////////////////////////////////////////////////////
// ベースメッシュをセット
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_setBaseMesh()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    // 現在の選択を取得
    string $sel[] = `ls -sl -o`;

    // メッシュノードを取得
    string $mesh[] = `listRelatives -shapes -type "mesh" -noIntermediate $sel`;

    connectAttr -f ($mesh[0] + ".worldMesh[0]") ($MASH_FY_PLACEONMESHTOOL + "_Distribute.inputMesh");
}

///////////////////////////////////////////////////////
// 対象コンポーネントを追加
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_addTargetComponents()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    // 現在の選択コンポーネントを取得
    string $selComponents[] = `filterExpand -sm 31 -sm 32 -sm 34`;

    string $setsName = $MASH_FY_PLACEONMESHTOOL + "_sets";

    sets -add $setsName $selComponents;

    // 対象コンポーネントリストを更新
    fy_placeOnMeshTool_refreshTargetComponentsList;
}

///////////////////////////////////////////////////////
// 対象コンポーネントを削除
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_removeTargetComponents()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    // リストで選択しているコンポーネントを取得
    string $selComponents[] = `textScrollList -q -si uTsl_components_fy_placeOnMeshTool`;

    string $setsName = $MASH_FY_PLACEONMESHTOOL + "_sets";

    sets -rm $setsName $selComponents;

    // 対象コンポーネントリストを更新
    fy_placeOnMeshTool_refreshTargetComponentsList;
}

///////////////////////////////////////////////////////
// 対象コンポーネントを削除
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_selectTargetComponents()
{
    //global string $MASH_FY_PLACEONMESHTOOL;

    // リストで選択しているコンポーネントを取得
    string $selComponents[] = `textScrollList -q -si uTsl_components_fy_placeOnMeshTool`;

    //string $setsName = $MASH_FY_PLACEONMESHTOOL + "_sets";

    select -r $selComponents;

    //sets -rm $setsName $selComponents;

    // 対象コンポーネントリストを更新
    //fy_placeOnMeshTool_refreshTargetComponentsList;
}

///////////////////////////////////////////////////////
// 配置方法を変更
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_changeDistributeMethod(string $method)
{
    global string $MASH_FY_PLACEONMESHTOOL;

    switch($method)
    {
        case "サーフェス（ランダム）":
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.meshType") 1;
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.floodMesh") 0;
            break;

        case "頂点（ランダム）":
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.meshType") 3;
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.floodMesh") 0;
            break;

        case "頂点（番号順）":
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.meshType") 2;
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.floodMesh") 0;
            break;

        case "頂点（全て）":
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.meshType") 3;
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.floodMesh") 1;
            break;

        case "エッジ（ランダム）":
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.meshType") 9;
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.floodMesh") 0;
            break;

        case "エッジ（番号順）":
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.meshType") 8;
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.floodMesh") 0;
            break;

        case "エッジ（全て）":
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.meshType") 9;
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.floodMesh") 1;
            break;

        case "フェースの中心（ランダム）":
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.meshType") 5;
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.floodMesh") 0;
            break;

        case "フェースの中心（番号順）":
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.meshType") 4;
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.floodMesh") 0;
            break;

        case "フェースの中心（全て）":
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.meshType") 5;
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.floodMesh") 1;
            break;

        case "指定コンポーネント（番号順）":
            // sets をコネクト
            fy_placeOnMeshTool_createSets;

            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.meshType") 7;
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.floodMesh") 0;
            break;

        case "指定コンポーネント（全て）":
            // sets をコネクト
            fy_placeOnMeshTool_createSets;

            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.meshType") 7;
            setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.floodMesh") 1;
            break;

        //case "ボクセル":
            //setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.meshType") 6;
            //setAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.floodMesh") 0;
            //break;
    }

    rowLayout -e -vis (startsWith($method, "指定コンポーネント") == false) uRl_baseMesh_fy_placeOnMeshTool;
    rowLayout -e -vis (startsWith($method, "指定コンポーネント") == true) uRl_components_fy_placeOnMeshTool;

    attrControlGrp -e -en ($method == "サーフェス（ランダム）") uAcg_areaBasedScatter_fy_placeOnMeshTool;

    attrControlGrp -e -en (endsWith($method, "（ランダム）")||endsWith($method, "（全て）")) uAcg_distributeSeed_fy_placeOnMeshTool;

    attrControlGrp -e -en (endsWith($method, "（全て）")==false) uAcg_numOfPoints_fy_placeOnMeshTool;
}

///////////////////////////////////////////////////////
// sets を接続
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_createSets()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    string $setsName = $MASH_FY_PLACEONMESHTOOL + "_sets";

    // sets が無ければ作成して接続
    if(`objExists $setsName` == false)
    {
        sets -empty -name $setsName;

        // ノードロック
        lockNode -l true $setsName;

        connectAttr -f ($setsName + ".message") ($MASH_FY_PLACEONMESHTOOL + "_Distribute.selectionSetMessage");
    }
}

///////////////////////////////////////////////////////
// ID カウントをインスタンス数に合わせる
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_setIdCount()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    int $hierarchyCount = `getAttr ($MASH_FY_PLACEONMESHTOOL + "_instancer.hierarchyCount")`;

    if($hierarchyCount == 0)
    {
        $hierarchyCount = 1;
    }

    setAttr ($MASH_FY_PLACEONMESHTOOL + "_Id.numObjects") $hierarchyCount;
}

///////////////////////////////////////////////////////
// アップベクトルを指定チェックボックス コールバックコマンド
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_useUpVectorCheckboxCallback()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    if($MASH_FY_PLACEONMESHTOOL == "")
    {
        return;
    }

    int $useUpVector = `getAttr ($MASH_FY_PLACEONMESHTOOL + "_Distribute.useUpVector")`;

    attrFieldGrp -e -en $useUpVector uAcg_upVector_fy_placeOnMeshTool;
}

///////////////////////////////////////////////////////
// 均一スケールチェックボックス コールバックコマンド
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_uniformScaleCheckboxCallback()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    if($MASH_FY_PLACEONMESHTOOL == "")
    {
        return;
    }

    int $uniformScale = `getAttr ($MASH_FY_PLACEONMESHTOOL + "_Random.uniformRandom")`;

    attrControlGrp  -e -en ($uniformScale == false) uAcg_randScaleY_fy_placeOnMeshTool;
    attrControlGrp  -e -en ($uniformScale == false) uAcg_randScaleZ_fy_placeOnMeshTool;
}

///////////////////////////////////////////////////////
// MASH ネットワーク選択コールバックコマンド
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_selectMashNetworkCallback()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    string $selMashNetwork[] = `textScrollList -q -si uTsl_mashNetwork_fy_placeOnMeshTool`;

    $MASH_FY_PLACEONMESHTOOL = $selMashNetwork[0];

    fy_placeOnMeshTool_createInstanceUI;
    fy_placeOnMeshTool_createDistributeUI;
    fy_placeOnMeshTool_createOffsetUI;
    fy_placeOnMeshTool_createRandomUI;

    // 有効・無効チェックボックス更新
    if(`size($selMashNetwork)` == 0)
    {
        checkBox -e -en false uCb_enableMash_fy_placeOnMeshTool;
    }
    else
    {
        int $enabled = `getAttr ($selMashNetwork[0] + "_Distribute.enable")`;

        checkBox -e -en true -v $enabled uCb_enableMash_fy_placeOnMeshTool;

        fy_placeOnMeshTool_enableUI($enabled);
    }

    // フレームレイアウトのラベル・コントロール名リスト
    string $labelControlNames[] =
    {
        "インスタンス設定 - ", "uFl_instance_fy_placeOnMeshTool",
        "配置設定 - ", "uFl_distribute_fy_placeOnMeshTool",
        "オフセット設定 - ", "uFl_offset_fy_placeOnMeshTool",
        "ランダム設定 - ", "uFl_random_fy_placeOnMeshTool"
    };

    int $i;

    // フレームレイアウトのラベル名を変更
    for($i=0; $i<`size($labelControlNames)`; $i+=2)
    {
        frameLayout -e -l ($labelControlNames[$i] + $MASH_FY_PLACEONMESHTOOL) $labelControlNames[$i+1];
    }
}

///////////////////////////////////////////////////////
// MASH ネットワークをインポート
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_importMashNetwork()
{
    file
        -import
        -ignoreVersion
        -type "mayaAscii"
        -mergeNamespacesOnClash false
        -renamingPrefix "imported"
        -options "v=0;"
        -pr
        "Z:/mtk/tools/maya/share/presets/mashPresets/placeOnMesh.ma";

    // warning 防止用のダミーを削除
    delete "placeOnMesh_dummyCube";

    global string $MASH_FY_PLACEONMESHTOOL;

    $MASH_FY_PLACEONMESHTOOL = fy_placeOnMeshTool_renameMashNetworkCmd("placeOnMesh", "placeOnMesh1");

    // 削除した場合に リストを更新するスクリプトジョブを作成
    scriptJob
        -parent uWnd_fy_placeOnMeshTool
        -nodeDeleted $MASH_FY_PLACEONMESHTOOL "fy_placeOnMeshTool_refreshMashNetworkList"
        ;

    fy_placeOnMeshTool_refreshMashNetworkList;
}

///////////////////////////////////////////////////////
// MASH ネットワークをリネーム
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_renameMashNetwork()
{
    string $selMashNetwork[] = `textScrollList -q -si uTsl_mashNetwork_fy_placeOnMeshTool`;

    if(`size($selMashNetwork)` == 0)
    {
        return;
    }

    global string $MASH_FY_PLACEONMESHTOOL;

    //移動値入力ダイアログ
    string $resault =
    `promptDialog
        -title "名前の変更"
        -message "名前を入力してください。"
        -style "text"
        -text $selMashNetwork[0]
        -button "リネーム"
        -button "キャンセル"
        -defaultButton "リネーム"
        -cancelButton "キャンセル"
        -dismissString "キャンセル"`;

    if($resault == "リネーム")
    {
        string $inputName = `promptDialog -q -text`;

        $MASH_FY_PLACEONMESHTOOL = fy_placeOnMeshTool_renameMashNetworkCmd($selMashNetwork[0], $inputName);
    }
}

///////////////////////////////////////////////////////
// MASH ネットワークをリネーム実行
///////////////////////////////////////////////////////
global proc string fy_placeOnMeshTool_renameMashNetworkCmd(string $oldName, string $newName)
{
    // ノードロックを解除
    lockNode -l false $oldName;

    // リネーム
    $newName = `rename $oldName $newName`;

    // ノードロック
    lockNode -l true $newName;

    // sets が存在すればリネーム
    string $setsName = $oldName + "_sets";

    if(`objExists $setsName`)
    {
        // ノードロックを解除
        lockNode -l false $setsName;

        $setsName = `rename $setsName ($newName + "_sets")`;

        // ノードロック
        lockNode -l true $setsName;
    }

    return $newName;
}

///////////////////////////////////////////////////////
// MASH ネットワークを削除
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_deleteMashNetwork()
{
    string $selMashNetwork[] = `textScrollList -q -si uTsl_mashNetwork_fy_placeOnMeshTool`;

    if(`size($selMashNetwork)` == 0)
    {
        return;
    }

    string $result =
    `confirmDialog
        -title "Place On Mesh Tool"
        -icn "question"
        -message ($selMashNetwork[0] + " を削除しますか？")
        -button "削除"
        -button "キャンセル"
        -defaultButton "削除"
        -cancelButton "キャンセル"
        -dismissString "キャンセル"`
        ;

    // キャンセルしたら終了
    if ($result == "キャンセル")
    {
        return;
    }

    // ノードロックを解除
    lockNode -l false $selMashNetwork;

    delete $selMashNetwork;

    string $setsName = $selMashNetwork[0] + "_sets";

    // sets が存在すれば削除
    if(`objExists $setsName`)
    {
        // ノードロックを解除
        lockNode -l false $setsName;

        delete $setsName;
    }

}

///////////////////////////////////////////////////////
// MASH ネットワークを有効・無効
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_enableMashNetwork(int $enable)
{
    string $selMashNetwork[] = `textScrollList -q -si uTsl_mashNetwork_fy_placeOnMeshTool`;
    int $selIndex[] = `textScrollList -q -sii uTsl_mashNetwork_fy_placeOnMeshTool`;

    if(`size($selMashNetwork)` == 0)
    {
        return;
    }

    setAttr ($selMashNetwork[0] + "_Distribute.enable") $enable;
}

///////////////////////////////////////////////////////
// 設定UI を有効・無効
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_enableUI(int $enable)
{
    string $layouts[] =
    {
        "uCl_instance_fy_placeOnMeshTool",
        "uCl_distribute_fy_placeOnMeshTool",
        "uCl_offset_fy_placeOnMeshTool",
        "uCl_random_fy_placeOnMeshTool"
    };

    string $layout;

    for($layout in $layouts)
    {
        columnLayout -e -en $enable $layout;
    }
}

///////////////////////////////////////////////////////
// MASH ネットワークを取得
///////////////////////////////////////////////////////
global proc string[] fy_placeOnMeshTool_getMashNetworks()
{
    string $mashNetworks[];
    string $resultMashNetworks[];

    $mashNetworks = `ls -type "MASH_Waiter"`;

    string $mashNetWork;

    for($mashNetwork in $mashNetworks)
    {
        if(`attributeExists "fyPlaceOnMesh" $mashNetwork`)
        {
            $resultMashNetworks[`size($resultMashNetworks)`] = $mashNetwork;
        }
    }

    return $resultMashNetworks;
}

///////////////////////////////////////////////////////
// インスタンサーを実体化
///////////////////////////////////////////////////////
global proc fy_placeOnMeshTool_bakeInstancerToObjects()
{
    global string $MASH_FY_PLACEONMESHTOOL;

    if(`objExists ($MASH_FY_PLACEONMESHTOOL + "_instancer")` == false)
    {
        return;
    }

    select -r ($MASH_FY_PLACEONMESHTOOL + "_instancer");

    // インスタンサーベイクGUI を起動
    MASHBakeGUI;

    // インスタンサーベイクGUI を非表示
    window -e -vis false "mashBakeStill";

    // 現在のフレームを実体化
    MASHBakeStillMEL;

    // インスタンサーベイクGUI を削除
    deleteUI "mashBakeStill";
}

//fy_placeOnMeshTool;



