//===============================================
//
// 発注書作成
//
// Fujita Yukihiro
//
//===============================================

global proc mtk_createOrderForm()
{
    // すでにウィンドウが出ていたら削除
    if (`window -exists uWnd_mtk_createOrderForm` == 1)
    {
        deleteUI uWnd_mtk_createOrderForm;
    }

    //プリファレンスに値が無ければデフォルト値を設定
    if (`optionVar -ex "ov_orderer_mtk_createOrderForm"` == 0)
    {
        optionVar -sv "ov_orderer_mtk_createOrderForm" "";
    }
    if (`optionVar -ex "ov_exportFolderPath_mtk_createOrderForm"` == 0)
    {
        optionVar -sv "ov_exportFolderPath_mtk_createOrderForm" "";
    }

    window
        -title "発注書作成"
        -resizeToFitChildren on
        -sizeable on
        -toolbox on
        -maximizeButton off
        -mb on
        uWnd_mtk_createOrderForm;

        frameLayout -lv off -mw 8 -mh 8 uFrl_main_mtk_createOrderForm;

            flowLayout -cs 16;

                iconTextButton
                    -style "iconAndTextHorizontal"
                    // -ann "リストを更新"
                    -l "リストを更新"
                    -image "refresh.png"
                    -c "mtk_createOrderForm_updateList"
                ;

                iconTextButton
                    -style "iconAndTextHorizontal"
                    // -ann "発注書作成ツールのヘルプ"
                    -l "ヘルプ"
                    -image "help.png"
                    -c "python(\"import webbrowser\\nwebbrowser.open('https://wisdom.cygames.jp/pages/viewpage.action?pageId=371574818')\")"
                ;

                setParent ..;

            separator -st "in";

            // フォームレイアウト
            string $form = `formLayout`;

                // 共通設定項目作成
                $layout1 = mtk_createOrderForm_createCommonList($form);

                setParent $form;

                $sep = `separator -st "none" -h 16`;

                // アセット設定リスト作成
                $layout2 = mtk_createOrderForm_createAssetList($form);

                setParent $form;

            formLayout -e
                -attachForm $layout1 "left" 0
                -attachForm $layout1 "right" 0
                -attachForm $layout1 "top" 0
                -attachNone $layout1 "bottom"

                -attachForm    $sep "left" 0
                -attachForm    $sep "right" 0
                -attachControl $sep "top" 0 $layout1
                -attachNone $sep "bottom"

                -attachForm $layout2 "left" 0
                -attachForm $layout2 "right" 0
                -attachControl $layout2 "top" 0 $sep
                -attachNone $layout2 "bottom"

                $form;

            setParent "uFrl_main_mtk_createOrderForm";

            separator -st "in";

            rowLayout -nc 8 -adj 2;

                text -l "  Excel ファイル出力フォルダ :";

                textField
                    -tx `optionVar -q "ov_exportFolderPath_mtk_createOrderForm"`
                    -cc "mtk_createOrderForm_changeExportFolderCallback"
                    uTf_exportFolderPath_mtk_createOrderForm;

                button -l "..." -ann "Excel 出力フォルダを指定" -h 20 -c "mtk_createOrderForm_setExportFolderCallback";

                symbolButton -i "fileOpen.png" -ann "Excel 出力フォルダをエクスプローラで開く" -c "mtk_createOrderForm_openExportFolder";

                separator -horizontal off -st "in" -w 16 -h 20;

                button -l "Excel ファイル作成" -w 250 -bgc 0.5 0.6 0.5 -c "mtk_createOrderForm_createExcelFiles";

    setFocus $sep;

    // スクリプトジョブ設定（シーンオープン時）
    scriptJob -event "SceneOpened" "mtk_createOrderForm_updateList" -parent uWnd_mtk_createOrderForm;

    showWindow;
}

///////////////////////////////////////////////////////
// 設定リスト更新
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_updateList()
{
    mtk_createOrderForm_createCommonList("");
    mtk_createOrderForm_createAssetList("");
}

///////////////////////////////////////////////////////
// 共通の設定リスト作成
///////////////////////////////////////////////////////
global proc string mtk_createOrderForm_createCommonList(string $parent)
{
    // ラベルのリスト
    string $labelsAnnotations[] = {
        " Orderer ", "発注者",
        "\n", "",
        " Scene path ", "作業シーンのパス"
    };

    // レイアウトのカラム数
    int $numOfCulumns = `size($labelsAnnotations)` / 2;

    // レイアウトが存在すれば子を全て削除
    if(`layout -q -exists "uRcl_common_mtk_createOrderForm"`)
    {
        string $childList[] = `rowColumnLayout -q -ca uRcl_common_mtk_createOrderForm`;

        string $child;

        for($child in $childList)
        {
            deleteUI $child;
        }

        setParent "uRcl_common_mtk_createOrderForm";
    }
    // 存在しなければレイアウト作成
    else
    {
        rowColumnLayout
            -p $parent
            -nc $numOfCulumns
            -columnAttach 1 "both" 1
            -adjustableColumn $numOfCulumns
            -rowSpacing 1 4
            uRcl_common_mtk_createOrderForm
            ;
    }

    // ラベルカラム作成
    mtk_createOrderForm_createLabelColumns($labelsAnnotations, "uRcl_common_mtk_createOrderForm");

    // 発注者名
    textField
        -tx `optionVar -q "ov_orderer_mtk_createOrderForm"`
        -ann $labelsAnnotations[1]
        -cc "mtk_createOrderForm_changeOrdererCallback"
        uTf_orderer_mtk_createOrderForm;

    // スペーサー
    separator -vis off;

    // シーンパスを取得
    string $scenePath = `python("from mtk.utils import getCurrentSceneFilePath; getCurrentSceneFilePath()")`;
    // string $scenePath = `file -q -sceneName`;
    $scenePath = substituteAllString(`tolower $scenePath`, "z:/", "");
    $scenePath = substituteAllString($scenePath, "/", "\\");

    // シーンパス
    textField -tx $scenePath -ann $labelsAnnotations[3] -ed off uTf_scenePath_mtk_createOrderForm;

    return "uRcl_common_mtk_createOrderForm";
}

///////////////////////////////////////////////////////
// 発注者名を変更した時のコールバック
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_changeOrdererCallback()
{
    string $orderer = `textField -q -tx uTf_orderer_mtk_createOrderForm`;

    optionVar -sv "ov_orderer_mtk_createOrderForm" $orderer;
}

///////////////////////////////////////////////////////
// Excel 出力フォルダを変更した時のコールバック
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_changeExportFolderCallback()
{
    string $path = mtk_createOrderForm_getExportFolderPath();

    optionVar -sv "ov_exportFolderPath_mtk_createOrderForm" $path;
}

///////////////////////////////////////////////////////
// Excel 出力フォルダ指定ボタンのコールバック
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_setExportFolderCallback()
{
    string $currentPath = mtk_createOrderForm_getExportFolderPath();

    string $selPath[] = `fileDialog2 -ds 2 -cap "Excel 出力フォルダを選択" -fm 3 -okc "選択" -dir $currentPath`;

    if (size($selPath) != 0)
    {
        textField -e -fileName $selPath[0] uTf_exportFolderPath_mtk_createOrderForm;

        optionVar -sv "ov_exportFolderPath_mtk_createOrderForm" $selPath[0];
    }
}

///////////////////////////////////////////////////////
// アセット毎の設定リスト作成
///////////////////////////////////////////////////////
global proc string mtk_createOrderForm_createAssetList(string $parent)
{
    global string $gCheckBoxList[];
    global string $gAssetNameTextList[];
    global string $gPolygonCountIntFieldList[];
    global string $gTextureResolutionOptionMenuList[];
    global string $gPhysicalMaterialTextList[];
    global string $gPhysicalMaterialButtonList[];
    global string $gCollisionTextList[];
    global string $gCollisionButtonList[];
    global string $gLodOptionMenuList[];
    global string $gParentMaterialTextList[];
    global string $gParentMaterialButtonList[];
    global string $gShaderOptionMenuList[];
    global string $gNormalMapTypeOptionMenuList[];

    clear $gCheckBoxList;
    clear $gAssetNameTextList;
    clear $gPolygonCountIntFieldList;
    clear $gTextureResolutionOptionMenuList;
    clear $gPhysicalMaterialTextList;
    clear $gPhysicalMaterialButtonList;
    clear $gCollisionTextList;
    clear $gCollisionButtonList;
    clear $gLodOptionMenuList;
    clear $gParentMaterialTextList;
    clear $gParentMaterialButtonList;
    clear $gShaderOptionMenuList;
    clear $gNormalMapTypeOptionMenuList;

    // ラベルのリスト
    string $labelsAnnotations[] = {
        // "", "",
        "Asset name", "アセット名",
        "Polygon\ncount", "ポリゴン数",
        "Texture\n resolution ", "テクスチャ解像度",
        "Physical\n material ", "物理マテリアル",
        " Collision ", "コリジョン",
        "LOD", "最大LOD",
        " Parent material ", "親マテリアル",
        "Shader", "シェーダ",
        " Normal map \ntype", "ノーマルマップの種類"
    };

    // 解像度リスト
    string $resolutions[] = {"128", "256", "512", "1024", "2048", "4096"};

    // 物理マテリアルリスト
    string $physicalMaterials[] = mtk_createOrderForm_getPhysicalMaterialList();

    // コリジョン定義名リスト
    string $collisions[] = mtk_createOrderForm_getCollisionList();

    // LOD レベルリスト
    string $lods[] = {"LOD0", "LOD1", "LOD2", "LOD3", "LOD4", "LOD5", "LOD6", "LOD7"};

    // マスターマテリアル名リスト
    string $masterMaterials[] = mtk_createOrderForm_getMtlList();

    // シェーダリスト
    string $shaders[] = mtk_createOrderForm_getShaderList();

    // シェーダ名リスト
    string $shader_names[];

    // シェーダ説明リスト
    string $shader_descriptions[];

    int $index;

    for($index = 0; $index < `size($shaders)`; $index += 2)
    {
        $shader_names[$index / 2] = $shaders[$index];
        $shader_descriptions[$index / 2] = $shaders[$index + 1];
    }

    // ノーマルマップの種類リスト
    string $normalMapTypes[] = {"rno", "osn"};

    // レイアウトのカラム数
    int $numOfCulumns = `size($labelsAnnotations)` / 2;

    // レイアウトが存在すれば子を全て削除
    if(`layout -q -exists "uRcl_asset_mtk_createOrderForm"`)
    {
        string $childList[] = `rowColumnLayout -q -ca uRcl_asset_mtk_createOrderForm`;

        string $child;

        for($child in $childList)
        {
            deleteUI $child;
        }

        setParent "uRcl_asset_mtk_createOrderForm";
    }
    // 存在しなければレイアウト作成
    else
    {
        rowColumnLayout
            -p $parent
            -nc $numOfCulumns
            -columnAttach 1 "both" 1
            -adjustableColumn $numOfCulumns
            -rowSpacing 1 4
            -cw $numOfCulumns 80
            uRcl_asset_mtk_createOrderForm
            ;
    }

    // シーンに存在するアセット名を取得
    string $assetNames[] = mtk_createOrderForm_getAssetNames();

    // シーンにアセットが存在しなければ終了
    if(`size($assetNames)` == 0)
    {
        text -l "";
        text -l "  対象アセットがありません。";

        return "uRcl_asset_mtk_createOrderForm";
    }

    // 一括設定用のラベル
    string $separatorLabel = "↑";
    string $applyToAllLabel = "一括変更";

    // アセット数が複数の場合は一括設定用の項目を追加
    if(`size($assetNames)` >= 2)
    {
        stringArrayInsertAtIndex(`size($assetNames)`, $assetNames, $separatorLabel);
        stringArrayInsertAtIndex(`size($assetNames)`, $assetNames, $applyToAllLabel);
    }

    // ラベルカラム作成
    mtk_createOrderForm_createLabelColumns($labelsAnnotations, "uRcl_asset_mtk_createOrderForm");

    string $assetName;

    string $uiItem;

    $index = 0;

    for($assetName in $assetNames)
    {
        // セパレータ用のラベルの場合
        if($assetName == $separatorLabel)
        {
            int $i;

            for($i = 0; $i < $numOfCulumns ; $i++)
            {
                if($i == 0)
                {
                    rowLayout -nc 1;
                        text -l $separatorLabel;
                        setParent..;
                }
                else
                {
                    text -l $separatorLabel;
                }
            }

            continue;
        }

        // チェックボックスをオンにした時のコマンド
        string $onCmd = "mtk_createOrderForm_assetNameCheckBoxChangedCallback(1," + $index + ")";

        // チェックボックスをオフにした時のコマンド
        string $offCmd = "mtk_createOrderForm_assetNameCheckBoxChangedCallback(0," + $index + ")";

        rowLayout -nc 2;

            // 出力チェックボックス
            $uiItem = `checkBox -l ":" -v on -onc $onCmd -ofc $offCmd`;

            // UI リストに追加
            stringArrayInsertAtIndex($index, $gCheckBoxList, $uiItem);

            // アセット名ラベル
            $uiItem = `text -l $assetName -ann $labelsAnnotations[1]`;

            // UI リストに追加
            stringArrayInsertAtIndex($index, $gAssetNameTextList, $uiItem);

            setParent ..;

        // ポリゴン数
        rowLayout -nc 1;

            // ポリゴン数を変更した時のコールバックコマンド
            string $cmd = "mtk_createOrderForm_polygonCountChangedCallback(" + $index + ")";

            // 入力フィールド作成
            $uiItem = `intField -ann $labelsAnnotations[3] -cc $cmd`;

            // 値を設定
            intField -e -v `mtk_createOrderForm_getNumOfTriangles($assetName)` $uiItem;

            // UI リストに追加
            stringArrayInsertAtIndex($index, $gPolygonCountIntFieldList, $uiItem);

            setParent..;

        // テクスチャ解像度
        rowLayout -nc 1;

            // テクスチャ解像度を変更した時のコールバックコマンド
            $cmd = "mtk_createOrderForm_textureResolutionChangedCallback(" + $index + ")";

            // オプションメニュー作成
            $uiItem = `optionMenu -ann $labelsAnnotations[5] -cc $cmd`;

            // メニュー項目作成
            mtk_createOrderForm_createOptionMenuItems($resolutions, {}, `mtk_createOrderForm_getTextureResolution($assetName)`, $uiItem);

            // UI リストに追加
            stringArrayInsertAtIndex($index, $gTextureResolutionOptionMenuList, $uiItem);

            setParent..;

        // 物理マテリアル
        rowLayout -nc 4 -adj 2 -cal 2 "left";

            separator -vis off;

            // テキストラベル作成
            $uiItem = `text -l "None" -ann $labelsAnnotations[7]`;

            // UI リストに追加
            stringArrayInsertAtIndex($index, $gPhysicalMaterialTextList, $uiItem);

            separator -vis off;

            // ボタン作成
            $uiItem = `button -l "..." -ann "物理マテリアルを選択" -w 16 -h 16`;

            // ポップアップメニュー作成
            string $popupMenu = `popupMenu -button 1`;

            // メニュー項目作成
            mtk_createOrderForm_createPopupMenuItems($physicalMaterials, {0}, $gPhysicalMaterialTextList[$index], $popupMenu, 0);

            // UI リストに追加
            stringArrayInsertAtIndex($index, $gPhysicalMaterialButtonList, $uiItem);

            setParent..;

        // コリジョン
        rowLayout -nc 4 -adj 2 -cal 2 "left";

            separator -vis off;

            // テキストラベル作成
            $uiItem = `text -l "col_character\ncol_camera" -ann $labelsAnnotations[9]`;

            // UI リストに追加
            stringArrayInsertAtIndex($index, $gCollisionTextList, $uiItem);

            separator -vis off;

            // ボタン作成
            $uiItem = `button -l "..." -ann "コリジョンを選択" -w 16 -h 16`;

            // ポップアップメニュー作成
            $popupMenu = `popupMenu -button 1`;

            // メニュー項目作成
            mtk_createOrderForm_createPopupMenuItems($collisions, {2, 4}, $gCollisionTextList[$index], $popupMenu, 1);

            // UI リストに追加
            stringArrayInsertAtIndex($index, $gCollisionButtonList, $uiItem);

            setParent ..;

        // LOD
        rowLayout -nc 1;

            // LOD を変更した時のコールバックコマンド
            $cmd = "mtk_createOrderForm_LodChangedCallback(" + $index + ")";

            // オプションメニュー作成
            $uiItem = `optionMenu -ann $labelsAnnotations[11] -cc $cmd`;

            // メニュー項目作成
            mtk_createOrderForm_createOptionMenuItems($lods, {}, 4, $uiItem);

            // UI リストに追加
            stringArrayInsertAtIndex($index, $gLodOptionMenuList, $uiItem);

            setParent..;

        // 親マテリアル
        rowLayout -nc 4 -adj 2 -cal 2 "left";

            separator -vis off;

            // テキストラベル作成
            $uiItem = `text -l "None" -ann $labelsAnnotations[13]`;

            // UI リストに追加
            stringArrayInsertAtIndex($index, $gParentMaterialTextList, $uiItem);

            separator -vis off;

            // ボタン作成
            $uiItem = `button -l "..." -ann "親マテリアルを選択" -w 16 -h 16`;

            // ポップアップメニュー作成
            $popupMenu = `popupMenu -button 1`;

            // メニュー項目作成
            mtk_createOrderForm_createPopupMenuItems($masterMaterials, {0}, $gParentMaterialTextList[$index], $popupMenu, 2);

            // UI リストに追加
            stringArrayInsertAtIndex($index, $gParentMaterialButtonList, $uiItem);

            setParent ..;

        // シェーダ
        rowLayout -nc 1 -adj 1;

            // シェーダを変更した時のコールバックコマンド
            $cmd = "mtk_createOrderForm_shaderOptionMenuChangedCallback(\"#1\", " + $index +")";

            // オプションメニュー作成
            $uiItem = `optionMenu -ann $labelsAnnotations[15] -cc $cmd`;

            // メニュー項目作成
            mtk_createOrderForm_createOptionMenuItems($shader_names, $shader_descriptions, 1, $uiItem);

            // UI リストに追加
            stringArrayInsertAtIndex($index, $gShaderOptionMenuList, $uiItem);

            setParent..;

        // ノーマルマップタイプ
        rowLayout -nc 1 -adj 1;

            // ノーマルマップタイプを変更した時のコールバックコマンド
            $cmd = "mtk_createOrderForm_normalMapTypeChangedCallback(" + $index + ")";

            // オプションメニュー作成
            $uiItem = `optionMenu -ann $labelsAnnotations[17] -cc $cmd`;

            // メニュー項目作成
            mtk_createOrderForm_createOptionMenuItems($normalMapTypes, {}, 1, $uiItem);

            // UI リストに追加
            stringArrayInsertAtIndex($index, $gNormalMapTypeOptionMenuList, $uiItem);

            setParent..;

        $index += 1;
    }

    return "uRcl_asset_mtk_createOrderForm";
}

///////////////////////////////////////////////////////
// 一括変更用のインデックスか
///////////////////////////////////////////////////////
global proc int mtk_createOrderForm_isIndexForChangeAll(int $index)
{
    global string $gAssetNameTextList[];

    return (`size($gAssetNameTextList)` == $index + 1 && $index >= 2);
}

///////////////////////////////////////////////////////
// すべてのインデックスを取得
///////////////////////////////////////////////////////
global proc int[] mtk_createOrderForm_getAllIndexes()
{
    global string $gCheckBoxList[];

    int $index_list[];

    int $i;

    for($i = 0; $i < `size($gCheckBoxList)`; $i++)
    {
        $index_list[$i] = $i;
    }

    return $index_list;
}

///////////////////////////////////////////////////////
// アセット名チェックボックスを変更した時のコールバック
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_assetNameCheckBoxChangedCallback(int $isChecked, int $index)
{
    global string $gCheckBoxList[];
    global string $gAssetNameTextList[];
    global string $gPolygonCountIntFieldList[];
    global string $gTextureResolutionOptionMenuList[];
    global string $gPhysicalMaterialTextList[];
    global string $gPhysicalMaterialButtonList[];
    global string $gCollisionTextList[];
    global string $gCollisionButtonList[];
    global string $gLodOptionMenuList[];
    global string $gParentMaterialTextList[];
    global string $gParentMaterialButtonList[];
    global string $gShaderOptionMenuList[];
    global string $gNormalMapTypeOptionMenuList[];

    int $target_index_list[];

    // 一括変更用のインデックスの場合
    if(mtk_createOrderForm_isIndexForChangeAll($index))
    {
        $target_index_list = mtk_createOrderForm_getAllIndexes();
    }
    else
    {
        $target_index_list = {$index};
    }

    for($index in $target_index_list)
    {
        // チェックボックスをオフに
        checkBox -e -v $isChecked $gCheckBoxList[$index];

        // チェックボックスをオフにしたアセットの各UI を無効に
        text -e -en $isChecked $gAssetNameTextList[$index];
        intField -e -en $isChecked $gPolygonCountIntFieldList[$index];
        optionMenu -e -en $isChecked $gTextureResolutionOptionMenuList[$index];
        text -e -en $isChecked $gPhysicalMaterialTextList[$index];
        button -e -en $isChecked $gPhysicalMaterialButtonList[$index];
        text -e -en $isChecked $gCollisionTextList[$index];
        button -e -en $isChecked $gCollisionButtonList[$index];
        optionMenu -e -en $isChecked $gLodOptionMenuList[$index];
        text -e -en $isChecked $gParentMaterialTextList[$index];
        button -e -en $isChecked $gParentMaterialButtonList[$index];
        optionMenu -e -en $isChecked $gShaderOptionMenuList[$index];
        optionMenu -e -en $isChecked $gNormalMapTypeOptionMenuList[$index];
    }
}

///////////////////////////////////////////////////////
// ポリゴン数を変更した時のコールバック
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_polygonCountChangedCallback(int $index)
{
    // 一括変更用のインデックスじゃない場合
    if(mtk_createOrderForm_isIndexForChangeAll($index) == false)
    {
        return;
    }

    global string $gPolygonCountIntFieldList[];

    int $polygonCount = `intField -q -v $gPolygonCountIntFieldList[$index]`;

    string $intField;

    for($intField in $gPolygonCountIntFieldList)
    {
        intField -e -v $polygonCount $intField;
    }
}

///////////////////////////////////////////////////////
// テクスチャ解像度を変更した時のコールバック
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_textureResolutionChangedCallback(int $index)
{
    // 一括変更用のインデックスじゃない場合
    if(mtk_createOrderForm_isIndexForChangeAll($index) == false)
    {
        return;
    }

    global string $gTextureResolutionOptionMenuList[];

    string $textureResolution = `optionMenu -q -v $gTextureResolutionOptionMenuList[$index]`;

    string $optionMenu;

    for($optionMenu in $gTextureResolutionOptionMenuList)
    {
        optionMenu -e -v $textureResolution $optionMenu;
    }
}

///////////////////////////////////////////////////////
// LOD を変更した時のコールバック
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_LodChangedCallback(int $index)
{
    // 一括変更用のインデックスじゃない場合
    if(mtk_createOrderForm_isIndexForChangeAll($index) == false)
    {
        return;
    }

    global string $gLodOptionMenuList[];

    string $lod = `optionMenu -q -v $gLodOptionMenuList[$index]`;

    string $optionMenu;

    for($optionMenu in $gLodOptionMenuList)
    {
        optionMenu -e -v $lod $optionMenu;
    }
}

///////////////////////////////////////////////////////
// シェーダを変更した時のコールバック
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_shaderOptionMenuChangedCallback(string $shader, int $index)
{
    global string $gShaderOptionMenuList[];
    global string $gNormalMapTypeOptionMenuList[];

    string $shaderOptionMenuList[];
    string $normalMapTypeOptionMenuList[];

    // 一括変更用のインデックスじゃない場合
    if(mtk_createOrderForm_isIndexForChangeAll($index) == false)
    {
        $shaderOptionMenuList = {$gShaderOptionMenuList[$index]};
        $normalMapTypeOptionMenuList = {$gNormalMapTypeOptionMenuList[$index]};
    }
    // 一括変更の場合
    else
    {
        $shaderOptionMenuList = $gShaderOptionMenuList;
        $normalMapTypeOptionMenuList = $gNormalMapTypeOptionMenuList;
    }

    string $optionMenu;

    for($optionMenu in $shaderOptionMenuList)
    {
        optionMenu -e -v $shader $optionMenu;
    }

    for($optionMenu in $normalMapTypeOptionMenuList)
    {
        // シェーダ名に_osn が含まれる場合
        if(`gmatch $shader "*_osn*"`)
        {
            // ノーマルマップタイプのosn を選択
            optionMenu -e -value "osn" $optionMenu;
        }
        else
        {
            // ノーマルマップタイプのrno を選択
            optionMenu -e -value "rno" $optionMenu;
        }
    }
}

///////////////////////////////////////////////////////
// ノーマルマップタイプ を変更した時のコールバック
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_normalMapTypeChangedCallback(int $index)
{
    // 一括変更用のインデックスじゃない場合
    if(mtk_createOrderForm_isIndexForChangeAll($index) == false)
    {
        return;
    }

    global string $gNormalMapTypeOptionMenuList[];

    string $normalMapType = `optionMenu -q -v $gNormalMapTypeOptionMenuList[$index]`;

    string $optionMenu;

    for($optionMenu in $gNormalMapTypeOptionMenuList)
    {
        optionMenu -e -v $normalMapType $optionMenu;
    }
}

///////////////////////////////////////////////////////
// ラベル用カラム作成
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_createLabelColumns(string $labelsAnnotations[], string $parent)
{
    // レイアウトのカラム数
    int $numOfCulumns = `size($labelsAnnotations)` / 2;

    // カラム番号
    int $column;

    for($column = 1; $column <= $numOfCulumns; $column++)
    {
        // カラムの設定
        rowColumnLayout -e -cs $column 4 -cal $column "center" $parent;
    }

    // ラベルカラムのカラー
    float $labelCol[] = {0.55, 0.55, 0.55};

    // ラベルカラムを作成
    for($column = 0; $column < $numOfCulumns; $column++)
    {
        string $text = `text
            -p $parent
            -l $labelsAnnotations[$column * 2]
            -ann $labelsAnnotations[$column * 2 + 1]
            -font "boldLabelFont"
            `;

        if($labelsAnnotations[$column * 2] != "")
        {
            text -e -bgc $labelCol[0] $labelCol[1] $labelCol[2] $text;
        }
    }
}

///////////////////////////////////////////////////////
// ポップアップメニュー項目作成
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_createPopupMenuItems(string $itemLabels[], int $defaultIndexes[], string $textField, string $popupMenu, int $typeID)
{
    int $index = 1;

    string $itemLabel;

    string $cmd = "mtk_createOrderForm_uncheckAllPupMenuItems(\"" + $textField + "\",\"" + $popupMenu + "\"," + $typeID + ")";

    menuItem -parent $popupMenu -l "全てのチェックを外す" -c $cmd;
    menuItem -parent $popupMenu -divider on;

    for($itemLabel in $itemLabels)
    {
        // デフォルト項目に含まれるか
        int $isChecked = intArrayContains($index, $defaultIndexes);

        // メニュー項目選択時のコールバックコマンド
        $cmd = "mtk_createOrderForm_pupMenuItemSelectedCallback(\"" + $textField + "\",\"" + $popupMenu + "\"," + $typeID + ")";

        // メニュー項目作成
        menuItem -parent $popupMenu -l $itemLabel -cb $isChecked -c $cmd;

        $index += 1;
    }
}

///////////////////////////////////////////////////////
// ポップアップメニュー項目のチェックを全て外す
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_uncheckAllPupMenuItems(string $textField, string $popupMenu, int $typeID)
{
    // ポップアップメニューの全メニュー項目を取得
    string $menuItems[] = `popupMenu -q -itemArray $popupMenu`;

    string $menuItem;

    for($menuItem in $menuItems)
    {
        // チェックボックス項目ならチェックを外す
        if(`menuItem -q -isCheckBox $menuItem`)
        {
            menuItem -e -cb off $menuItem;
        }
    }

    mtk_createOrderForm_pupMenuItemSelectedCallback($textField, $popupMenu, $typeID);
}

///////////////////////////////////////////////////////
// ポップアップメニュー項目を選択した時のコールバック
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_pupMenuItemSelectedCallback(string $textField, string $popupMenu, int $typeID)
{
    // ポップアップメニューの全メニュー項目を取得
    string $menuItems[] = `popupMenu -q -itemArray $popupMenu`;

    string $menuItem;

    // ポップアップメニューでチェックがオンの項目のラベルリスト
    string $checkedItemLabels[];

    for($menuItem in $menuItems)
    {
        // 項目のチェックがオンならリストに追加
        if(`menuItem -q -cb $menuItem`)
        {
            stringArrayInsertAtIndex(`size($checkedItemLabels)`, $checkedItemLabels, `menuItem -q -label $menuItem`);
        }
    }

    string $text = "None";

    // チェックがオンの項目がある場合
    if(`size($checkedItemLabels)` != 0)
    {
        $text = stringArrayToString($checkedItemLabels, "\n");
    }

    // 一括変更用のインデックスの場合
    if(mtk_createOrderForm_isControlForChangeAll($textField, $typeID) == false)
    {
        text -e -l $text $textField;
    }
    // 一括変更の場合
    else
    {
        string $textControls[] = mtk_createOrderForm_getTextControls($typeID);

        string $textControl;

        for($textControl in $textControls)
        {
            text -e -l $text $textControl;
        }

        // ポップアップメニュー項目のチェック状態をテキストの内容に合わせる
        mtk_createOrderForm_updateMenuItemCheckStatus($checkedItemLabels, $typeID);
    }
}

///////////////////////////////////////////////////////
// ポップアップメニュー項目のチェック状態をテキストの内容に合わせる
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_updateMenuItemCheckStatus(string $checkedItemLabels[], int $typeID)
{
    string $popupMenus[] = `mtk_createOrderForm_getPopupMenus($typeID)`;

    string $popupMenu;

    for($popupMenu in $popupMenus)
    {
        string $menuItems[] = `popupMenu -q -itemArray $popupMenu`;

        string $menuItem;

        for($menuItem in $menuItems)
        {
            if(stringArrayContains(`menuItem -q -label $menuItem`, $checkedItemLabels))
            {
                menuItem -e -cb true $menuItem;
            }
            else
            {
                menuItem -e -cb false $menuItem;
            }
        }
    }
}

///////////////////////////////////////////////////////
// popupMenu のリストを取得
///////////////////////////////////////////////////////
global proc string[] mtk_createOrderForm_getPopupMenus(int $typeID)
{
    global string $gPhysicalMaterialButtonList[];
    global string $gCollisionButtonList[];
    global string $gParentMaterialButtonList[];

    string $popupMenus[];

    string $buttons[];

    if($typeID == 0)
    {
        $buttons = $gPhysicalMaterialButtonList;
    }
    else if($typeID == 1)
    {
        $buttons = $gCollisionButtonList;
    }
    else
    {
        $buttons = $gParentMaterialButtonList;
    }

    string $button;

    for($button in $buttons)
    {
        $popupMenus = stringArrayCatenate($popupMenus, `button -q -popupMenuArray $button`);
    }

    return $popupMenus;
}

///////////////////////////////////////////////////////
// text コントロールのリストを取得
///////////////////////////////////////////////////////
global proc string[] mtk_createOrderForm_getTextControls(int $typeID)
{
    global string $gPhysicalMaterialTextList[];
    global string $gCollisionTextList[];
    global string $gParentMaterialTextList[];

    string $controls[];

    if($typeID == 0)
    {
        $controls = $gPhysicalMaterialTextList;
    }
    else if($typeID == 1)
    {
        $controls = $gCollisionTextList;
    }
    else
    {
        $controls = $gParentMaterialTextList;
    }

    return $controls;
}

///////////////////////////////////////////////////////
// 一括変更用のUI か
///////////////////////////////////////////////////////
global proc int mtk_createOrderForm_isControlForChangeAll(string $textField, int $typeID)
{
    string $controls[] = mtk_createOrderForm_getTextControls($typeID);

    int $index = stringArrayFind($textField, 0, $controls);

    return (`size($controls)` == $index + 1 && $index >= 2);
}

///////////////////////////////////////////////////////
// オプションメニュー項目作成
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_createOptionMenuItems(string $labels[], string $annotations[], int $defaultIndex, string $optionMenu)
{
    int $useAnnotation = `size($annotations)`;

    string $annotation;

    int $i;

    for($i = 0; $i < `size($labels)`; $i++)
    {
        if($useAnnotation)
        {
            $annotation = $annotations[$i];
        }
        else
        {
            $annotation = "";
        }

        menuItem -parent $optionMenu -l $labels[$i] -ann $annotation;
    }

    optionMenu -e -sl $defaultIndex $optionMenu;
}

///////////////////////////////////////////////////////
// シーンにあるアセット名を取得
///////////////////////////////////////////////////////
global proc string[] mtk_createOrderForm_getAssetNames()
{
    string $assetNamesArray[];

    $assetNamesArray = `ls -tr "|mdl_*"`;

    return $assetNamesArray;
}

///////////////////////////////////////////////////////
// アセットの表示用メッシュノードを取得
///////////////////////////////////////////////////////
global proc string[] mtk_createOrderForm_getModelMeshNodes(string $assetName)
{
    // model ノード名
    string $modelNode = $assetName + "|model";

    // メッシュノードリスト
    string $polyMeshes[];

    // model ノードが存在する場合
    if(`objExists $modelNode`)
    {
        // model ノード以下のメッシュノードを取得
        $polyMeshes = `filterExpand -sm 12 $modelNode`;
    }

    return $polyMeshes;
}

///////////////////////////////////////////////////////
// アセットのトライアングル数を取得
///////////////////////////////////////////////////////
global proc int mtk_createOrderForm_getNumOfTriangles(string $assetName)
{
    // トライアングル数
    int $numOfTriangles[];

    // 表示用モデルのメッシュノードを取得
    string $polyMeshes[] = mtk_createOrderForm_getModelMeshNodes($assetName);

    if(`size($polyMeshes)` != 0)
    {
        $numOfTriangles = `polyEvaluate -t $polyMeshes`;
    }

    if($numOfTriangles[0] > 10)
    {
        // 桁数取得
        int $numOfDigits = `size(string($numOfTriangles[0]))`;

        int $i;

        if($numOfTriangles[0] > 100)
        {
            $i = 2;
        }
        else
        {
            $i = 1;
        }

        int $v = `pow 10 ($numOfDigits - $i)`;

        $numOfTriangles[0] = ($numOfTriangles[0] / $v + 1) * $v;
    }

    return $numOfTriangles[0];
}

///////////////////////////////////////////////////////
// テクスチャの解像度インデックスを取得
///////////////////////////////////////////////////////
global proc int mtk_createOrderForm_getTextureResolution(string $assetName)
{
    // インデックス
    int $index = 1;

    // 表示用モデルのメッシュノードを取得
    string $polyMeshes[] = mtk_createOrderForm_getModelMeshNodes($assetName);

    if(`size($polyMeshes)` != 0)
    {
        // メッシュの表面積を取得
        float $surfaceArea[] = `polyEvaluate -wa $polyMeshes`;

        // 正方形だとして1辺の長さ（メートル）
        float $length = `sqrt $surfaceArea[0]` / 100;

        // 底2 のlog
        float $log = `log $length` / `log 2`;

        // インデックス（最大6 最小1）
        $index = `floor ($log + 4.5)`;
        $index = `min 6 $index`;
        $index = `max 1 $index`;
    }
    else
    {
        $index = 4;
    }

    return $index;
}

///////////////////////////////////////////////////////
// 物理マテリアル名のリストを取得
///////////////////////////////////////////////////////
global proc string[] mtk_createOrderForm_getPhysicalMaterialList()
{
    // 物理マテリアル定義ファイル
    string $filePath = "z:/mtk/work/engine/material/material.matdecl";

    source "mtk_p4Cmds";

    // 最新リビジョンを取得
    mtk_p4Cmds_sync($filePath);

    // ファイルオープン
    int $fpid = `fopen $filePath "r"`;

    string $line;

    // 物理マテリアル定義名のリスト
    string $physical_material_list[];

    // 一行ずつ読み込み
    for( $line = `fgetline $fpid`; size($line) > 0; $line = `fgetline $fpid`)
    {
        if(startsWith($line, "-"))
        {
            string $phyMaterial = substituteAllString($line, "- ", "");
            $phyMaterial = substituteAllString($phyMaterial, "\n", "");

            // default 以外
            if(`match "[a-z]+[0-9][0-9][0-9]" $phyMaterial` != "")
            {
                $physical_material_list[`size($physical_material_list)`] = $phyMaterial;
            }
        }
    }

    // ファイルクローズ
    fclose $fpid;

    // ソート
    $physical_material_list = `sort $physical_material_list`;

    // default を先頭に追加
    stringArrayInsertAtIndex(0, $physical_material_list, "default");

    return $physical_material_list;
}

///////////////////////////////////////////////////////
// コリジョン名のリストを取得
///////////////////////////////////////////////////////
global proc string[] mtk_createOrderForm_getCollisionList()
{
    // コリジョンアトリビュート定義ファイル
    string $filePath = "z:/mtk/tools/maya/2022/modules/mtk/scripts/mtk_collisionSettingTool_attr.csv";

    // ファイルオープン
    int $fpid = `fopen $filePath "r"`;

    // ヘッダ行 捨て読み
    fgetline $fpid;

    string $line;

    // 物理マテリアル定義名のリスト
    string $collision_list[];

    // 一行ずつ読み込み
    for( $line = `fgetline $fpid`; size($line) > 0; $line = `fgetline $fpid`)
    {
        $line = substituteAllString($line, "\n", "");

        string $tokens[] = stringToStringArray($line, ",");

        $collision_list[`size($collision_list)`] = $tokens[0];
    }

    // ファイルクローズ
    fclose $fpid;

    return $collision_list;
}

///////////////////////////////////////////////////////
// マスターマテリアル名リストを取得
///////////////////////////////////////////////////////
global proc string[] mtk_createOrderForm_getMtlList()
{
    // Cyllista Python パス
    string $pythonPath = "Z:/cyllista/tools/python/python.bat";

    // Python スクリプトパス
    string $scriptPath = "Z:/mtk/tools/maya/2022/modules/mtk3d/scripts/getMtlList.py";

    // Python スクリプトを実行
    string $result = `system($pythonPath + " " + $scriptPath)`;

    // マスターマテリアル名を取得
    string $mtlList[] = stringToStringArray($result, "\r\n");

    return $mtlList;
}

///////////////////////////////////////////////////////
// シェーダ名・説明リストを取得
///////////////////////////////////////////////////////
global proc string[] mtk_createOrderForm_getShaderList()
{
    // Cyllista Python パス
    string $pythonPath = "Z:/cyllista/tools/python/python.bat";

    // Python スクリプトパス
    string $scriptPath = "Z:/mtk/tools/maya/2022/modules/mtk3d/scripts/getShaderList.py";

    // Python スクリプトを実行
    string $result = `system($pythonPath + " " + $scriptPath)`;

    // シェーダ名を取得
    string $shaderList[] = stringToStringArray($result, "\r\n");

    return $shaderList;
}

///////////////////////////////////////////////////////
// Excel ファイル出力フォルダパスを取得
///////////////////////////////////////////////////////
global proc string mtk_createOrderForm_getExportFolderPath()
{
    // Excel 出力フォルダ
    string $path = `textField -q -tx uTf_exportFolderPath_mtk_createOrderForm`;

    $path = substituteAllString($path, "/", "\\");

    return $path;
}

///////////////////////////////////////////////////////
// Excel 出力フォルダをエクスプローラで開く
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_openExportFolder()
{
    // Excel 出力フォルダ
    string $path = mtk_createOrderForm_getExportFolderPath();

    if(`filetest -d $path`)
    {
        system("start explorer /root," + $path);
    }
    else
    {
        confirmDialog -t "確認" -icn "warning" -m "指定されたフォルダが存在しません。" -b "OK";
    }
}

///////////////////////////////////////////////////////
// Excel ファイルを作成
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_createExcelFiles()
{
    global string $gCheckBoxList[];
    global string $gAssetNameTextList[];
    global string $gPolygonCountIntFieldList[];
    global string $gTextureResolutionOptionMenuList[];
    global string $gPhysicalMaterialTextList[];
    global string $gCollisionTextList[];
    global string $gLodOptionMenuList[];
    global string $gParentMaterialTextList[];
    global string $gShaderOptionMenuList[];
    global string $gNormalMapTypeOptionMenuList[];

    // 発注者名を取得
    string $orderer = `textField -q -tx uTf_orderer_mtk_createOrderForm`;

    if($orderer == "")
    {
        confirmDialog -t "確認" -icn "warning" -m "Orderer（発注者名）が入力されていません。" -b "OK";

        return;
    }

    // スペースを置き換え
    $orderer = substituteAllString($orderer, " ", "+");

    // シーン内にアセットが存在しない場合
    if(`size($gCheckBoxList)` == 0)
    {
        confirmDialog -t "確認" -icn "warning" -m "対象アセットがありません。" -b "OK";

        return;
    }

    // シーンパスを取得
    string $scenePath = `textField -q -tx uTf_scenePath_mtk_createOrderForm`;

    if($scenePath == "")
    {
        confirmDialog -t "確認" -icn "warning" -m "Scene path（シーンのパス）が取得できません。\n\n シーンが保存されているか確認してください。" -b "OK";

        return;
    }

    // Excel 出力フォルダを取得
    string $exportFolderPath = mtk_createOrderForm_getExportFolderPath();

    if($exportFolderPath == "")
    {
        confirmDialog -t "確認" -icn "warning" -m "Excel ファイル出力フォルダを指定してください。" -b "OK";

        return;
    }

    if(`filetest -d $exportFolderPath` == false)
    {
        confirmDialog -t "確認" -icn "warning" -m ($exportFolderPath + "\n\nExcel ファイル出力フォルダが存在しません。") -b "OK";

        return;
    }

    if(endsWith($exportFolderPath, "\\") == false)
    {
        $exportFolderPath += "\\";
    }

    // Excel 記入用の情報
    string $assetNameList[];
    int $polygonCountList[];
    string $textureResolutionList[];
    string $physicalMaterialList[];
    string $collisionList[];
    string $lodList[];
    string $parentMaterialList[];
    string $shaderList[];
    string $normalMapTypeList[];

    int $count = 0;

    string $checkBox;

    // Excel 記入用の情報を取得
    for($checkBox in $gCheckBoxList)
    {
        // 一括変更用のインデックスはスキップ
        if(mtk_createOrderForm_isIndexForChangeAll($count))
        {
            break;
        }

        if(`checkBox -q -v $checkBox` == off)
        {
            $count += 1;

            continue;
        }

        int $index = `size($assetNameList)`;

        // アセット名取得
        $assetNameList[$index] = `text -q -l $gAssetNameTextList[$count]`;

        // ポリゴン数取得
        $polygonCountList[$index] = `intField -q -v $gPolygonCountIntFieldList[$count]`;

        // テクスチャ解像度取得
        $textureResolutionList[$index] = `optionMenu -q -v $gTextureResolutionOptionMenuList[$count]`;

        // 物理マテリアル取得
        $physicalMaterialList[$index] = substituteAllString(`text -q -l $gPhysicalMaterialTextList[$count]`, "\n", "+");

        // コリジョン取得
        $collisionList[$index] = substituteAllString(`text -q -l $gCollisionTextList[$count]`, "\n", "+");

        // LOD 取得
        $lodList[$index] = `optionMenu -q -v $gLodOptionMenuList[$count]`;

        if($lodList[$index] != "LOD0")
        {
            $lodList[$index] = "LOD0 - " + `optionMenu -q -v $gLodOptionMenuList[$count]`;

            // スペースを置き換え
            $lodList[$index] = substituteAllString($lodList[$index], " ", "+");
        }

        // 親マテリアル取得
        $parentMaterialList[$index] = substituteAllString(`text -q -l $gParentMaterialTextList[$count]`, "\n", "+");

        // シェーダ取得
        $shaderList[$index] = `optionMenu -q -v $gShaderOptionMenuList[$count]`;

        // ノーマルマップタイプ取得
        $normalMapTypeList[$index] = `optionMenu -q -v $gNormalMapTypeOptionMenuList[$count]`;

        $count += 1;
    }

    // チェックを入れたアセットがない場合
    if(`size($assetNameList)` == 0)
    {
        confirmDialog -t "確認" -icn "warning" -m "対象アセットにチェックを入れて実行してください。" -b "OK";

        return;
    }

    // 確認メッセージ
    string $message = stringArrayToString($assetNameList, ",");

    // 確認ダイアログ
    string $result = `layoutDialog -title "確認" -ui ("mtk_createOrderForm_createExcelConfirmDialog(\"" + $message + "\")")`;

    // キャンセルしたら終了
    if ($result == "dismiss")
    {
        return;
    }

    // 画像をキャプチャするか
    int $captureImage = `optionVar -q "ov_capture_thumbnail_mtk_createOrderForm"` && `exists fy_captureThumnail`;

    // 画像をキャプチャする場合、かつキャプチャスクリプトが存在する場合
    if($captureImage)
    {
        // 画像キャプチャスクリプトをソース
        eval("source fy_captureThumnail");
    }

    // 作成後にExcelで開くか
    int $launchExcel = `optionVar -q "ov_open_excel_mtk_createOrderForm"`;

    // 自分自身のパス
    string $melScriptPath = substituteAllString(`whatIs mtk_createOrderForm`, "Mel procedure found in: ", "");

    // バッチファイルのパス
    string $batFilePath = substituteAllString($melScriptPath, basename($melScriptPath, ""), "runVbs.bat");

    string $assetName;

    int $index;

    string $progressMessage = "\n\n\n\n";

    progressWindow
        -t "Create Order Form"
        -isInterruptable false
        -status $progressMessage
        -max `size($assetNameList)`;

    for($assetName in $assetNameList)
    {
        $progressMessage = "\nExcel ファイル作成中...\n\n" + $assetName + "\n";

        progressWindow -e -status $progressMessage -progress ($index + 1);

        // 画像をキャプチャ
        if($captureImage)
        {
            mtk_createOrderForm_captureImages($assetName, $exportFolderPath);
        }

        string $cmds[] = {
            $batFilePath,
            $launchExcel,
            $assetName,
            $polygonCountList[$index],
            $textureResolutionList[$index],
            $physicalMaterialList[$index],
            $collisionList[$index],
            $lodList[$index],
            $parentMaterialList[$index],
            $shaderList[$index],
            $normalMapTypeList[$index],
            $scenePath,
            $orderer,
            $captureImage,
            $exportFolderPath
        };

        string $cmd = stringArrayToString($cmds, " ");

        // system("start " + $cmd);
        system($cmd);

        $index += 1;
    }

    progressWindow -endProgress;
}

///////////////////////////////////////////////////////
// 画像をキャプチャ作成
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_captureImages(string $assetName, string $exportFolderPath)
{
    // 現在のアセットの表示状態
    int $rootVisibility = `getAttr ($assetName + ".visibility")`;
    int $modelVisibility;
    int $collisionVisibility;

    // model ノード名、collision ノード名
    string $modelNode = $assetName + "|model";
    string $collisionNode = $assetName + "|collision";

    if(`objExists $modelNode`)
    {
        // model ノードの表示状態を格納
        $modelVisibility = `getAttr ($modelNode + ".visibility")`;

        // model ノードを表示
        showHidden -above -below $modelNode;

        // 画像キャプチャ
        fy_captureThumnail({$modelNode}, 1024, 1024, ($exportFolderPath + $assetName));
    }

    if(`objExists $collisionNode`)
    {
        // collision ノードの表示状態を格納
        $collisionVisibility = `getAttr ($collisionNode + ".visibility")`;

        // collision ノードを表示
        showHidden -above -below $collisionNode;

        setAttr ($collisionNode + ".overrideEnabled") 1;
        setAttr ($collisionNode + ".overrideShading") 0;
        setAttr ($collisionNode + ".overrideColor") 19;

        // 画像キャプチャ
        fy_captureThumnail({$collisionNode}, 1024, 1024, ($exportFolderPath + $assetName + "_collision"));
    }

    // 表示状態を元に戻す
    setAttr ($assetName + ".visibility") $rootVisibility;
    setAttr ($modelNode + ".visibility") $modelVisibility;
    setAttr ($collisionNode + ".visibility") $collisionVisibility;

    setAttr ($collisionNode + ".overrideEnabled") 0;
    setAttr ($collisionNode + ".overrideShading") 1;
    setAttr ($collisionNode + ".overrideColor") 0;
}

///////////////////////////////////////////////////////
// Excel ファイル出力確認ダイアログ
///////////////////////////////////////////////////////
global proc mtk_createOrderForm_createExcelConfirmDialog(string $message)
{
    string $form = `setParent -q`;

    formLayout -e $form;

    string $t = "";

	string $b1 = "";
	string $b2 = "";
	string $b3 = "";

    // 確認メッセージ
    $message = "以下のアセットの発注書を作成します。\n\n" + substituteAllString($message, ",", "\n");

	$t = `text -l $message -al "left"`;
	$b1 = `button -l "作成" -c "layoutDialog -dismiss \"作成\""`;
	$b2 = `button -l "キャンセル" -c "layoutDialog -dismiss \"dismiss\""`;

    int $cb1_value = `optionVar -q "ov_capture_thumbnail_mtk_createOrderForm"`;
    int $cb1_visible = `exists fy_captureThumnail`;
    int $cb2_value = `optionVar -q "ov_open_excel_mtk_createOrderForm"`;

    string $cb1 =
        `checkBox
            -onc "optionVar -iv ov_capture_thumbnail_mtk_createOrderForm 1"
            -ofc "optionVar -iv ov_capture_thumbnail_mtk_createOrderForm 0"
            -v $cb1_value
            -vis $cb1_visible
            -label "キャプチャ画像を作成"
            -ann "画像をキャプチャしてExcel ファイルに貼り付けます。"
            `;

    string $cb2 =
        `checkBox
            -onc "optionVar -iv ov_open_excel_mtk_createOrderForm 1"
            -ofc "optionVar -iv ov_open_excel_mtk_createOrderForm 0"
            -v $cb2_value
            -label "作成後にExcel で開く"
            -ann "作成後にExcel ファイルを開きます。"
            `;

    string $sep = `separator`;

    int $formHMargin = 32;
    int $formTopMargin = 16;

    formLayout -edit
        -attachForm            $t   "top"    $formTopMargin
        -attachForm            $t   "left"   $formHMargin
        -attachNone            $t   "bottom"
        -attachForm            $t   "right"  $formHMargin

        -attachControl         $cb1 "top"    24 $t
        -attachForm            $cb1 "left" ($formHMargin + 8)
        -attachNone            $cb1 "bottom"
        -attachNone            $cb1 "right"

        -attachControl         $cb2 "top"    4 $cb1
        -attachForm            $cb2 "left" ($formHMargin + 8)
        -attachNone            $cb2 "bottom"
        -attachNone            $cb2 "right"

        -attachControl         $b1  "top"    16 $cb2
        -attachForm            $b1  "left"   $formHMargin
        -attachNone            $b1  "bottom"
        -attachPosition        $b1  "right"  4 50

        -attachControl         $b2  "top"    16 $cb2
        -attachPosition        $b2  "left"   4 50
        -attachNone            $b2  "bottom"
        -attachForm            $b2  "right"  $formHMargin

        -attachControl         $sep "top"    0 $b2
        -attachNone            $sep "left"
        -attachForm            $sep "bottom" 8
        -attachNone            $sep "right"
    $form;

    setFocus $b1;
}


// source mtk_createOrderForm;
// mtk_createOrderForm;
