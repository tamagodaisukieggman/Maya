//===============================================
//
// Script Editor Toolkit
//
// Fujita Yukihiro
//
//===============================================

global proc fy_scriptEditorToolkit()
{
    source "mtk_p4Cmds";

    // お気に入りラベルとパス
    if (!`optionVar -exists "ov_fy_scriptEditorToolkit_favoriteLabels"`)
    {
        optionVar -stringValueAppend "ov_fy_scriptEditorToolkit_favoriteLabels" "ユーザースクリプト フォルダ";
        optionVar -stringValueAppend "ov_fy_scriptEditorToolkit_favoritePaths" `internalVar -userScriptDir`;
    }

    // 選択しているお気に入りインデックス
    if (!`optionVar -exists "ov_fy_scriptEditorToolkit_selFavoriteIdx"`)
    {
        optionVar -intValue "ov_fy_scriptEditorToolkit_selFavoriteIdx" 1;
    }

    // スクリプト以外のファイルを非表示
    if (!`optionVar -exists "ov_fy_scriptEditorToolkit_hideOthers"`)
    {
        optionVar -intValue "ov_fy_scriptEditorToolkit_hideOthers" true;
    }


    // スクリプトエディタの上部ペインのサイズ（％）
    if (!`optionVar -exists "ov_fy_scriptEditorToolkit_upperPaneSize"`)
    {
        optionVar -intValue "ov_fy_scriptEditorToolkit_upperPaneSize" 50;
    }

    // 最近使ったファイル
    if(!`optionVar -exists "ov_fy_scriptEditorToolkit_recentFilesPath"`)
    {
        optionVar -stringValueAppend "ov_fy_scriptEditorToolkit_recentFilesPath" "temp";
        optionVar -clearArray "ov_fy_scriptEditorToolkit_recentFilesPath";
    }

    // テンプレート使用
    if(!`optionVar -exists "ov_fy_scriptEditorToolkit_useTemplete"`)
    {
        optionVar -intValue "ov_fy_scriptEditorToolkit_useTemplete" 0;
    }

    // ドックの上部ペインのサイズ（％）
    if (!`optionVar -exists "ov_fy_scriptEditorToolkit_dockUpperPaneSize"`)
    {
        optionVar -intValue "ov_fy_scriptEditorToolkit_dockUpperPaneSize" 70;
    }

    // 選択しているタブのインデックス（タブリストかプロシージャリストか）
    if (!`optionVar -exists "ov_fy_scriptEditorToolkit_selTabIndex"`)
    {
        optionVar -intValue "ov_fy_scriptEditorToolkit_selTabIndex" 1;
    }

    // プロシージャリストを名前順でソートするか
    if (!`optionVar -exists "ov_fy_scriptEditorToolkit_sortProcListByName"`)
    {
        optionVar -intValue "ov_fy_scriptEditorToolkit_sortProcListByName" 0;
    }

    //fy_scriptEditorToolkit_preDefines();

    string $uWND = "uWND_fy_scriptEditorToolkit";
    string $uPNL = "uPNL_fy_scriptEditorToolkit";
    string $uTSL = "uTSL_fy_scriptEditorToolkit";
    string $uTSL2 = "uTSL2_fy_scriptEditorToolkit";
    string $uFML = "uFML_fy_scriptEditorToolkit";
    string $uFML2 = "uFML2_fy_scriptEditorToolkit";
    string $uTRV = "uTRV_fy_scriptEditorToolkit";
    string $uOM  = "uOM_fy_scriptEditorToolkit";
    string $uTXF = "uTXF_fy_scriptEditorToolkit";
    string $uTXF2 = "uTXF2_fy_scriptEditorToolkit";
    string $uTBL = "uTBL_fy_scriptEditorToolkit";

/*
    if (`window -exists $uWND` == 1)
    {
        deleteUI $uWND;
        //return;
    }

    window -t "Script Editor Toolkit" -mb true $uWND;
*/

    python("import mtk3d.maya.env.file.functions as envfile");


    menuBarLayout;
        menu -l "ファイル" -postMenuCommand "fy_scriptEditorToolkit_createFileMenu" uMn_fy_scriptEditorToolkit_file;

        menu -l "編集";
            menuItem
                -l "スクリプトを保存している状態に復帰"
                -c "fy_scriptEditorToolkit_reopenScript"
                ;

        menu -l "コマンド" -postMenuCommand "fy_scriptEditorToolkit_createCommandMenu" uMn_fy_scriptEditorToolkit_command;

        menu -l "オプション";
            menuItem
                -l "スクリプトファイル以外を非表示"
                -cb `optionVar -q "ov_fy_scriptEditorToolkit_hideOthers"`
                -c "fy_scriptEditorToolkit_hideOthersCallback"
                ;

        string $helpCmd = "python(\"import webbrowser\\nwebbrowser.open('https://wisdom.cygames.jp/pages/viewpage.action?pageId=148960337')\")";

        menu -l "ヘルプ";
            menuItem
                -l "Script Editor Toolkit のヘルプ"
                -c $helpCmd
                ;

        paneLayout
            -cn "horizontal2"
            -h 500
            -paneSize 1 100 `optionVar -q "ov_fy_scriptEditorToolkit_dockUpperPaneSize"`
            -separatorMovedCommand "fy_scriptEditorToolkit_saveDockUpperPaneSize"
            $uPNL;

            frameLayout -lv false -mw 0 -mh 0;
                formLayout($uFML);
                    string $uRL = `rowLayout -nc 4 -adjustableColumn 1`;
                        optionMenu -w 190 -cc "fy_scriptEditorToolkit_updateFavoriteTreeView" $uOM;
                        fy_scriptEditorToolkit_updateFavoriteMenu;

                        int $index = `optionVar -q "ov_fy_scriptEditorToolkit_selFavoriteIdx"`;

                        if ($index != 0)
                        {
                            optionMenu -e -sl $index $uOM;
                        }

                        button -l "..." -h 19;
                        popupMenu -button 1;
                        menuItem -l "お気に入りを追加..." -c "fy_scriptEditorToolkit_editFavoriteCallback(\"add\")";
                        menuItem -l "お気に入りを編集..." -c "fy_scriptEditorToolkit_editFavoriteCallback(\"edit\")";
                        menuItem -l "お気に入りを削除" -c "fy_scriptEditorToolkit_removeFavoriteCallback";
                        menuItem -divider true;
                        menuItem -l "お気に入りフォルダをエクスプローラで開く" -c "fy_scriptEditorToolkit_openFavoriteDir";

                        separator -horizontal false -w 8 -h 20;

                        iconTextButton  -h 20 -w 20 -style "iconOnly" -i "refresh.png" -c "fy_scriptEditorToolkit_updateFavoriteTreeView" -ann "ツリービューを更新";

                        setParent ..;

                    treeView
                        -allowDragAndDrop false
                        -allowMultiSelection false
                        -numberOfButtons 1
                        -flatButton 1
                        -selectCommand "fy_scriptEditorToolkit_selectTreeItemCallback"
                        $uTRV;

                        string $treeViewPopumMenu = `popupMenu`;
                            popupMenu -e -postMenuCommand ("fy_scriptEditorToolkit_createTreeViewPopupMenu(\"" + $treeViewPopumMenu + "\")") $treeViewPopumMenu;

                    textField -editable false $uTXF;

                formLayout -e
                    -attachForm $uRL "top" 0
                    -attachForm $uRL "top" 0
                    -attachForm $uRL  "left" 0
                    -attachForm $uRL "right" 0
                    -attachForm $uTRV "left" 0
                    -attachForm $uTRV "right" 0
                    -attachForm $uTXF "left" 0
                    -attachForm $uTXF "right" 0
                    -attachForm $uTXF "bottom" 0

                    -attachControl $uTRV "top" 4 $uRL
                    -attachControl $uTRV "bottom" 4 $uTXF
                    $uFML;

                setParent..;
            setParent..;

        tabLayout -imw 4 -imh 4 -sc "fy_scriptEditorToolkit_selectTabCommand" $uTBL;
            textScrollList -sc "fy_scriptEditorToolkit_selectTab" $uTSL;

            // タブリストを更新
            fy_scriptEditorToolkit_updateTabsList;

            frameLayout -lv off  -mw 0 -mh 0 $uTSL2;
                formLayout $uFML2;

                    string $uTextField = `textField -h 22 -searchField -tcc "fy_scriptEditorToolkit_updateProceduresList" -cc "fy_scriptEditorToolkit_updateProceduresList" $uTXF2`;
                    string $uButtonRefresh = `iconTextButton  -h 20 -w 20 -style "iconOnly" -i "refresh.png" -c "fy_scriptEditorToolkit_updateProceduresList" -ann "プロシージャ/関数リストを更新"`;
                    int $isSortName = `optionVar -q "ov_fy_scriptEditorToolkit_sortProcListByName"`;
                    string $uButtonSortName = `iconTextCheckBox -h 20 -w 20 -style "iconOnly" -i "sortName.png" -v $isSortName -cc "fy_scriptEditorToolkit_sortProcListByNameToggle" -ann "名前順にソート"`;
                    string $uSeparator = `separator -hr false -h 20`;

                    textScrollList -sc "fy_scriptEditorToolkit_proceduresListSelectCallback" $uTSL2;

                formLayout -e
                    -attachForm $uTextField "top"  0
                    -attachForm $uTextField "left" 0
                    -attachControl $uTextField "right" 2 $uSeparator

                    -attachForm $uSeparator "top"  0
                    -attachControl $uSeparator "right" 6 $uButtonSortName

                    -attachForm $uButtonSortName "top"  0
                    -attachControl $uButtonSortName "right" 4 $uButtonRefresh

                    -attachForm $uButtonRefresh "top"  0
                    -attachForm $uButtonRefresh "right" 0

                    -attachControl $uTSL2 "top" 4 $uTextField
                    -attachForm $uTSL2 "left"  0
                    -attachForm $uTSL2 "right" 0
                    -attachForm $uTSL2 "bottom" 0

                    $uFML2;

            // プロシージャリストを更新
            fy_scriptEditorToolkit_updateProceduresList;

        tabLayout -e
            -tabLabel $uTSL "タブ"
            -tabLabel $uTSL2 "プロシージャ / 関数"
            -selectTabIndex `optionVar -q "ov_fy_scriptEditorToolkit_selTabIndex"`
            $uTBL;

    // ツリービューを更新
    fy_scriptEditorToolkit_updateFavoriteTreeView();

    // スクリプトエディタのペインレイアウト
    global string $gCommandLayout;

    // スクリプトエディタが存在すれば
    if(`fy_scriptEditorToolkit_scriptEditorExists` == true)
    {
        // ペインレイアウトの上部サイズを復元
        paneLayout -e -paneSize 1 100 `optionVar -q "ov_fy_scriptEditorToolkit_upperPaneSize"` $gCommandLayout;

        // コールバックコマンドを取得
        string $cmd = `paneLayout -q -smc $gCommandLayout`;

        // まだコマンドを追加していなければ追加
        if($cmd == "")
        {
            // コールバックコマンドを設定
            paneLayout -e -smc "fy_scriptEditorToolkit_saveUpperPaneSize" $gCommandLayout;
        }
    }

    //showWindow;
}

//===============================================
// ファイルメニュー作成
//===============================================
global proc fy_scriptEditorToolkit_createFileMenu()
{
    // メニューの項目を一旦削除
    menu -e -deleteAllItems uMn_fy_scriptEditorToolkit_file;

    menuItem
        -p uMn_fy_scriptEditorToolkit_file
        -l "カレントタブのスクリプトをエクスプローラで開く"
        -c "fy_scriptEditorToolkit_openInExplorerMenuCmd"
        ;

    menuItem
        -p uMn_fy_scriptEditorToolkit_file
        -d true
        ;

    // スクリプトエディタが存在すればperforce 操作メニュー作成
    if(`fy_scriptEditorToolkit_scriptEditorExists`)
    {
        fy_scriptEditorToolkit_createPerforceMenu("uMn_fy_scriptEditorToolkit_file", 0);

        menuItem
            -p uMn_fy_scriptEditorToolkit_file
            -d true
            ;
    }

    menuItem
        -p uMn_fy_scriptEditorToolkit_file
        -l "最近使ったファイル"
        -subMenu true
        -postMenuCommand "fy_scriptEditorToolkit_buildRecentFilesMenu"
        uMN_fy_scriptEditorToolkit_recentFiles;

        // 最近使ったファイルメニュー作成
        fy_scriptEditorToolkit_buildRecentFilesMenu;

}

//===============================================
// コマンドメニュー作成
//===============================================
global proc fy_scriptEditorToolkit_createCommandMenu()
{
    // メニューの項目を一旦削除
    menu -e -deleteAllItems uMn_fy_scriptEditorToolkit_command;

    menuItem
        -p uMn_fy_scriptEditorToolkit_command
        -l "新規タブ(MEL)"
        -c "fy_scriptEditorToolkit_createNewTab(\"mel\")"
        ;
    menuItem
        -p uMn_fy_scriptEditorToolkit_command
        -l "新規タブ(Python)"
        -c "fy_scriptEditorToolkit_createNewTab(\"python\")"
        ;
    menuItem -p uMn_fy_scriptEditorToolkit_command -d true;
    menuItem
        -p uMn_fy_scriptEditorToolkit_command
        -l "テンプレートを使用"
        -cb `optionVar -q "ov_fy_scriptEditorToolkit_useTemplete"`
        -c "fy_scriptEditorToolkit_toggleUseTempleteOption"
        ;
    menuItem
        -p uMn_fy_scriptEditorToolkit_command
        -l "テンプレートを編集..."
        -c "fy_scriptEditorToolkit_editTemplete"
        ;
}

//===============================================
// お気に入り プルダウンメニュー更新
//===============================================
global proc fy_scriptEditorToolkit_updateFavoriteMenu()
{
    // お気に入りラベル、パス設定を取得
    string $labels[] = `optionVar -q "ov_fy_scriptEditorToolkit_favoriteLabels"`;
    string $paths[] = `optionVar -q "ov_fy_scriptEditorToolkit_favoritePaths"`;

    // 現在のメニュー項目を取得
    string $menus[] = `optionMenu -q -itemListLong uOM_fy_scriptEditorToolkit`;

    string $i;

    // メニュー項目を一旦削除
    for ($i in $menus)
    {
        deleteUI $i;
    }

    // お気に入りがなければ終了
    if (`size($labels)` == 0)
    {
        return;
    }

    int $count = 0;

    // メニュー項目作成
    for ($i in $labels)
    {
        menuItem -l $i -ann $paths[$count] -p uOM_fy_scriptEditorToolkit;

        $count += 1;
    }
}


//===============================================
// タブリストを更新
//===============================================
global proc fy_scriptEditorToolkit_updateTabsList()
{
    if (`textScrollList -ex uTSL_fy_scriptEditorToolkit` == false)
    {
        return;
    }

    // リストをクリア
    textScrollList -e -ra uTSL_fy_scriptEditorToolkit;

    // スクリプトエディタが存在しなければ終了
    if(`fy_scriptEditorToolkit_scriptEditorExists` == false)
    {
        return;
    }

    // タブ名
    global string $gCommandExecuterName[];

    // タブレイアウト名
    global string $gCommandExecuterTabs;

    string $i;

    // リストに追加
    for ($i in $gCommandExecuterName)
    {
        string $name = basename($i, "");

        textScrollList -e -a $name uTSL_fy_scriptEditorToolkit;
    }

    textScrollList -e -sii `tabLayout -q -sti $gCommandExecuterTabs` uTSL_fy_scriptEditorToolkit;
}

//===============================================
// タブを選択
//===============================================
global proc fy_scriptEditorToolkit_selectTab()
{
    // スクリプトエディタが存在しなければ
    if(`fy_scriptEditorToolkit_scriptEditorExists` == false)
    {
        return;
    }

    // タブレイアウト名
    global string $gCommandExecuterTabs;

    // テキストスクロールリストで選択している項目
    int $selIndex[] = `textScrollList -q -sii uTSL_fy_scriptEditorToolkit`;

    // タブを選択
    tabLayout -e -sti $selIndex[0] $gCommandExecuterTabs;

    selectCurrentExecuterControlWithoutFocus;

    // プロシージャリスト更新
    fy_scriptEditorToolkit_updateProceduresList;
}

//===============================================
// 選択したタブのインデックスを保存
//===============================================
global proc fy_scriptEditorToolkit_selectTabCommand()
{
    int $selTabIndex = `tabLayout -q -selectTabIndex uTBL_fy_scriptEditorToolkit`;
    optionVar -intValue "ov_fy_scriptEditorToolkit_selTabIndex" $selTabIndex;

    fy_scriptEditorToolkit_updateProceduresList;
    fy_scriptEditorToolkit_updateTabsList;
}

//===============================================
// スクリプトファイル以外を非表示 チェックボックスコールバック
//===============================================
global proc fy_scriptEditorToolkit_hideOthersCallback()
{
    int $value = `optionVar -q "ov_fy_scriptEditorToolkit_hideOthers"`;

    optionVar -iv "ov_fy_scriptEditorToolkit_hideOthers" ($value == false);

    fy_scriptEditorToolkit_updateFavoriteTreeView;
}

//===============================================
// ドック上部ペインのサイズを保存
//===============================================
global proc fy_scriptEditorToolkit_saveDockUpperPaneSize()
{
    int $paneSize[] = `paneLayout -q -paneSize uPNL_fy_scriptEditorToolkit`;
    optionVar -intValue "ov_fy_scriptEditorToolkit_dockUpperPaneSize" $paneSize[1];
}

//===============================================
// ツリービューを更新
//===============================================
global proc fy_scriptEditorToolkit_updateFavoriteTreeView()
{
    // お気に入りラベル、パス設定を取得
    string $paths[] = `optionVar -q "ov_fy_scriptEditorToolkit_favoritePaths"`;

    // ツリービューの項目を一旦削除
    treeView -e -removeAll uTRV_fy_scriptEditorToolkit;

    // ファイルパスのテキストフィールドをクリア
    textField -e -tx "" -ann "" uTXF_fy_scriptEditorToolkit;

    // 選択しているお気に入り項目のインデックス（0ベース）
    int $selIndex = `optionMenu -q -sl uOM_fy_scriptEditorToolkit` - 1 ;

    // プリファレンスに選択項目のインデックスを保存
    optionVar -intValue "ov_fy_scriptEditorToolkit_selFavoriteIdx" ($selIndex + 1);

    // オプションメニューの項目数が０の場合
    if ($selIndex == -1)
    {
        // オプションメニューのアノテーションをなしに
        optionMenu -e -ann "" uOM_fy_scriptEditorToolkit;

        return;
    }

    // お気に入りのパス
    string $path = $paths[$selIndex];
    $path = substituteAllString($path, "\\", "/");

    // オプションメニューのアノテーションにパスを設定
    optionMenu -e -ann $path uOM_fy_scriptEditorToolkit;

    // お気に入りフォルダの全てのフォルダ名とファイル名を取得
    string $dirsFiles[] = python("envfile.getDirsFiles(u'" + $path + "')");

    string $i;
    string $elm[];

    // ツリービューの項目を作成
    for ($i in $dirsFiles)
    {
        // フルパス名を個別に分割
        tokenize $i "/" $elm;

        // フルパス名の最後の要素を削除した配列
        string $temp[] = $elm;
        stringArrayRemoveAtIndex(size($elm)-1, $temp);

        // パス名作成
        string $parentItem = stringArrayToString($temp, "/");

        fy_scriptEditorToolkit_addItemToTreeView($i, $parentItem);
    }
}

//===============================================
// ツリーアイテム 選択コールバック
//===============================================
global proc fy_scriptEditorToolkit_selectTreeItemCallback(string $selItem, int $value)
{
    // ボタンカラー
    float $btnColNrm[] = {0.165, 0.165, 0.165};
    float $btnColSel[] = {0.404, 0.553, 0.698};

    // 選択状態によってボタンカラーを変更
    if ($value)
    {
        treeView -e
            -selectItem $selItem $value
            //-buttonTransparencyOverride $selItem 1 1
            -buttonTransparencyColor $selItem 1 $btnColSel[0] $btnColSel[1] $btnColSel[2]
            uTRV_fy_scriptEditorToolkit;
    }
    else
    {
        treeView -e
            -selectItem $selItem $value
            //-buttonTransparencyOverride $selItem 1 1
            -buttonTransparencyColor $selItem 1 $btnColNrm[0] $btnColNrm[1] $btnColNrm[2]
            uTRV_fy_scriptEditorToolkit;
    }

    // 何も選択されていない場合
    string $temp[] = `treeView -q -selectItem uTRV_fy_scriptEditorToolkit`;
    if ($temp[0] == "")
    {
        $selItem = "";
    }

    textField -e -tx $selItem -ann $selItem uTXF_fy_scriptEditorToolkit;
}

//===============================================
// ツリービュー ポップアップメニューコマンド
//===============================================
global proc fy_scriptEditorToolkit_treeviewPopupMenuCommand(string $method)
{
    // ツリービューで選択されている項目
    string $selItem[] = `treeView -q -selectItem uTRV_fy_scriptEditorToolkit`;

    if ($method == "開く")
    {
        if (`size($selItem)` == 0)
        {
            confirmDialog -title "Script Editor Toolkit" -message "リストで項目が選択されていません。" -b "OK";
            return;
        }

        // ツリービューのダブルクリックコールバックを呼ぶ
        fy_scriptEditorToolkit_dblClickTreeItemCallback($selItem[0], "dummy");

        return;
    }

    if ($method == "エクスプローラで開く")
    {
        if (`size($selItem)` == 0)
        {
            confirmDialog -title "Script Editor Toolkit" -message "リストで項目が選択されていません。" -b "OK";
            return;
        }

        fy_scriptEditorToolkit_openInExplorer($selItem[0]);

        return;
    }

    if ($method == "削除")
    {
        if (`size($selItem)` == 0)
        {
            confirmDialog -title "Script Editor Toolkit" -message "リストで項目が選択されていません。" -b "OK";
            return;
        }

        // 対象がファイルなら
        if (`filetest -f $selItem[0]`)
        {
            string $message = "以下のファイルを削除します。よろしいですか？\n\n" + $selItem[0];
            string $result = `confirmDialog -t "Script Editor Toolkit" -m $message -b "削除" -b "キャンセル" -db "削除" -cb "キャンセル" -ds "キャンセル"`;

            if ($result == "キャンセル")
            {
                return;
            }

            if(`sysFile -del $selItem[0]` == false)
            {
                confirmDialog -title "Script Editor Toolkit" -message "ファイルを削除できませんでした。" -b "OK";
                return;
            }

            print ("// " + $selItem[0] + " を削除しました。\n");
        }
        // 対象がフォルダなら
        else if (`filetest -d $selItem[0]`)
        {
            string $message = "以下のフォルダを削除します。よろしいですか？\n\n" + $selItem[0];
            string $result = `confirmDialog -t "Script Editor Toolkit" -m $message -b "削除" -b "キャンセル" -db "削除" -cb "キャンセル" -ds "キャンセル"`;

            if ($result == "キャンセル")
            {
                return;
            }

            system("rmdir /s /q " + substituteAllString($selItem[0], "/", "\\"));

            print ("// " + $selItem[0] + " を削除しました。\n");
        }
        else
        {
            confirmDialog -title "Script Editor Toolkit" -message "対象のファイル、もしくはフォルダが存在しません。" -b "OK";
        }

        // ツリービューから項目を削除
        treeView -e -removeItem $selItem[0] uTRV_fy_scriptEditorToolkit;

        return;
    }

    if ($method == "名前の変更")
    {
        if (`size($selItem)` == 0)
        {
            confirmDialog -title "Script Editor Toolkit" -message "リストで項目が選択されていません。" -b "OK";
            return;
        }

        // 対象ファイル、フォルダが存在しなければ終了
        if (!`filetest -e $selItem[0]`)
        {
            confirmDialog -title "Script Editor Toolkit" -message "対象のファイル、もしくはフォルダが存在しません。" -b "OK";

            // ツリービューから項目を削除
            treeView -e -removeItem $selItem[0] uTRV_fy_scriptEditorToolkit;

            return;
        }

        string $basename = basename($selItem[0], "");
        string $result = `promptDialog
                            -title "名前の変更"
                            -message "新しい名前:"
                            -text $basename
                            -button "変更"
                            -button "キャンセル"
                            -defaultButton "変更"
                            -cancelButton "キャンセル"
                            -dismissString "キャンセル"`
                            ;

        if ($result == "変更")
        {
            string $newName = `promptDialog -query -text`;

            if ($newName == $basename)
            {
                return;
            }

            string $newFullName = substituteAllString($selItem[0], $basename , $newName);

            if (!`sysFile -rename $newFullName $selItem[0]`)
            {
                confirmDialog -title "Script Editor Toolkit" -message "名前を変更できませんでした。" -b "OK";

                return;
            }

            treeView -e -displayLabel $selItem[0] $newName uTRV_fy_scriptEditorToolkit;

            // ツリービュー更新
            fy_scriptEditorToolkit_updateFavoriteTreeView;

            // リネームアイテムを選択
            treeView -e -selectItem $newFullName true uTRV_fy_scriptEditorToolkit;
            treeView -e -showItem $newFullName uTRV_fy_scriptEditorToolkit;
        }

        return;
    }

    ////////////////////
    // 新規作成
    ////////////////////
    string $title = $method + "を作成";
    string $message = $method + "名:";

    string $result = `promptDialog
                        -title $title
                        -message $message
                        -text ""
                        -button "変更"
                        -button "キャンセル"
                        -defaultButton "変更"
                        -cancelButton "キャンセル"
                        -dismissString "キャンセル"`
                        ;

    if ($result == "キャンセル")
    {
        return;
    }

    string $fileName = `promptDialog -query -text`;

    if ($fileName == "")
    {
        confirmDialog -title "Script Editor Toolkit" -message "名前が入力されていません。" -b "OK";
        return;
    }

    // 新規作成する場所
    string $folderPath;

    // 親項目
    string $parentItem = "";

    // ツリービューで項目を選択している場合
    if (`size($selItem)` != 0)
    {
        string $basename = basename($selItem[0], "");

        // 選択項目がフォルダの場合
        if (`filetest -d $selItem[0]`)
        {
            // 項目が展開状態の場合
            if (`treeView -q -isItemExpanded $selItem[0] uTRV_fy_scriptEditorToolkit`)
            {
                // 親項目は選択しているフォルダ
                $parentItem = $selItem[0];

                $folderPath = $selItem[0] + "/";
            }
            // 項目が閉じている場合
            else
            {
                // 親項目を取得
                $parentItem = `treeView -q -itemParent $selItem[0] uTRV_fy_scriptEditorToolkit`;

                $folderPath = substituteAllString($selItem[0], $basename, "");
            }
        }
        // 選択項目がフォルダ以外の場合
        else
        {
            // 親項目を取得
            $parentItem = `treeView -q -itemParent $selItem[0] uTRV_fy_scriptEditorToolkit`;

            $folderPath = substituteAllString($selItem[0], $basename, "");
        }
    }
    // ツリービューで項目を選択していない場合
    else
    {
        // 現在ツリービューに表示しているお気に入りのパス
        $folderPath = `optionMenu -q -ann uOM_fy_scriptEditorToolkit` + "/";
    }

    if ($method == "フォルダ")
    {
        // すでに存在する場合
        if (`filetest -d ($folderPath + $fileName)`)
        {
            confirmDialog -title "Script Editor Toolkit" -message "すでに同名のフォルダが存在します。" -b "OK";
            return;
        }

        if (`sysFile -makeDir ($folderPath + $fileName)` == false)
        {
            confirmDialog -title "Script Editor Toolkit" -message "フォルダを作成できませんでした。" -b "OK";
            return;
        }
    }
    else if ($method == "MEL ファイル" || $method == "Python ファイル")
    {
        string $ext;

        if ($method == "MEL ファイル")
        {
            $ext = ".mel";
        }
        else if($method == "Python ファイル")
        {
            $ext = ".py";
        }

        // 拡張子が付いていなければ付ける
        if (endsWith($fileName, $ext) == false)
        {
            $fileName = $fileName + $ext;
        }

        // すでに存在する場合
        if (`filetest -f ($folderPath + $fileName)`)
        {
            confirmDialog -title "Script Editor Toolkit" -message "すでに同名のファイルが存在します。" -b "OK";
            return;
        }

        // テンプレートファイル名
        string $templeteFileName = "templete" + $ext;

        // テンプレートファイルフォルダ
        string $templeteFileFolder = `internalVar -userScriptDir` + "templete/";

        // テンプレートファイルパス
        string $templeteFullPath = $templeteFileFolder + $templeteFileName;

        // テンプレートを使用がオン かつ テンプレートファイルが存在するなら
        if (`optionVar -q "ov_fy_scriptEditorToolkit_useTemplete"` && `filetest -f $templeteFullPath`)
        {
            // テンプレートファイルからコピー
            sysFile -copy ($folderPath + $fileName) $templeteFullPath;
        }
        else
        {
            // ファイル作成
            system("type nul > " + substituteAllString(($folderPath + $fileName), "/", "\\"));
        }
    }

    // ツリービューに項目を追加
    fy_scriptEditorToolkit_addItemToTreeView(($folderPath + $fileName), $parentItem);

    // リネームアイテムを選択
    treeView -e -selectItem ($folderPath + $fileName) true uTRV_fy_scriptEditorToolkit;
    treeView -e -showItem ($folderPath + $fileName) uTRV_fy_scriptEditorToolkit;

    print ("// " + $folderPath + $fileName + " を作成しました。\n");
}

//===============================================
// ツリービューに項目を追加
//===============================================
global proc fy_scriptEditorToolkit_addItemToTreeView(string $item, string $parentItem)
{
    // すでにツリービューに項目が存在すれば終了
    if(`treeView -q -itemExists $item uTRV_fy_scriptEditorToolkit`)
    {
        return;
    }

    // ボタンカラー
    float $btnColNrm[] = {0.165, 0.165, 0.165};

    // 文字カラー
    float $textCol[];

    // ファイルタイプ名
    string $fileType;

    // アイコンファイルパス
    string $iconDir = "Z:/mtk/tools/maya/modules/mtk3d/icons/fy_scriptEditorToolkit/";
    string $iconFile;

    // 要素のタイプ判定
    if (`filetest -d $item`)
    {
        $fileType = "dir";
        $textCol = {0.784, 0.784, 0.784};
        $iconFile = $iconDir + "dirClosedIcon.png";
    }
    else
    {
        if ( endsWith($item, ".mel") )
        {
            $fileType = "mel";
            $textCol = {0.9, 0.6, 0.6};
            $iconFile = $iconDir + "melFileIcon.png";
        }
        else if ( endsWith($item, ".py") )
        {
            $fileType = "python";
            $textCol = {0.4, 0.85, 0.85};
            $iconFile = $iconDir + "pyFileIcon.png";
        }
        else
        {
            $fileType = "other";
            $textCol = {0.784, 0.784, 0.784};
            $iconFile = $iconDir + "otherFileIcon.png";
        }
    }

    if (`optionVar -q "ov_fy_scriptEditorToolkit_hideOthers"` == false || $fileType != "other")
    {
        // ツリービューに項目を追加
        treeView -e -addItem $item $parentItem uTRV_fy_scriptEditorToolkit;

        treeView -e
            -displayLabel $item (basename($item, ""))
            -textColor $item $textCol[0] $textCol[1] $textCol[2]
            -enableButton $item 1 1
            -image $item 1 $iconFile
            -buttonTransparencyOverride $item 1 1
            -buttonTransparencyColor $item 1 $btnColNrm[0] $btnColNrm[1] $btnColNrm[2]
            -highlite $item true
            -highliteColor $item $btnColNrm[0] $btnColNrm[1] $btnColNrm[2]
            -expandItem $item false
            -expandCollapseCommand "fy_scriptEditorToolkit_expandCollapseTreeItemCallback"
            -pressCommand 1 "fy_scriptEditorToolkit_pressButtonCallback"
            uTRV_fy_scriptEditorToolkit;

        treeView -e -itemDblClickCommand2 "fy_scriptEditorToolkit_dblClickTreeItemCallback" uTRV_fy_scriptEditorToolkit;
    }
}

//===============================================
// ツリーアイテム 展開・折り畳み コールバック
//===============================================
global proc fy_scriptEditorToolkit_expandCollapseTreeItemCallback(string $selItem, int $value)
{
    // アイコンファイルパス
    string $iconDir = "Z:/mtk/tools/maya/modules/mtk3d/icons/fy_scriptEditorToolkit/";

    // 展開
    if ($value)
    {
        treeView -e -image $selItem 1 ($iconDir + "dirOpenIcon.png") uTRV_fy_scriptEditorToolkit;
    }
    // 折りたたみ
    else
    {
        treeView -e -image $selItem 1 ($iconDir + "dirClosedIcon.png") uTRV_fy_scriptEditorToolkit;
    }
}

//===============================================
// ツリーアイテム ダブルクリックコールバック
//===============================================
global proc fy_scriptEditorToolkit_dblClickTreeItemCallback(string $selItem, string $selLabel)
{
    // フォルダなら階層を展開
    if (`filetest -d $selItem`)
    {
        // 展開状態を反転して取得
        int $value = !`treeView -q -isItemExpanded $selItem uTRV_fy_scriptEditorToolkit`;

        // 展開状態を設定
        treeView -e -expandItem $selItem $value uTRV_fy_scriptEditorToolkit;

        // 展開時のコールバック
        fy_scriptEditorToolkit_expandCollapseTreeItemCallback($selItem, $value);

        return;
    }

    // スクリプト以外のファイルは既定のアプリケーションで開く
    if ( endsWith($selItem, ".mel") == false && endsWith($selItem, ".py") == false)
    {
        system("load " + $selItem);

        return;
    }

    // スクリプトを新しいタブで開く
    fy_scriptEditorToolkit_loadScriptNewTab($selItem);
}

//===============================================
// ツリービューのボタン コールバック
//===============================================
global proc fy_scriptEditorToolkit_pressButtonCallback(string $item, int $btnState)
{
    fy_scriptEditorToolkit_openInExplorer($item);
}

//===============================================
// ツリービューのポップアップメニューを作成
//===============================================
global proc fy_scriptEditorToolkit_createTreeViewPopupMenu(string $popupMenu)
{
    // ポップアップメニューの項目を一旦削除
    popupMenu -e -deleteAllItems $popupMenu;

    // メニュー作成
    menuItem -p $popupMenu -l "開く" -c "fy_scriptEditorToolkit_treeviewPopupMenuCommand(\"開く\")";
    menuItem -p $popupMenu -l "エクスプローラで開く" -c "fy_scriptEditorToolkit_treeviewPopupMenuCommand(\"エクスプローラで開く\")";
    menuItem -p $popupMenu -divider true;

    fy_scriptEditorToolkit_createPerforceMenu($popupMenu, 1);

    menuItem -p $popupMenu -divider true;
    menuItem -p $popupMenu -l "新規作成" -subMenu true;
        menuItem -l "フォルダ" -c "fy_scriptEditorToolkit_treeviewPopupMenuCommand(\"フォルダ\")";
        menuItem -divider true;
        menuItem -l "MEL ファイル" -c "fy_scriptEditorToolkit_treeviewPopupMenuCommand(\"MEL ファイル\")";
        menuItem -l "Python ファイル" -c "fy_scriptEditorToolkit_treeviewPopupMenuCommand(\"Python ファイル\")";
        menuItem
            -l "テンプレートを使用"
            -cb `optionVar -q "ov_fy_scriptEditorToolkit_useTemplete"`
            -c "fy_scriptEditorToolkit_toggleUseTempleteOption"
            ;
        setParent -menu ..;
    menuItem -divider true;
    menuItem -l "削除" -c "fy_scriptEditorToolkit_treeviewPopupMenuCommand(\"削除\")";
    menuItem -l "名前の変更" -c "fy_scriptEditorToolkit_treeviewPopupMenuCommand(\"名前の変更\")";

}

//===============================================
// Perforce メニュー作成
//===============================================
global proc fy_scriptEditorToolkit_createPerforceMenu(string $menu, int $type)
{
    string $filePath;

    string $menuLabel;

    // メニューバーに作成の場合
    if($type == 0)
    {
        $menuLabel = "カレントタブのスクリプトをPerforce 操作";

        global string $gLastFocusedCommandExecuter;

        $filePath = `cmdScrollFieldExecuter -query -filename $gLastFocusedCommandExecuter`;
    }
    // ツリービューのポップアップメニューに作成の場合
    else if($type == 1)
    {
        $menuLabel = "Perforce 操作";

        // ツリービューで選択されている項目
        string $selItem[] = `treeView -q -selectItem uTRV_fy_scriptEditorToolkit`;

        $filePath = $selItem[0];
    }
    else
    {
        return;
    }

    int $menuEnabled;

    // ファイル情報取得
    string $fstat[] = `mtk_p4Cmds_getFileStatusFlags($filePath)`;

    // perforce 管理パス以下にない、ファイルが存在しない場合
    if(`size($fstat)` == 0)
    {
        menuItem -p $menu -l $menuLabel -subMenu true -en false;

        return;
    }

    string $perforceManuName = `menuItem -p $menu -l $menuLabel -subMenu true`;

    string $fileName = basename($filePath, "");

    menuItem -d true -dl $fileName;

    int $addEnabled;
    int $syncEnabled;
    int $checkoutEnabled;
    int $submitEnabled;
    int $revertEnabled;

    int $baseIcon;
    int $noneIcon;
    int $registeredIcon;
    int $addedIcon;
    int $deletedIcon;
    int $checkedOutIcon;
    int $otherOpenedIcon;
    int $uncurrentIcon;
    int $conflictedIcon;

    string $addCmd;
    string $addAndSubmitCmd;
    string $syncCmd;
    string $checkoutCmd;
    string $checkoutAndOpenCmd;
    string $submitCmd;
    string $revertCmd;

    // 未サブミットの場合
    if(stringArrayContains("NONE", $fstat))
    {
        $addEnabled = true;
        $noneIcon = true;
    }
    // 削除サブミット済みの場合
    else if(stringArrayContains("DELETED", $fstat) && `size($fstat)` == 1)
    {
        $addEnabled = true;
        $deletedIcon = true;
    }
    else
    {
        // 削除マーキングの場合
        if(stringArrayContains("DELETED", $fstat))
        {
            //（ローカルの実ファイルが無くなっているのでここは来ない）
            $deletedIcon = true;
        }
        else
        {
            $baseIcon = true;
        }

        // 追加マーキングの場合
        if(stringArrayContains("ADDED", $fstat))
        {
            $submitEnabled = true;
            $revertEnabled = true;

            $addedIcon = true;
        }
        // perforce サブミット済みの場
        else if(stringArrayContains("REGISTERED", $fstat))
        {
            // コンフリクトしている場合
            if(stringArrayContains("CONFLICTED", $fstat))
            {
                $conflictedIcon = true;
            }
            // コンフリクトしていない場合
            else
            {
                // 最新リビジョンじゃない場合
                if(stringArrayContains("UNCURRENT", $fstat))
                {
                    $syncEnabled = true;
                    $uncurrentIcon = true;
                }
                // 最新リビジョンの場合
                else
                {
                    $registeredIcon = true;
                }
            }

            // チェックアウトしている場合
            if(stringArrayContains("CHECKED_OUT", $fstat))
            {
                $submitEnabled = true;
                $revertEnabled = true;

                $checkedOutIcon = true;
            }
            // チェックアウトしていない場合
            else
            {
                $checkoutEnabled = true;
            }

            // 他の人がチェックアウトしている場合
            if(stringArrayContains("OTHER_OPENED", $fstat))
            {
                $otherOpenedIcon = true;
            }
        }
    }

    // アイコン作成
    fy_scriptEditorToolkit_createFileIcon($perforceManuName, $baseIcon, $noneIcon, $registeredIcon, $addedIcon, $deletedIcon, $checkedOutIcon, $otherOpenedIcon, $uncurrentIcon, $conflictedIcon);


    // 追加マーキングコマンド
    if($addEnabled)
    {
        $addCmd = "mtk_p4Cmds_add(\"" + $filePath + "\");";

        $addAndSubmitCmd = "fy_scriptEditorToolkit_p4_addAndSubmit(\"" + $filePath + "\");";
    }
    // 最新リビジョンを取得コマンド
    if($syncEnabled)
    {
        $syncCmd = "fy_scriptEditorToolkit_p4_sync(\"" + $filePath + "\");";
    }
    // チェックアウトコマンド
    if($checkoutEnabled)
    {
        $checkoutCmd = "fy_scriptEditorToolkit_p4_checkout(\"" + $filePath + "\");";

        $checkoutAndOpenCmd = "fy_scriptEditorToolkit_p4_checkoutAndOpen(\"" + $filePath + "\");";
    }
    // リバートコマンド
    if($revertEnabled)
    {
        $revertCmd = "fy_scriptEditorToolkit_p4_revert(\"" + $filePath + "\");";
    }
    // サブミットコマンド
    if($submitEnabled)
    {
        $submitCmd = "fy_scriptEditorToolkit_p4_submit(\"" + $filePath + "\");";
    }

    string $iconPath = "Z:/mtk/tools/maya/modules/mtk3d/icons/fy_scriptEditorToolkit/";

    menuItem
        -en $addEnabled
        -l "追加目的でマーキング"
        -i ($iconPath + "add.png")
        -c $addCmd
        ;

    menuItem
        -en $addEnabled
        -l "追加してサブミット"
        //-i ($iconPath + "add.png")
        -c $addAndSubmitCmd
        ;

    menuItem -d true;

    menuItem
        -en $syncEnabled
        -l "最新リビジョンを取得"
        -i ($iconPath + "sync.png")
        -c $syncCmd
        ;

    menuItem -d true;

    menuItem
        -en $checkoutEnabled
        -l "チェックアウト"
        -i ($iconPath + "checkout.png")
        -c $checkoutCmd
        ;

    menuItem
        -en $checkoutEnabled
        -l "チェックアウトして開く"
        //-i ($iconPath + "checkout.png")
        -c $checkoutAndOpenCmd
        ;

    menuItem -d true;

    menuItem
        -en $submitEnabled
        -l "サブミット"
        -i ($iconPath + "submit.png")
        -c $submitCmd
        ;

    menuItem -d true;

    menuItem
        -en $revertEnabled
        -l "リバート"
        -i ($iconPath + "revert.png")
        -c $revertCmd
        ;
}

//===============================================
// テンプレート使用オプション トグル
//===============================================
global proc fy_scriptEditorToolkit_toggleUseTempleteOption()
{
    optionVar -intValue "ov_fy_scriptEditorToolkit_useTemplete" (`optionVar -q "ov_fy_scriptEditorToolkit_useTemplete"` == 0);
}

//===============================================
// お気に入り 追加・編集メニュー コールバック
//===============================================
global proc fy_scriptEditorToolkit_editFavoriteCallback(string $method)
{
    string $title;

    if ($method == "add")
    {
        $title = "お気に入りを追加";
    }
    else
    {
        $title = "お気に入りを編集";
    }

    // ダイアログ表示
    layoutDialog -title $title -ui ("fy_scriptEditorToolkit_editFavoriteDialogUI(\"" + $method + "\")");
}

//===============================================
// お気に入り 追加・編集ダイアログ
//===============================================
global proc fy_scriptEditorToolkit_editFavoriteDialogUI(string $method)
{
    // お気に入りラベル、パス設定を取得
    string $labels[] = `optionVar -q "ov_fy_scriptEditorToolkit_favoriteLabels"`;
    string $paths[] = `optionVar -q "ov_fy_scriptEditorToolkit_favoritePaths"`;

    // アイコンファイルパス
    string $iconDir = "Z:/mtk/tools/maya/modules/mtk3d/icons/fy_scriptEditorToolkit/";

    string $name;
    string $path;
    int $index;

    if ($method == "add")
    {
        $name = "新しいお気に入り";
        $path = "";
        $index = 0;
    }
    else
    {
        $name = `optionMenu -q -value uOM_fy_scriptEditorToolkit`;
        $index = `optionMenu -q -sl uOM_fy_scriptEditorToolkit` - 1;
        $path = $paths[$index];

    }

    // このダイアログのフォームレイアウトを取得
    string $form= `setParent -q`;

    formLayout -e $form;
        string $RCL = `rowColumnLayout -nc 2`;
            string $TFG1 = `textFieldGrp -l "名前 ：" -text $name -w 350 -columnWidth 1 50 -adjustableColumn 2`;
            text -l "";
            string $TFG2 = `textFieldGrp -l "パス ：" -w 350 -columnWidth 1 50 -adjustableColumn 2 -fileName $path`;
            symbolButton -i ($iconDir + "dirClosedIcon.png") -c ("fy_scriptEditorToolkit_selectFavoritePathDialog(\"" + $TFG2 + "\")");
            setParent ..;

        string $BtnOK = `button -l "OK" -c ("fy_scriptEditorToolkit_editFavoriteDialogOkCallback(\"" + $TFG1 + "\", \"" + $TFG2 + "\", \"" + $method + "\", \"" + $index + "\")")`;
        string $BtnCancel = `button -l "キャンセル" -c "layoutDialog -dismiss \"cancel\""`;

    int $spacer = 8;

    formLayout -e
        -attachForm $RCL "top" $spacer
        -attachForm $RCL "left" $spacer
        -attachForm $RCL "right" $spacer
        -attachForm $RCL "top" $spacer
        -attachForm $BtnOK "left" $spacer
        -attachForm $BtnOK "bottom" $spacer
        -attachForm $BtnCancel "right" $spacer
        -attachForm $BtnCancel "bottom" $spacer

        -attachControl $RCL "bottom" 16 $BtnOK

        -attachPosition $BtnOK "right" 4 50
        -attachPosition $BtnCancel "left" 4 50

        $form;
}

//===============================================
// お気に入り追加・編集ダイアログ パス選択ダイアログ
//===============================================
global proc fy_scriptEditorToolkit_selectFavoritePathDialog(string $TFG2)
{
    string $path = `textFieldGrp -q -text $TFG2`;

    if (!`filetest -d $path`)
    {
        $path = `internalVar -userScriptDir`;
    }

    string $selPath[] = `fileDialog2 -ds 2 -cap "フォルダを選択" -fm 3 -okc "選択" -dir $path`;

    if (size($selPath) != 0)
    {
        textFieldGrp -e -text $selPath[0] $TFG2;
    }
}

//===============================================
// お気に入り追加・編集ダイアログ OK ボタンコールバック
//===============================================
global proc fy_scriptEditorToolkit_editFavoriteDialogOkCallback(string $TFG1, string $TFG2, string $method, int $index)
{
    // お気に入りラベル、パス設定を取得
    string $labels[] = `optionVar -q "ov_fy_scriptEditorToolkit_favoriteLabels"`;
    string $paths[] = `optionVar -q "ov_fy_scriptEditorToolkit_favoritePaths"`;

    // テキストフィールドの内容を取得
    string $name = `textFieldGrp -q -text $TFG1`;
    string $path = `textFieldGrp -q -text $TFG2`;

    // すでにある名前を追加しようとしている場合
    if ($method == "add" && stringArrayContains($name, $labels))
    {
        confirmDialog -title "Script Editor Toolkit" -message "指定された名前はすでに使用されています。" -b "OK";
        return;
    }
    // すでにある名前に変更しようとしている場合
    if ($method == "edit" && stringArrayContains($name, $labels) && $name != `optionMenu -q -value uOM_fy_scriptEditorToolkit`)
    {
        confirmDialog -title "Script Editor Toolkit" -message "指定された名前はすでに使用されています。" -b "OK";
        return;
    }
    // 名前が入力されていない場合
    if ($name == "")
    {
        confirmDialog -title "Script Editor Toolkit" -message "名前が入力されていません。" -b "OK";
        return;
    }
    // パスが入力されていない場合
    if ($path == "")
    {
        confirmDialog -title "Script Editor Toolkit" -message "パスが入力されていません。" -b "OK";
        return;
    }
    // パスが存在しない場合
    if (`filetest -d $path` == false)
    {
        confirmDialog -title "Script Editor Toolkit" -message "指定されたパスが存在しません。" -b "OK";
        return;
    }

    // 追加の場合
    if ($method == "add")
    {
        optionVar -stringValueAppend "ov_fy_scriptEditorToolkit_favoriteLabels" $name;
        optionVar -stringValueAppend "ov_fy_scriptEditorToolkit_favoritePaths" $path;
    }
    // 編集の場合
    else
    {
        $labels[$index] = $name;
        $paths[$index] = $path;

        // 一旦プリファレンスをクリア
        optionVar -clearArray "ov_fy_scriptEditorToolkit_favoriteLabels";
        optionVar -clearArray "ov_fy_scriptEditorToolkit_favoritePaths";

        int $count = 0;
        string $elm;

        // プリファレンスに保存
        for ($elm in $labels)
        {
            optionVar -stringValueAppend "ov_fy_scriptEditorToolkit_favoriteLabels" $elm;
            optionVar -stringValueAppend "ov_fy_scriptEditorToolkit_favoritePaths" $paths[$count];

            $count += 1;
        }
    }

    // レイアウトダイアログを閉じる
    layoutDialog -dismiss "";

    // オプションメニューを更新
    fy_scriptEditorToolkit_updateFavoriteMenu();

    // 追加した項目を選択
    optionMenu -e -value $name uOM_fy_scriptEditorToolkit;

    // ツリービューを更新
    fy_scriptEditorToolkit_updateFavoriteTreeView();
}

//===============================================
// お気に入り削除メニュー コールバック
//===============================================
global proc fy_scriptEditorToolkit_removeFavoriteCallback()
{
    // お気に入りの数が１つの場合、削除しない
    if (`optionMenu -q -ni uOM_fy_scriptEditorToolkit` == 1)
    {
        confirmDialog -title "Script Editor Toolkit" -message "お気に入り項目をすべて削除することは出来ません。" -b "OK";
        return;
    }

    string $name = `optionMenu -q -v uOM_fy_scriptEditorToolkit`;
    int $index = `optionMenu -q -sl uOM_fy_scriptEditorToolkit`;

    string $message = "[ " + $name + " ] をお気に入りから削除します。";

    string $result = `confirmDialog -t "Script Editor Toolkit" -m $message -b "削除" -b "キャンセル" -db "削除" -cb "キャンセル" -ds "キャンセル"`;

    if ($result == "キャンセル")
    {
        return;
    }

    // プリファレンスから対応する要素を削除
    optionVar -removeFromArray "ov_fy_scriptEditorToolkit_favoriteLabels" ($index - 1);
    optionVar -removeFromArray "ov_fy_scriptEditorToolkit_favoritePaths" ($index - 1);

    // お気に入りプルダウンメニュー更新
    fy_scriptEditorToolkit_updateFavoriteMenu();

    // お気に入りの項目数
    int $numOfItems = `optionMenu -q -numberOfItems uOM_fy_scriptEditorToolkit`;

    if ($numOfItems == 0)
    {

    }
    // もともと選択していたインデックスがなくなった場合は最後の項目を選択
    else if ($index > $numOfItems)
    {
        optionMenu -e -sl $numOfItems uOM_fy_scriptEditorToolkit;
    }
    else
    {
        optionMenu -e -sl $index uOM_fy_scriptEditorToolkit;
    }

    fy_scriptEditorToolkit_updateFavoriteTreeView();
}

//===============================================
// お気に入りフォルダをエクスプローラで開く
//===============================================
global proc fy_scriptEditorToolkit_openFavoriteDir()
{
    string $path = `optionMenu -q -ann uOM_fy_scriptEditorToolkit`;

    if ($path == "")
    {
        return;
    }

    fy_scriptEditorToolkit_openInExplorer($path);
}

//===============================================
// 指定フォルダをエクスプローラで開く
//===============================================
global proc fy_scriptEditorToolkit_openInExplorer(string $path)
{
    if(`filetest -d $path`)
    {
        system("explorer " + `substituteAllString $path "/" "\\"`);
    }
    else if(`filetest -f $path`)
    {
        system("explorer "+ " /select," + `substituteAllString $path "/" "\\"`);
    }
}

//===============================================
// 指定フォルダをエクスプローラで開く（メニューコマンド）
//===============================================
global proc fy_scriptEditorToolkit_openInExplorerMenuCmd()
{
    global string $gLastFocusedCommandExecuter;

    // ファイル名取得
    string $path = `cmdScrollFieldExecuter -query -filename $gLastFocusedCommandExecuter`;

    if($path == "")
    {
        confirmDialog -t "Script Editor Toolkit" -icn "warning" -m "保存されたスクリプトファイルがありません。";

        return;
    }

    fy_scriptEditorToolkit_openInExplorer($path);
}

//===============================================
// プロシージャ/関数 リストを更新
//===============================================
global proc fy_scriptEditorToolkit_updateProceduresList()
{
    // 対象のテキストスクロールリストが無ければ終了
    if (`textScrollList -ex uTSL2_fy_scriptEditorToolkit` == false)
    {
        return;
    }

    // 現在選択している項目
    string $selItem[] = `textScrollList -q -selectItem uTSL2_fy_scriptEditorToolkit`;

    // リストをクリア
    textScrollList -e -ra uTSL2_fy_scriptEditorToolkit;

    // スクリプトエディタが存在しなければ終了
    if(`fy_scriptEditorToolkit_scriptEditorExists` == false)
    {
        return;
    }

    global string $gLastFocusedCommandControl;
    global string $gCommandExecuterTabs;
    global string $gCommandExecuterType[];

    // モジュールインポート
    python("import mtk3d.maya.env.scriptEditor.functions as envse");

	// 選択しているタブのインデックス（０ベース）
	int $selTabIdx = `tabLayout -q -selectTabIndex $gCommandExecuterTabs` - 1;

    // プロシージャ/関数 リスト
    string $procedures[];

    // タブのタイプ別に処理
    if($gCommandExecuterType[$selTabIdx] == "mel")
    {
        // プロシージャリストを取得
        $procedures = `python("envse.getProcedures('" + $gLastFocusedCommandControl + "')" )`;
    }
    else
    {
        // 関数リストを取得
        $procedures = `python("envse.getFunctions('" + $gLastFocusedCommandControl + "')" )`;
    }

    // 名前順にソートの場合
    if(`optionVar -q "ov_fy_scriptEditorToolkit_sortProcListByName"`)
    {
        $procedures = `sort($procedures)`;
    }

    string $i;

    string $tokenizedList[];

    string $items[];

    // リストに追加
    for ($i in $procedures)
    {
        // プロシージャ名と行番号に分解
        tokenizeList($i, $tokenizedList);

        // 小文字プロシージャ名
        string $lowerProcName = `tolower $tokenizedList[0]`;

        // 検索文字列
        string $searchText = `textField -q -text uTXF2_fy_scriptEditorToolkit`;

        // 小文字に
        $searchText = `tolower $searchText`;

        // 検索文字列が無い場合 or 検索文字列が含まれている場合
        if($searchText == "" || ($searchText != "" && `gmatch $lowerProcName ("*" + $searchText + "*")`))
        {
            // 項目とユニークタグを設定
            textScrollList -e -a $tokenizedList[0] -uniqueTag $tokenizedList[1] uTSL2_fy_scriptEditorToolkit;

            stringArrayInsertAtIndex(0, $items, $tokenizedList[0]);
        }
    }

    // 選択していた項目があれば再度選択
    if (stringArrayContains($selItem[0], $items))
    {
        textScrollList -e -si $selItem[0] uTSL2_fy_scriptEditorToolkit;
    }
}

//===============================================
// プロシージャリストで項目を選択したときのコールバック
//===============================================
global proc fy_scriptEditorToolkit_proceduresListSelectCallback()
{
    // スクリプトエディタが存在しなければ
    if(`fy_scriptEditorToolkit_scriptEditorExists` == false)
    {
        return;
    }

    // プロシージャリストを更新
    fy_scriptEditorToolkit_updateProceduresList;

    // 選択項目を取得
    string $selItem[] = `textScrollList -q -selectItem uTSL2_fy_scriptEditorToolkit`;

    // ユニークタグを取得
    string $tag[] = `textScrollList -q -selectUniqueTagItem uTSL2_fy_scriptEditorToolkit`;

    // 何も選択していない場合
    if(`size($selItem)` == 0)
    {
        return;
    }

    // タグを整数値に
    int $lineNumber = int($tag[0]);

    global string $gLastFocusedCommandControl;

    // プロシージャの行に移動
    cmdScrollFieldExecuter -e -currentLine $lineNumber $gLastFocusedCommandControl;

    // 検索設定
    cmdScrollFieldExecuter -e -searchString $selItem[0] -searchDown on $gLastFocusedCommandControl;

    // プロシージャ名を検索＆選択
    cmdScrollFieldExecuter -q -searchAndSelect $gLastFocusedCommandControl;
}

//===============================================
// プロシージャリストを名前順にソート チェックボックスコールバック
//===============================================
global proc fy_scriptEditorToolkit_sortProcListByNameToggle()
{
    int $value = `optionVar -q "ov_fy_scriptEditorToolkit_sortProcListByName"`;
    optionVar -iv "ov_fy_scriptEditorToolkit_sortProcListByName" ($value == false);

    fy_scriptEditorToolkit_updateProceduresList;
}

//===============================================
// 新しいタブを作成
//===============================================
global proc fy_scriptEditorToolkit_createNewTab(string $type)
{
    // スクリプトエディタが存在しなければ
    if(`fy_scriptEditorToolkit_scriptEditorExists` == false)
    {
        // スクリプトエディタ起動
        ScriptEditor;
    }

    // mel の場合
    if($type == "mel")
    {
        buildNewExecuterTab(-1, "MEL", "mel", 0);
    }
    // python の場合
    else if($type == "python")
    {
        buildNewExecuterTab(-1, "Python", "python", 0);
    }
    else
    {
        return;
    }

    // タブレイアウト名
    global string $gCommandExecuterTabs;

    // 作成したタブを選択
    tabLayout -e -selectTabIndex `tabLayout -q -numberOfChildren $gCommandExecuterTabs` $gCommandExecuterTabs;
    selectCurrentExecuterControl();

    // 最後に選択した cmdScrollFieldExecuter
    global string $gLastFocusedCommandExecuter;

    // テンプレートを使用する場合
    if(`optionVar -q "ov_fy_scriptEditorToolkit_useTemplete"`)
    {
        // テンプレートファイル名
        string $fileName;

        // テンプレート内容
        string $contents;

        // mel の場合
        if($type == "mel")
        {
            $fileName = "templete.mel";
        }
        // python の場合
        else
        {
            $fileName = "templete.py";
        }

        // テンプレートファイルパス
        string $templeteFilePath = `internalVar -userScriptDir` + "templete/" + $fileName;

        // テンプレートファイルが存在する場合
        if(`filetest -f $templeteFilePath`)
        {
            // テンプレートファイルの内容を読み込み
            $contents = freadAllText($templeteFilePath);

            // スクリプトフィールドに追加
            cmdScrollFieldExecuter -e -appendText $contents $gLastFocusedCommandExecuter;
        }
    }
}

//===============================================
// 新しいタブにスクリプトファイルをロード
//===============================================
global proc fy_scriptEditorToolkit_loadScriptNewTab(string $path)
{


    // 指定ファイルがなければ選択ダイアログを表示
    if (`filetest -f $path` == false)
    {
        string $favorites[] = `optionVar -q "ov_fy_scriptEditorToolkit_favoritePaths"`;
        int $index = `optionVar -q "ov_fy_scriptEditorToolkit_selFavoriteIdx"` - 1;

        string $startDir = $favorites[$index];

        string $selFile[] = `fileDialog2
                                -dialogStyle 2
                                -caption "スクリプトを開く"
                                -fileMode  1
                                -okCaption "開く"
                                -startingDirectory $startDir
                                -fileFilter "MEL ファイル (*.mel);;Python ファイル (*.py);;すべてのファイル (*)"`
                                ;

        $path = $selFile[0];
    }

    // ★
    // p4v ファイル情報取得
    string $fstat[] = `mtk_p4Cmds_getFileStatusFlags($path)`;

    // perforce 登録ファイルの場合
    if(`size($fstat)` != 0)
    {
        // コンフリクトしている場合
        if(stringArrayContains("CONFLICTED", $fstat))
        {
            string $message = $path + "\n\n コンフリクトしています。 コンフリクトを解決してから作業を行ってください。";

            confirmDialog -t "Script Editor Toolkit" -icn "warning" -m $message -b "OK";
        }

        // 他にチェックアウトしているユーザーがいる場合
        if(stringArrayContains("OTHER_OPENED", $fstat))
        {
            string $users[] = mtk_p4Cmds_getOtherCheckoutUser($path);
            string $user;

            string $message = $path + "\n\n他にチェックアウトしているユーザーがいます。\n\n\n【 現在チェックアウトしているユーザー 】\n\n";

            for($user in $users)
            {
                $message = $message + $user + ", ";
            }

            string $result = `confirmDialog -t "Script Editor Toolkit" -m $message -b "続行" -b "キャンセル" -db "続行" -cb "キャンセル" -ds "キャンセル"`;

            if($result == "キャンセル")
            {
                return;
            }
        }

        // 最新リビジョンじゃない場合
        else if(stringArrayContains("UNCURRENT", $fstat))
        {
            // チェックアウトしている場合
            if(stringArrayContains("CHECKED_OUT", $fstat))
            {
                // リバートして最新リビジョンを取得してチェックアウトするか確認
                string $message = $path + "\n\n最新リビジョンではない状態でチェックアウトされています。\n\nリバートと最新リビジョン取得を行い、チェックアウトし直しますか？";
                string $result = `confirmDialog -t "Script Editor Toolkit" -m $message -b "最新リビジョンを取得してチェックアウト" -b "このまま開く" -b "キャンセル" -db "最新リビジョンを取得してチェックアウト" -cb "キャンセル" -ds "キャンセル"`;

                if($result == "最新リビジョンを取得してチェックアウト")
                {
                    // リバート
                    mtk_p4Cmds_revert($path);

                    // 最新リビジョンを取得
                    mtk_p4Cmds_sync($path);

                    // チェックアウト
                    mtk_p4Cmds_checkout($path);
                }
                else if($result == "キャンセル")
                {
                    return;
                }
            }
            // チェックアウトしていない場合
            else
            {
                // 最新リビジョンを取得するか確認
                string $message = $path + "\n\n最新リビジョンではありません。\n\n最新リビジョンを取得しますか？";
                string $result = `confirmDialog -t "Script Editor Toolkit" -m $message -b "最新リビジョンを取得する" -b "最新リビジョンを取得しない" -b "キャンセル" -db "最新リビジョンを取得する" -cb "キャンセル" -ds "キャンセル"`;

                if($result == "最新リビジョンを取得する")
                {
                    // 最新リビジョンを取得
                    mtk_p4Cmds_sync($path);
                }
                else if($result == "キャンセル")
                {
                    return;
                }

                // チェックアウトするか確認
                $message = $path + "\n\nチェックアウトしますか？";
                $result = `confirmDialog -t "Script Editor Toolkit" -m $message -b "チェックアウトする" -b "チェックアウトしない" -b "キャンセル" -db "チェックアウトする" -cb "キャンセル" -ds "キャンセル"`;

                if($result == "チェックアウトする")
                {
                    // チェックアウト
                    mtk_p4Cmds_checkout($path);
                }
                else if($result == "キャンセル")
                {
                    return;
                }
            }
        }
        // 最新リビジョンでチェックアウトしていない場合
        else if(stringArrayContains("REGISTERED", $fstat) && stringArrayContains("CHECKED_OUT", $fstat) == false)
        {
            // チェックアウトするか確認
            string $message = $path + "\n\nチェックアウトしますか？";
            string $result = `confirmDialog -t "Script Editor Toolkit" -m $message -b "チェックアウトする" -b "チェックアウトしない" -b "キャンセル" -db "チェックアウトする" -cb "キャンセル" -ds "キャンセル"`;

            if($result == "チェックアウトする")
            {
                // チェックアウト
                mtk_p4Cmds_checkout($path);
            }
            else if($result == "キャンセル")
            {
                return;
            }
        }
    }

    // スクリプトエディタが存在しなければ
    if(`fy_scriptEditorToolkit_scriptEditorExists` == false)
    {
        // スクリプトエディタ起動
        ScriptEditor;
    }

    // すでに開いていれば、そのタブをアクティブにして終了
    if (selectExecuterTabByName($path))
    {
        return;
    }

    // 拡張子を取得
    string $ext = fileExtension($path);

    // 新しいタブを作成
    if($ext == "py")
    {
        buildNewExecuterTab(-1, "Python", "python", 0);
    }
    else if ($ext == "mel")
    {
        buildNewExecuterTab(-1, "MEL", "mel", 0);
    }
    else
    {
        return;
    }

    // タブレイアウト名
    global string $gCommandExecuterTabs;

    // 作成したタブを選択
    tabLayout -e -selectTabIndex `tabLayout -q -numberOfChildren $gCommandExecuterTabs` $gCommandExecuterTabs;
    selectCurrentExecuterControl();

    // スクリプトファイルをロード
    delegateCommandToFocusedExecuterWindow("-e -loadFile \"" + $path + "\"", 0);

    // タブ名をファイル名に変更
    renameCurrentExecuterTab($path, 0);
    delegateCommandToFocusedExecuterWindow "-e -modificationChangedCommand executerTabModificationChanged" 0;
    delegateCommandToFocusedExecuterWindow "-e -fileChangedCommand executerTabFileChanged" 0;

    // タブリストを更新
    fy_scriptEditorToolkit_updateTabsList;

    // プロシージャリスト更新
    fy_scriptEditorToolkit_updateProceduresList;

    // 最近使ったファイルに追加
    fy_scriptEditorToolkit_addRecentFilesOptionVar($path);
}

//===============================================
// スクリプトファイルを保存済みのファイルに復帰
//===============================================
global proc fy_scriptEditorToolkit_reopenScript()
{
    // スクリプトエディタが存在しなければ
    if(`fy_scriptEditorToolkit_scriptEditorExists` == false)
    {
        return;
    }

    global string $gLastFocusedCommandExecuter;

    string $fileName = `cmdScrollFieldExecuter -query -filename $gLastFocusedCommandExecuter`;

    if($fileName == "")
    {
        confirmDialog -t "Script Editor Toolkit" -icn "warning" -m "保存されたスクリプトファイルがありません。" -b "OK";

        return;
    }

    string $message = $fileName + "\n\n変更を破棄して、保存済みのファイルからスクリプトを開き直します。";
    string $result = `confirmDialog -t "Script Editor Toolkit" -m $message -b "開く" -b "キャンセル" -db "開く" -cb "キャンセル" -ds "キャンセル"`;

    if ($result == "キャンセル")
    {
        return;
    }

	// スクリプトファイル読み込み
	delegateCommandToFocusedExecuterWindow("-e -loadFile \"" + $fileName + "\"", 0);

    // プロシージャリストを更新
    fy_scriptEditorToolkit_updateProceduresList;
}


//===============================================
// 最近使ったファイルをoptionVar に格納
//===============================================
global proc fy_scriptEditorToolkit_addRecentFilesOptionVar(string $path)
{
    // optionVar に格納されているファイルパス
    string $recentFilesPath[] = `optionVar -q "ov_fy_scriptEditorToolkit_recentFilesPath"`;

    // すでにパスがあれば配列から削除
    $recentFilesPath = stringArrayRemove({$path}, $recentFilesPath);

    // 配列の最初に追加
    stringArrayInsertAtIndex( 0, $recentFilesPath, $path);

    // optionVar を一旦クリア
    optionVar -clearArray "ov_fy_scriptEditorToolkit_recentFilesPath";

    // 保持するファイルの最大数
    int $recentFilesMaxSize = `optionVar -q "RecentFilesMaxSize"`;

    int $size = `size($recentFilesPath)`;

    if ($size > $recentFilesMaxSize)
    {
        $size = $recentFilesMaxSize;
    }

    int $i;

    // optionVar に格納
    for ($i = 0; $i < $size; $i++)
    {
        optionVar -stringValueAppend "ov_fy_scriptEditorToolkit_recentFilesPath" $recentFilesPath[$i];
    }
}

//===============================================
// 最近使ったファイル メニュー作成
//===============================================
global proc fy_scriptEditorToolkit_buildRecentFilesMenu()
{
    // ファイルメニューが無ければ終了
    if(!`menu -exists uMN_fy_scriptEditorToolkit_recentFiles`)
    {
        return;
    }

    // 最近使ったファイルメニューアイテムを一旦削除
    menu -e -deleteAllItems uMN_fy_scriptEditorToolkit_recentFiles;

    // 最近使ったファイルリストを取得
    string $recentFilesPath[] = `optionVar -q "ov_fy_scriptEditorToolkit_recentFilesPath"`;

    int $index;

    // 最近使ったファイルメニュー項目作成
    for($index = 0; $index < `size($recentFilesPath)`; $index++)
    {
        string $label = substituteAllString($recentFilesPath[$index], "/", "\\");

        menuItem
            -p uMN_fy_scriptEditorToolkit_recentFiles
            -l $label
            -c ("fy_scriptEditorToolkit_loadScriptNewTab(\"" + $recentFilesPath[$index] + "\")")
            ;
    }
}

//===============================================
// スクリプトエディタ上部ペインのサイズを保存
//===============================================
global proc fy_scriptEditorToolkit_saveUpperPaneSize()
{
    global string $gCommandLayout;

    // 現在のサイズを取得
    int $paneSize[] = `paneLayout -q -paneSize $gCommandLayout`;

    // プリファレンスに保存
    optionVar -intValue "ov_fy_scriptEditorToolkit_upperPaneSize" $paneSize[1];
}

//===============================================
// スクリプトエディタが存在するか
//===============================================
global proc int fy_scriptEditorToolkit_scriptEditorExists()
{
    global string $gCommandLayout;

    if($gCommandLayout == "" || `control -exists $gCommandLayout` == false)
    {
        return false;
    }
    else
    {
        return true;
    }

}

//===============================================
// テンプレートファイルを編集
//===============================================
global proc fy_scriptEditorToolkit_editTemplete()
{
    string $result = `confirmDialog -t "Script Editor Toolkit" -m "テンプレートファイルのソース言語を選択してください。" -ma "center" -b "MEL" -b "Python" -b "キャンセル" -db "MEL" -cb "キャンセル" -ds "キャンセル"`;

    string $templeteFileName;

    if ($result == "キャンセル")
    {
        return;
    }
    else if ($result == "Python")
    {
        $templeteFileName = "templete.py";
    }
    else
    {
        $templeteFileName = "templete.mel";
    }

    // テンプレートファイルフォルダ
    string $templeteFileFolder = `internalVar -userScriptDir` + "templete/";

    // テンプレートファイルパス
    string $templeteFullPath = $templeteFileFolder + $templeteFileName;

    // テンプレートフォルダが無ければ作成
    if (`filetest -d $templeteFileFolder` == false)
    {
        sysFile -makeDir $templeteFileFolder;
    }

    // テンプレートファイルが無ければ作成
    if (`filetest -f $templeteFullPath` == false)
    {
        // ファイル作成
        system("type nul > " + substituteAllString($templeteFullPath, "/", "\\"));

        print ("// " + $result + " テンプレートファイルを作成しました。\n");
    }

    fy_scriptEditorToolkit_loadScriptNewTab($templeteFullPath);

}

//===============================================
// 最新リビジョンを取得
//===============================================
global proc int fy_scriptEditorToolkit_p4_sync(string $filePath)
{
    // ファイル情報取得
    string $fstat[] = `mtk_p4Cmds_getFileStatusFlags($filePath)`;

    // チェックアウトしている場合
    if(stringArrayContains("CHECKED_OUT", $fstat))
    {
        string $message = $filePath + "\n\n最新リビジョンではない状態でチェックアウトされています。\n\nリバートして最新リビジョンを取得しますか？";
        string $result = `confirmDialog -t "Script Editor Toolkit" -m $message -b "リバートして最新リビジョンを取得" -b "キャンセル" -db "リバートして最新リビジョンを取得" -cb "キャンセル" -ds "キャンセル"`;

        if($result == "リバートして最新リビジョンを取得")
        {
            // リバート
            mtk_p4Cmds_revert($filePath);
        }
        else
        {
            return false;
        }
    }

    // 最新リビジョンを取得
    mtk_p4Cmds_sync($filePath);

    return true;
}

//===============================================
// チェックアウト
//===============================================
global proc int fy_scriptEditorToolkit_p4_checkout(string $filePath)
{
    // ファイル情報取得
    string $fstat[] = `mtk_p4Cmds_getFileStatusFlags($filePath)`;

    // 他にチェックアウトしているユーザーがいる場合
    if(stringArrayContains("OTHER_OPENED", $fstat))
    {
        string $users[] = mtk_p4Cmds_getOtherCheckoutUser($filePath);
        string $user;

        string $message = $filePath + "\n\n他にチェックアウトしているユーザーがいます。チェックアウトしますか？\n\n\n【 現在チェックアウトしているユーザー 】\n\n";

        for($user in $users)
        {
            $message = $message + $user + ", ";
        }

        string $result = `confirmDialog -t "Script Editor Toolkit" -m $message -b "チェックアウト" -b "キャンセル" -db "チェックアウト" -cb "キャンセル" -ds "キャンセル"`;

        if($result == "キャンセル")
        {
            return false;
        }
    }

    // 最新リビジョンじゃない場合
    if(stringArrayContains("UNCURRENT", $fstat))
    {
        string $message = $filePath + "\n\n最新リビジョンではありません。\n\n最新リビジョンを取得してチェックアウトしますか？";
        string $result = `confirmDialog -t "Script Editor Toolkit" -m $message -b "最新リビジョンを取得してチェックアウト" -b "最新リビジョンを取得せずチェックアウト" -b "キャンセル" -db "最新リビジョンを取得してチェックアウト" -cb "キャンセル" -ds "キャンセル"`;

        if($result == "最新リビジョンを取得してチェックアウト")
        {
            // 最新リビジョンを取得
            mtk_p4Cmds_sync($filePath);
        }
        else if($result == "キャンセル")
        {
            return false;
        }
    }

    // チェックアウト
    mtk_p4Cmds_checkout($filePath);

    return true;
}

//===============================================
// チェックアウトして開く
//===============================================
global proc fy_scriptEditorToolkit_p4_checkoutAndOpen(string $filePath)
{
    // チェックアウト
    int $result = fy_scriptEditorToolkit_p4_checkout($filePath);

    // チェックアウトしなかったら終了
    if($result == false)
    {
        return;
    }

    // スクリプト以外のファイルは既定のアプリケーションで開く
    if ( endsWith($filePath, ".mel") == false && endsWith($filePath, ".py") == false)
    {
        system("load " + $filePath);
    }
    else
    {
        // スクリプトを新しいタブで開く
        fy_scriptEditorToolkit_loadScriptNewTab($filePath);
    }
}

//===============================================
// リバート
//===============================================
global proc int fy_scriptEditorToolkit_p4_revert(string $filePath)
{
    // ファイル情報取得
    string $fstat[] = `mtk_p4Cmds_getFileStatusFlags($filePath)`;

    // チェックアウト状態の場合
    if(stringArrayContains("CHECKED_OUT", $fstat))
    {
        // ファイルが変更されているか
        int $isModified = `mtk_p4Cmds_isModified($filePath)`;

        // ファイルが変更されている場合
        if($isModified)
        {
            string $message = $filePath + "\n\nファイルの変更が取り消されます。リバートしますか？";
            string $result = `confirmDialog -t "Script Editor Toolkit" -m $message -b "リバート" -b "キャンセル" -db "リバート" -cb "キャンセル" -ds "キャンセル"`;

            if($result == "キャンセル")
            {
                return false;
            }
        }
    }

    // リバート
    mtk_p4Cmds_revert($filePath);

    return true;
}

//===============================================
// サブミット
//===============================================
global proc int fy_scriptEditorToolkit_p4_submit(string $filePath)
{
    // ファイル情報取得
    string $fstat[] = `mtk_p4Cmds_getFileStatusFlags($filePath)`;

    // コンフリクト状態の場合
    if(stringArrayContains("CONFLICTED", $fstat))
    {
        string $message = $filePath + "\n\nコンフリクトしています。 コンフリクトを解決してからサブミットを行ってください。";
        confirmDialog -t "Script Editor Toolkit" -m $message -b "OK";

        return false;
    }

    // 最新リビジョンじゃない場合
    if(stringArrayContains("UNCURRENT", $fstat))
    {
        string $message = $filePath + "\n\n最新リビジョンではありません。 コンフリクトを回避してからサブミットを行ってください。";
        confirmDialog -t "Script Editor Toolkit" -m $message -b "OK";

        return false;
    }

    string $comment;

    string $result = `promptDialog
        -title "Script Editor Toolkit"
        -message "コメントを入力してください。"
        -button "サブミット"
        -button "キャンセル"
        -defaultButton "サブミット"
        -cancelButton "キャンセル"
        -dismissString "キャンセル"`;

    if($result == "キャンセル")
    {
        return false;
    }

    $comment = `promptDialog -query -text`;

    // サブミット
    int $isDone = mtk_p4Cmds_submit($filePath, $comment);

    return $isDone;
}

//===============================================
// 追加 + サブミット
//===============================================
global proc fy_scriptEditorToolkit_p4_addAndSubmit(string $filePath)
{
    // 追加
    mtk_p4Cmds_add($filePath);

    // サブミット
    int $result = fy_scriptEditorToolkit_p4_submit($filePath);

    // サブミットが完了しなかったらリバート
    if($result == false)
    {
        fy_scriptEditorToolkit_p4_revert($filePath);
    }
}

//===============================================
// ファイル状態 アイコン生成
//===============================================
global proc fy_scriptEditorToolkit_createFileIcon(string $menuName, int $baseIcon, int $noneIcon, int $registeredIcon, int $addedIcon, int $deletedIcon, int $checkedOutIcon, int $otherOpenedIcon, int $uncurrentIcon, int $conflictedIcon)
{
    // アイコン画像パス
    string $conflictedIconPath = "Z:/mtk/tools/maya/modules/mtk3d/icons/fy_scriptEditorToolkit/file_conflicted.png";
    string $uncurrentIconPath = "Z:/mtk/tools/maya/modules/mtk3d/icons/fy_scriptEditorToolkit/file_uncurrent.png";
    string $otherOpenedIconPath = "Z:/mtk/tools/maya/modules/mtk3d/icons/fy_scriptEditorToolkit/file_other_opened.png";
    string $checkedOutIconPath = "Z:/mtk/tools/maya/modules/mtk3d/icons/fy_scriptEditorToolkit/file_checked_out.png";
    string $addedIconPath = "Z:/mtk/tools/maya/modules/mtk3d/icons/fy_scriptEditorToolkit/file_added.png";
    string $deletedIconPath = "Z:/mtk/tools/maya/modules/mtk3d/icons/fy_scriptEditorToolkit/file_deleted.png";
    string $registeredIconPath = "Z:/mtk/tools/maya/modules/mtk3d/icons/fy_scriptEditorToolkit/file_registered.png";
    string $noneIconPath = "Z:/mtk/tools/maya/modules/mtk3d/icons/fy_scriptEditorToolkit/file_none.png";
    string $baseIconPath = "Z:/mtk/tools/maya/modules/mtk3d/icons/fy_scriptEditorToolkit/file_base.png";

    // 生成するアイコンパス
    string $iconPath =`internalVar -userTmpDir` + "fy_scriptEditorToolkit_tempIcon.png";

    // Maya のインストールフォルダ
    string $mayaPath = `getenv "MAYA_LOCATION"`;

    // ImageMagick
    string $imconvert = "\"" + $mayaPath + "/bin/imconvert.exe\" ";

    // ImageMagick オプション
    string $options = "-composite -compose over ";

    // 合成する画像リスト
    string $images[];

    if($conflictedIcon)
    {
        $images[`size($images)`] = $conflictedIconPath;
    }
    if($uncurrentIcon)
    {
        $images[`size($images)`] = $uncurrentIconPath;
    }
    if($otherOpenedIcon)
    {
        $images[`size($images)`] = $otherOpenedIconPath;
    }
    if($checkedOutIcon)
    {
        $images[`size($images)`] = $checkedOutIconPath;
    }
    if($addedIcon)
    {
        $images[`size($images)`] = $addedIconPath;
    }
    if($deletedIcon)
    {
        $images[`size($images)`] = $deletedIconPath;
    }
    if($registeredIcon)
    {
        $images[`size($images)`] = $registeredIconPath;
    }
    if($noneIcon)
    {
        $images[`size($images)`] = $noneIconPath;
    }
    if($baseIcon)
    {
        $images[`size($images)`] = $baseIconPath;
    }

    // 画像1枚の場合
    if(`size($images)` == 1)
    {
        menuItem -e -i $images[0] $menuName;

        return;
    }

    // 画像合成ベースコマンド
    string $baseCmd = $imconvert + $options;

    // 画像2枚以上の場合
    if(`size($images)` >= 2)
    {
        // 画像合成コマンド
        string $cmd = $baseCmd + $images[1] + " " + $images[0] + " " + $iconPath;

        // 画像合成
        system($cmd);

        //画像3枚以上の場合
        if(`size($images)` >= 3)
        {
            int $i;

            for($i = 2; $i<`size($images)`; $i++)
            {
                // 画像合成コマンド
                $cmd = $baseCmd + $images[$i] + " " + $iconPath + " " + $iconPath;

                // 画像合成
                system($cmd);
            }
        }
    }

    // perforce メニューのアイコン変更
    menuItem -e -i $iconPath $menuName;
}

//===============================================
// 標準のscriptEditorPanel.mel（2022） のプロシージャを上書き
//===============================================
global proc selectCurrentExecuterControl() {
	string $curExecuter = `getCurrentExecuterControl`;
	setLastFocusedCommandExecuter $curExecuter;
	setFocus $curExecuter;
	syncExecuterTabState();
	syncScriptEditorPanelToolbarAndMenu();

    // ★コマンド追加（タブリストとプロシージャリストを更新）
    fy_scriptEditorToolkit_updateTabsList;
    fy_scriptEditorToolkit_updateProceduresList;
}

global proc selectCurrentExecuterControlWithoutFocus() {
	string $curExecuter = `getCurrentExecuterControl`;
	setLastFocusedCommandExecuter $curExecuter;
	syncExecuterTabState();

    // ★コマンド追加（タブリストを更新）
    fy_scriptEditorToolkit_updateTabsList;
}

global proc loadFileInNewTab()
{
	global string $gCommandExecuterTabs;
	global string $gLastFocusedCommandExecuter;
	global string $gLastUsedDir;

	// First prompt for the file to load.
	string $dir = (size($gLastUsedDir) > 0) ? $gLastUsedDir : `internalVar -usd`;
	string $loadFile = commandScrollFieldPromptForFile((uiRes("m_scriptEditorPanel.kLoadScriptTitle")), $dir, 0, "all");

	if (size($loadFile) > 0) {
		// Remember this directory for the next time.
		$gLastUsedDir = dirname($loadFile);

		// If we already have this file opened in another tab, just make that tab
		// active instead of loading the file again.
		if (selectExecuterTabByName($loadFile)) {
			return;
		}

		// Create a new tab and load the file in it.
		int $sel = 1;
		string $ext = fileExtension($loadFile);
		switch($ext) {
			case "py":
				buildNewExecuterTab(-1, "Python", "python", 0);
				break;
			case "mel":
				buildNewExecuterTab(-1, "MEL", "mel", 0);
				break;

			default:
				$sel = 0;
				addNewExecuterTab("", 0);
				break;
		}

		if ($sel) {
			// select the last tab created
			tabLayout -e -selectTabIndex `tabLayout -q -numberOfChildren $gCommandExecuterTabs` $gCommandExecuterTabs;
			selectCurrentExecuterControl();
		}

		// Then load the file contents into the new field
		delegateCommandToFocusedExecuterWindow("-e -loadFile \"" + $loadFile + "\"", 0);

		// Get the filename and rename the tab.
		string $filename = `cmdScrollFieldExecuter -query -filename $gLastFocusedCommandExecuter`;
		if (size($filename) > 0) {
			renameCurrentExecuterTab($filename, 0);
			delegateCommandToFocusedExecuterWindow "-e -modificationChangedCommand executerTabModificationChanged" 0;
			delegateCommandToFocusedExecuterWindow "-e -fileChangedCommand executerTabFileChanged" 0;
		}

		// ★最近使ったファイルに追加
		fy_scriptEditorToolkit_addRecentFilesOptionVar($loadFile);

		// ★プロシージャリスト更新
		fy_scriptEditorToolkit_updateProceduresList;

		// ★タブリスト更新
		fy_scriptEditorToolkit_updateTabsList;
	}
}
